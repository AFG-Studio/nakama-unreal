// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: api.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "api.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

#pragma warning( push )  
#pragma warning(disable: 4125; once: 4267)

namespace server {

namespace {

const ::google::protobuf::Descriptor* Heartbeat_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Heartbeat_reflection_ = NULL;
const ::google::protobuf::Descriptor* Error_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Error_reflection_ = NULL;
const ::google::protobuf::Descriptor* AuthenticateRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AuthenticateRequest_reflection_ = NULL;
struct AuthenticateRequestOneofInstance {
  const ::server::AuthenticateRequest_Email* email_;
  ::google::protobuf::internal::ArenaStringPtr facebook_;
  ::google::protobuf::internal::ArenaStringPtr google_;
  const ::server::AuthenticateRequest_GameCenter* game_center_;
  ::google::protobuf::internal::ArenaStringPtr steam_;
  ::google::protobuf::internal::ArenaStringPtr device_;
  ::google::protobuf::internal::ArenaStringPtr custom_;
}* AuthenticateRequest_default_oneof_instance_ = NULL;
const ::google::protobuf::Descriptor* AuthenticateRequest_Email_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AuthenticateRequest_Email_reflection_ = NULL;
const ::google::protobuf::Descriptor* AuthenticateRequest_GameCenter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AuthenticateRequest_GameCenter_reflection_ = NULL;
const ::google::protobuf::Descriptor* AuthenticateResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AuthenticateResponse_reflection_ = NULL;
struct AuthenticateResponseOneofInstance {
  const ::server::AuthenticateResponse_Session* session_;
  const ::server::AuthenticateResponse_Error* error_;
}* AuthenticateResponse_default_oneof_instance_ = NULL;
const ::google::protobuf::Descriptor* AuthenticateResponse_Session_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AuthenticateResponse_Session_reflection_ = NULL;
const ::google::protobuf::Descriptor* AuthenticateResponse_Error_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AuthenticateResponse_Error_reflection_ = NULL;
const ::google::protobuf::Descriptor* Envelope_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Envelope_reflection_ = NULL;
struct EnvelopeOneofInstance {
  const ::server::Error* error_;
  const ::server::Heartbeat* heartbeat_;
  const ::server::Logout* logout_;
  const ::server::TLink* link_;
  const ::server::TUnlink* unlink_;
  const ::server::TSelfFetch* self_fetch_;
  const ::server::TSelfUpdate* self_update_;
  const ::server::TUsersFetch* users_fetch_;
  const ::server::TSelf* self_;
  const ::server::TUsers* users_;
  const ::server::TFriendAdd* friend_add_;
  const ::server::TFriendRemove* friend_remove_;
  const ::server::TFriendBlock* friend_block_;
  const ::server::TFriendsList* friends_list_;
  const ::server::TFriends* friends_;
  const ::server::TGroupCreate* group_create_;
  const ::server::TGroupUpdate* group_update_;
  const ::server::TGroupRemove* group_remove_;
  const ::server::TGroupsFetch* groups_fetch_;
  const ::server::TGroupsList* groups_list_;
  const ::server::TGroupsSelfList* groups_self_list_;
  const ::server::TGroupUsersList* group_users_list_;
  const ::server::TGroupJoin* group_join_;
  const ::server::TGroupLeave* group_leave_;
  const ::server::TGroupUserAdd* group_user_add_;
  const ::server::TGroupUserKick* group_user_kick_;
  const ::server::TGroupUserPromote* group_user_promote_;
  const ::server::TGroup* group_;
  const ::server::TGroups* groups_;
  const ::server::TGroupUsers* group_users_;
  const ::server::TTopicJoin* topic_join_;
  const ::server::TTopicLeave* topic_leave_;
  const ::server::TTopicMessageSend* topic_message_send_;
  const ::server::TTopicMessagesList* topic_messages_list_;
  const ::server::TTopic* topic_;
  const ::server::TTopicMessageAck* topic_message_ack_;
  const ::server::TopicMessage* topic_message_;
  const ::server::TTopicMessages* topic_messages_;
  const ::server::TopicPresence* topic_presence_;
  const ::server::TMatchCreate* match_create_;
  const ::server::TMatchJoin* match_join_;
  const ::server::TMatchLeave* match_leave_;
  const ::server::TMatchDataSend* match_data_send_;
  const ::server::TMatch* match_;
  const ::server::MatchData* match_data_;
  const ::server::MatchPresence* match_presence_;
  const ::server::TStorageFetch* storage_fetch_;
  const ::server::TStorageWrite* storage_write_;
  const ::server::TStorageRemove* storage_remove_;
  const ::server::TStorageData* storage_data_;
  const ::server::TStorageKey* storage_key_;
}* Envelope_default_oneof_instance_ = NULL;
const ::google::protobuf::Descriptor* Logout_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Logout_reflection_ = NULL;
const ::google::protobuf::Descriptor* TLink_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TLink_reflection_ = NULL;
struct TLinkOneofInstance {
  const ::server::AuthenticateRequest_Email* email_;
  ::google::protobuf::internal::ArenaStringPtr facebook_;
  ::google::protobuf::internal::ArenaStringPtr google_;
  const ::server::AuthenticateRequest_GameCenter* game_center_;
  ::google::protobuf::internal::ArenaStringPtr steam_;
  ::google::protobuf::internal::ArenaStringPtr device_;
  ::google::protobuf::internal::ArenaStringPtr custom_;
}* TLink_default_oneof_instance_ = NULL;
const ::google::protobuf::Descriptor* TUnlink_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TUnlink_reflection_ = NULL;
struct TUnlinkOneofInstance {
  ::google::protobuf::internal::ArenaStringPtr email_;
  ::google::protobuf::internal::ArenaStringPtr facebook_;
  ::google::protobuf::internal::ArenaStringPtr google_;
  ::google::protobuf::internal::ArenaStringPtr game_center_;
  ::google::protobuf::internal::ArenaStringPtr steam_;
  ::google::protobuf::internal::ArenaStringPtr device_;
  ::google::protobuf::internal::ArenaStringPtr custom_;
}* TUnlink_default_oneof_instance_ = NULL;
const ::google::protobuf::Descriptor* User_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  User_reflection_ = NULL;
const ::google::protobuf::Descriptor* Self_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Self_reflection_ = NULL;
const ::google::protobuf::Descriptor* TSelfFetch_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TSelfFetch_reflection_ = NULL;
const ::google::protobuf::Descriptor* TSelf_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TSelf_reflection_ = NULL;
const ::google::protobuf::Descriptor* TSelfUpdate_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TSelfUpdate_reflection_ = NULL;
const ::google::protobuf::Descriptor* TUsersFetch_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TUsersFetch_reflection_ = NULL;
const ::google::protobuf::Descriptor* TUsers_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TUsers_reflection_ = NULL;
const ::google::protobuf::Descriptor* Friend_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Friend_reflection_ = NULL;
const ::google::protobuf::Descriptor* TFriendAdd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TFriendAdd_reflection_ = NULL;
const ::google::protobuf::Descriptor* TFriendRemove_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TFriendRemove_reflection_ = NULL;
const ::google::protobuf::Descriptor* TFriendBlock_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TFriendBlock_reflection_ = NULL;
const ::google::protobuf::Descriptor* TFriendsList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TFriendsList_reflection_ = NULL;
const ::google::protobuf::Descriptor* TFriends_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TFriends_reflection_ = NULL;
const ::google::protobuf::Descriptor* Group_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Group_reflection_ = NULL;
const ::google::protobuf::Descriptor* TGroupCreate_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TGroupCreate_reflection_ = NULL;
const ::google::protobuf::Descriptor* TGroup_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TGroup_reflection_ = NULL;
const ::google::protobuf::Descriptor* TGroupUpdate_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TGroupUpdate_reflection_ = NULL;
const ::google::protobuf::Descriptor* TGroupRemove_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TGroupRemove_reflection_ = NULL;
const ::google::protobuf::Descriptor* TGroupsSelfList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TGroupsSelfList_reflection_ = NULL;
const ::google::protobuf::Descriptor* TGroupsFetch_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TGroupsFetch_reflection_ = NULL;
const ::google::protobuf::Descriptor* TGroupsList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TGroupsList_reflection_ = NULL;
struct TGroupsListOneofInstance {
  ::google::protobuf::internal::ArenaStringPtr lang_;
  ::google::protobuf::int64 created_at_;
  ::google::protobuf::int64 count_;
}* TGroupsList_default_oneof_instance_ = NULL;
const ::google::protobuf::Descriptor* TGroups_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TGroups_reflection_ = NULL;
const ::google::protobuf::Descriptor* GroupUser_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GroupUser_reflection_ = NULL;
const ::google::protobuf::Descriptor* TGroupUsersList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TGroupUsersList_reflection_ = NULL;
const ::google::protobuf::Descriptor* TGroupUsers_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TGroupUsers_reflection_ = NULL;
const ::google::protobuf::Descriptor* TGroupJoin_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TGroupJoin_reflection_ = NULL;
const ::google::protobuf::Descriptor* TGroupLeave_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TGroupLeave_reflection_ = NULL;
const ::google::protobuf::Descriptor* TGroupUserAdd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TGroupUserAdd_reflection_ = NULL;
const ::google::protobuf::Descriptor* TGroupUserKick_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TGroupUserKick_reflection_ = NULL;
const ::google::protobuf::Descriptor* TGroupUserPromote_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TGroupUserPromote_reflection_ = NULL;
const ::google::protobuf::Descriptor* TopicId_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TopicId_reflection_ = NULL;
struct TopicIdOneofInstance {
  ::google::protobuf::internal::ArenaStringPtr dm_;
  ::google::protobuf::internal::ArenaStringPtr room_;
  ::google::protobuf::internal::ArenaStringPtr group_id_;
}* TopicId_default_oneof_instance_ = NULL;
const ::google::protobuf::Descriptor* UserPresence_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UserPresence_reflection_ = NULL;
const ::google::protobuf::Descriptor* TTopicJoin_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TTopicJoin_reflection_ = NULL;
struct TTopicJoinOneofInstance {
  ::google::protobuf::internal::ArenaStringPtr user_id_;
  ::google::protobuf::internal::ArenaStringPtr room_;
  ::google::protobuf::internal::ArenaStringPtr group_id_;
}* TTopicJoin_default_oneof_instance_ = NULL;
const ::google::protobuf::Descriptor* TTopic_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TTopic_reflection_ = NULL;
const ::google::protobuf::Descriptor* TTopicLeave_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TTopicLeave_reflection_ = NULL;
const ::google::protobuf::Descriptor* TTopicMessageSend_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TTopicMessageSend_reflection_ = NULL;
const ::google::protobuf::Descriptor* TTopicMessageAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TTopicMessageAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* TopicMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TopicMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* TTopicMessagesList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TTopicMessagesList_reflection_ = NULL;
struct TTopicMessagesListOneofInstance {
  ::google::protobuf::internal::ArenaStringPtr user_id_;
  ::google::protobuf::internal::ArenaStringPtr room_;
  ::google::protobuf::internal::ArenaStringPtr group_id_;
}* TTopicMessagesList_default_oneof_instance_ = NULL;
const ::google::protobuf::Descriptor* TTopicMessages_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TTopicMessages_reflection_ = NULL;
const ::google::protobuf::Descriptor* TopicPresence_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TopicPresence_reflection_ = NULL;
const ::google::protobuf::Descriptor* TMatchCreate_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TMatchCreate_reflection_ = NULL;
const ::google::protobuf::Descriptor* TMatchJoin_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TMatchJoin_reflection_ = NULL;
const ::google::protobuf::Descriptor* TMatch_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TMatch_reflection_ = NULL;
const ::google::protobuf::Descriptor* TMatchDataSend_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TMatchDataSend_reflection_ = NULL;
const ::google::protobuf::Descriptor* MatchData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MatchData_reflection_ = NULL;
const ::google::protobuf::Descriptor* TMatchLeave_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TMatchLeave_reflection_ = NULL;
const ::google::protobuf::Descriptor* MatchPresence_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MatchPresence_reflection_ = NULL;
const ::google::protobuf::Descriptor* TStorageFetch_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TStorageFetch_reflection_ = NULL;
const ::google::protobuf::Descriptor* TStorageFetch_StorageKey_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TStorageFetch_StorageKey_reflection_ = NULL;
const ::google::protobuf::Descriptor* TStorageData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TStorageData_reflection_ = NULL;
const ::google::protobuf::Descriptor* TStorageData_StorageData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TStorageData_StorageData_reflection_ = NULL;
const ::google::protobuf::Descriptor* TStorageWrite_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TStorageWrite_reflection_ = NULL;
const ::google::protobuf::Descriptor* TStorageWrite_StorageData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TStorageWrite_StorageData_reflection_ = NULL;
const ::google::protobuf::Descriptor* TStorageKey_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TStorageKey_reflection_ = NULL;
const ::google::protobuf::Descriptor* TStorageKey_StorageKey_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TStorageKey_StorageKey_reflection_ = NULL;
const ::google::protobuf::Descriptor* TStorageRemove_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TStorageRemove_reflection_ = NULL;
const ::google::protobuf::Descriptor* TStorageRemove_StorageKey_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TStorageRemove_StorageKey_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_api_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_api_2eproto() {
  protobuf_AddDesc_api_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "api.proto");
  GOOGLE_CHECK(file != NULL);
  Heartbeat_descriptor_ = file->message_type(0);
  static const int Heartbeat_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Heartbeat, timestamp_),
  };
  Heartbeat_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Heartbeat_descriptor_,
      Heartbeat::internal_default_instance(),
      Heartbeat_offsets_,
      -1,
      -1,
      -1,
      sizeof(Heartbeat),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Heartbeat, _internal_metadata_));
  Error_descriptor_ = file->message_type(1);
  static const int Error_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Error, reason_),
  };
  Error_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Error_descriptor_,
      Error::internal_default_instance(),
      Error_offsets_,
      -1,
      -1,
      -1,
      sizeof(Error),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Error, _internal_metadata_));
  AuthenticateRequest_descriptor_ = file->message_type(2);
  static const int AuthenticateRequest_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuthenticateRequest, collationid_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(AuthenticateRequest_default_oneof_instance_, email_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(AuthenticateRequest_default_oneof_instance_, facebook_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(AuthenticateRequest_default_oneof_instance_, google_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(AuthenticateRequest_default_oneof_instance_, game_center_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(AuthenticateRequest_default_oneof_instance_, steam_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(AuthenticateRequest_default_oneof_instance_, device_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(AuthenticateRequest_default_oneof_instance_, custom_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuthenticateRequest, payload_),
  };
  AuthenticateRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      AuthenticateRequest_descriptor_,
      AuthenticateRequest::internal_default_instance(),
      AuthenticateRequest_offsets_,
      -1,
      -1,
      -1,
      AuthenticateRequest_default_oneof_instance_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuthenticateRequest, _oneof_case_[0]),
      sizeof(AuthenticateRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuthenticateRequest, _internal_metadata_));
  AuthenticateRequest_Email_descriptor_ = AuthenticateRequest_descriptor_->nested_type(0);
  static const int AuthenticateRequest_Email_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuthenticateRequest_Email, email_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuthenticateRequest_Email, password_),
  };
  AuthenticateRequest_Email_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      AuthenticateRequest_Email_descriptor_,
      AuthenticateRequest_Email::internal_default_instance(),
      AuthenticateRequest_Email_offsets_,
      -1,
      -1,
      -1,
      sizeof(AuthenticateRequest_Email),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuthenticateRequest_Email, _internal_metadata_));
  AuthenticateRequest_GameCenter_descriptor_ = AuthenticateRequest_descriptor_->nested_type(1);
  static const int AuthenticateRequest_GameCenter_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuthenticateRequest_GameCenter, player_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuthenticateRequest_GameCenter, bundle_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuthenticateRequest_GameCenter, timestamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuthenticateRequest_GameCenter, salt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuthenticateRequest_GameCenter, signature_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuthenticateRequest_GameCenter, public_key_url_),
  };
  AuthenticateRequest_GameCenter_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      AuthenticateRequest_GameCenter_descriptor_,
      AuthenticateRequest_GameCenter::internal_default_instance(),
      AuthenticateRequest_GameCenter_offsets_,
      -1,
      -1,
      -1,
      sizeof(AuthenticateRequest_GameCenter),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuthenticateRequest_GameCenter, _internal_metadata_));
  AuthenticateResponse_descriptor_ = file->message_type(3);
  static const int AuthenticateResponse_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuthenticateResponse, collation_id_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(AuthenticateResponse_default_oneof_instance_, session_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(AuthenticateResponse_default_oneof_instance_, error_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuthenticateResponse, payload_),
  };
  AuthenticateResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      AuthenticateResponse_descriptor_,
      AuthenticateResponse::internal_default_instance(),
      AuthenticateResponse_offsets_,
      -1,
      -1,
      -1,
      AuthenticateResponse_default_oneof_instance_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuthenticateResponse, _oneof_case_[0]),
      sizeof(AuthenticateResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuthenticateResponse, _internal_metadata_));
  AuthenticateResponse_Session_descriptor_ = AuthenticateResponse_descriptor_->nested_type(0);
  static const int AuthenticateResponse_Session_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuthenticateResponse_Session, token_),
  };
  AuthenticateResponse_Session_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      AuthenticateResponse_Session_descriptor_,
      AuthenticateResponse_Session::internal_default_instance(),
      AuthenticateResponse_Session_offsets_,
      -1,
      -1,
      -1,
      sizeof(AuthenticateResponse_Session),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuthenticateResponse_Session, _internal_metadata_));
  AuthenticateResponse_Error_descriptor_ = AuthenticateResponse_descriptor_->nested_type(1);
  static const int AuthenticateResponse_Error_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuthenticateResponse_Error, reason_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuthenticateResponse_Error, request_),
  };
  AuthenticateResponse_Error_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      AuthenticateResponse_Error_descriptor_,
      AuthenticateResponse_Error::internal_default_instance(),
      AuthenticateResponse_Error_offsets_,
      -1,
      -1,
      -1,
      sizeof(AuthenticateResponse_Error),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuthenticateResponse_Error, _internal_metadata_));
  Envelope_descriptor_ = file->message_type(4);
  static const int Envelope_offsets_[53] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Envelope, collation_id_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(Envelope_default_oneof_instance_, error_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(Envelope_default_oneof_instance_, heartbeat_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(Envelope_default_oneof_instance_, logout_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(Envelope_default_oneof_instance_, link_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(Envelope_default_oneof_instance_, unlink_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(Envelope_default_oneof_instance_, self_fetch_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(Envelope_default_oneof_instance_, self_update_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(Envelope_default_oneof_instance_, users_fetch_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(Envelope_default_oneof_instance_, self_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(Envelope_default_oneof_instance_, users_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(Envelope_default_oneof_instance_, friend_add_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(Envelope_default_oneof_instance_, friend_remove_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(Envelope_default_oneof_instance_, friend_block_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(Envelope_default_oneof_instance_, friends_list_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(Envelope_default_oneof_instance_, friends_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(Envelope_default_oneof_instance_, group_create_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(Envelope_default_oneof_instance_, group_update_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(Envelope_default_oneof_instance_, group_remove_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(Envelope_default_oneof_instance_, groups_fetch_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(Envelope_default_oneof_instance_, groups_list_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(Envelope_default_oneof_instance_, groups_self_list_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(Envelope_default_oneof_instance_, group_users_list_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(Envelope_default_oneof_instance_, group_join_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(Envelope_default_oneof_instance_, group_leave_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(Envelope_default_oneof_instance_, group_user_add_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(Envelope_default_oneof_instance_, group_user_kick_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(Envelope_default_oneof_instance_, group_user_promote_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(Envelope_default_oneof_instance_, group_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(Envelope_default_oneof_instance_, groups_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(Envelope_default_oneof_instance_, group_users_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(Envelope_default_oneof_instance_, topic_join_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(Envelope_default_oneof_instance_, topic_leave_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(Envelope_default_oneof_instance_, topic_message_send_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(Envelope_default_oneof_instance_, topic_messages_list_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(Envelope_default_oneof_instance_, topic_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(Envelope_default_oneof_instance_, topic_message_ack_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(Envelope_default_oneof_instance_, topic_message_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(Envelope_default_oneof_instance_, topic_messages_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(Envelope_default_oneof_instance_, topic_presence_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(Envelope_default_oneof_instance_, match_create_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(Envelope_default_oneof_instance_, match_join_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(Envelope_default_oneof_instance_, match_leave_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(Envelope_default_oneof_instance_, match_data_send_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(Envelope_default_oneof_instance_, match_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(Envelope_default_oneof_instance_, match_data_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(Envelope_default_oneof_instance_, match_presence_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(Envelope_default_oneof_instance_, storage_fetch_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(Envelope_default_oneof_instance_, storage_write_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(Envelope_default_oneof_instance_, storage_remove_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(Envelope_default_oneof_instance_, storage_data_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(Envelope_default_oneof_instance_, storage_key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Envelope, payload_),
  };
  Envelope_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Envelope_descriptor_,
      Envelope::internal_default_instance(),
      Envelope_offsets_,
      -1,
      -1,
      -1,
      Envelope_default_oneof_instance_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Envelope, _oneof_case_[0]),
      sizeof(Envelope),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Envelope, _internal_metadata_));
  Logout_descriptor_ = file->message_type(5);
  static const int Logout_offsets_[1] = {
  };
  Logout_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Logout_descriptor_,
      Logout::internal_default_instance(),
      Logout_offsets_,
      -1,
      -1,
      -1,
      sizeof(Logout),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Logout, _internal_metadata_));
  TLink_descriptor_ = file->message_type(6);
  static const int TLink_offsets_[8] = {
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(TLink_default_oneof_instance_, email_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(TLink_default_oneof_instance_, facebook_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(TLink_default_oneof_instance_, google_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(TLink_default_oneof_instance_, game_center_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(TLink_default_oneof_instance_, steam_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(TLink_default_oneof_instance_, device_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(TLink_default_oneof_instance_, custom_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TLink, payload_),
  };
  TLink_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      TLink_descriptor_,
      TLink::internal_default_instance(),
      TLink_offsets_,
      -1,
      -1,
      -1,
      TLink_default_oneof_instance_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TLink, _oneof_case_[0]),
      sizeof(TLink),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TLink, _internal_metadata_));
  TUnlink_descriptor_ = file->message_type(7);
  static const int TUnlink_offsets_[8] = {
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(TUnlink_default_oneof_instance_, email_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(TUnlink_default_oneof_instance_, facebook_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(TUnlink_default_oneof_instance_, google_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(TUnlink_default_oneof_instance_, game_center_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(TUnlink_default_oneof_instance_, steam_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(TUnlink_default_oneof_instance_, device_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(TUnlink_default_oneof_instance_, custom_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TUnlink, payload_),
  };
  TUnlink_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      TUnlink_descriptor_,
      TUnlink::internal_default_instance(),
      TUnlink_offsets_,
      -1,
      -1,
      -1,
      TUnlink_default_oneof_instance_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TUnlink, _oneof_case_[0]),
      sizeof(TUnlink),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TUnlink, _internal_metadata_));
  User_descriptor_ = file->message_type(8);
  static const int User_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(User, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(User, handle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(User, fullname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(User, avatar_url_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(User, lang_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(User, location_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(User, timezone_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(User, metadata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(User, created_at_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(User, updated_at_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(User, last_online_at_),
  };
  User_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      User_descriptor_,
      User::internal_default_instance(),
      User_offsets_,
      -1,
      -1,
      -1,
      sizeof(User),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(User, _internal_metadata_));
  Self_descriptor_ = file->message_type(9);
  static const int Self_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Self, user_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Self, verified_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Self, email_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Self, device_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Self, facebook_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Self, google_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Self, gamecenter_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Self, steam_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Self, custom_id_),
  };
  Self_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Self_descriptor_,
      Self::internal_default_instance(),
      Self_offsets_,
      -1,
      -1,
      -1,
      sizeof(Self),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Self, _internal_metadata_));
  TSelfFetch_descriptor_ = file->message_type(10);
  static const int TSelfFetch_offsets_[1] = {
  };
  TSelfFetch_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      TSelfFetch_descriptor_,
      TSelfFetch::internal_default_instance(),
      TSelfFetch_offsets_,
      -1,
      -1,
      -1,
      sizeof(TSelfFetch),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TSelfFetch, _internal_metadata_));
  TSelf_descriptor_ = file->message_type(11);
  static const int TSelf_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TSelf, self_),
  };
  TSelf_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      TSelf_descriptor_,
      TSelf::internal_default_instance(),
      TSelf_offsets_,
      -1,
      -1,
      -1,
      sizeof(TSelf),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TSelf, _internal_metadata_));
  TSelfUpdate_descriptor_ = file->message_type(12);
  static const int TSelfUpdate_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TSelfUpdate, handle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TSelfUpdate, fullname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TSelfUpdate, timezone_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TSelfUpdate, location_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TSelfUpdate, lang_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TSelfUpdate, metadata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TSelfUpdate, avatar_url_),
  };
  TSelfUpdate_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      TSelfUpdate_descriptor_,
      TSelfUpdate::internal_default_instance(),
      TSelfUpdate_offsets_,
      -1,
      -1,
      -1,
      sizeof(TSelfUpdate),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TSelfUpdate, _internal_metadata_));
  TUsersFetch_descriptor_ = file->message_type(13);
  static const int TUsersFetch_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TUsersFetch, user_ids_),
  };
  TUsersFetch_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      TUsersFetch_descriptor_,
      TUsersFetch::internal_default_instance(),
      TUsersFetch_offsets_,
      -1,
      -1,
      -1,
      sizeof(TUsersFetch),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TUsersFetch, _internal_metadata_));
  TUsers_descriptor_ = file->message_type(14);
  static const int TUsers_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TUsers, users_),
  };
  TUsers_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      TUsers_descriptor_,
      TUsers::internal_default_instance(),
      TUsers_offsets_,
      -1,
      -1,
      -1,
      sizeof(TUsers),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TUsers, _internal_metadata_));
  Friend_descriptor_ = file->message_type(15);
  static const int Friend_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Friend, user_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Friend, type_),
  };
  Friend_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Friend_descriptor_,
      Friend::internal_default_instance(),
      Friend_offsets_,
      -1,
      -1,
      -1,
      sizeof(Friend),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Friend, _internal_metadata_));
  TFriendAdd_descriptor_ = file->message_type(16);
  static const int TFriendAdd_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TFriendAdd, user_id_),
  };
  TFriendAdd_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      TFriendAdd_descriptor_,
      TFriendAdd::internal_default_instance(),
      TFriendAdd_offsets_,
      -1,
      -1,
      -1,
      sizeof(TFriendAdd),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TFriendAdd, _internal_metadata_));
  TFriendRemove_descriptor_ = file->message_type(17);
  static const int TFriendRemove_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TFriendRemove, user_id_),
  };
  TFriendRemove_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      TFriendRemove_descriptor_,
      TFriendRemove::internal_default_instance(),
      TFriendRemove_offsets_,
      -1,
      -1,
      -1,
      sizeof(TFriendRemove),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TFriendRemove, _internal_metadata_));
  TFriendBlock_descriptor_ = file->message_type(18);
  static const int TFriendBlock_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TFriendBlock, user_id_),
  };
  TFriendBlock_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      TFriendBlock_descriptor_,
      TFriendBlock::internal_default_instance(),
      TFriendBlock_offsets_,
      -1,
      -1,
      -1,
      sizeof(TFriendBlock),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TFriendBlock, _internal_metadata_));
  TFriendsList_descriptor_ = file->message_type(19);
  static const int TFriendsList_offsets_[1] = {
  };
  TFriendsList_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      TFriendsList_descriptor_,
      TFriendsList::internal_default_instance(),
      TFriendsList_offsets_,
      -1,
      -1,
      -1,
      sizeof(TFriendsList),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TFriendsList, _internal_metadata_));
  TFriends_descriptor_ = file->message_type(20);
  static const int TFriends_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TFriends, friends_),
  };
  TFriends_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      TFriends_descriptor_,
      TFriends::internal_default_instance(),
      TFriends_offsets_,
      -1,
      -1,
      -1,
      sizeof(TFriends),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TFriends, _internal_metadata_));
  Group_descriptor_ = file->message_type(21);
  static const int Group_offsets_[12] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Group, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Group, private__),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Group, creator_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Group, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Group, description_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Group, avatar_url_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Group, lang_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Group, utc_offset_ms_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Group, metadata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Group, count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Group, created_at_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Group, updated_at_),
  };
  Group_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Group_descriptor_,
      Group::internal_default_instance(),
      Group_offsets_,
      -1,
      -1,
      -1,
      sizeof(Group),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Group, _internal_metadata_));
  TGroupCreate_descriptor_ = file->message_type(22);
  static const int TGroupCreate_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGroupCreate, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGroupCreate, description_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGroupCreate, avatar_url_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGroupCreate, lang_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGroupCreate, metadata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGroupCreate, private__),
  };
  TGroupCreate_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      TGroupCreate_descriptor_,
      TGroupCreate::internal_default_instance(),
      TGroupCreate_offsets_,
      -1,
      -1,
      -1,
      sizeof(TGroupCreate),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGroupCreate, _internal_metadata_));
  TGroup_descriptor_ = file->message_type(23);
  static const int TGroup_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGroup, group_),
  };
  TGroup_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      TGroup_descriptor_,
      TGroup::internal_default_instance(),
      TGroup_offsets_,
      -1,
      -1,
      -1,
      sizeof(TGroup),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGroup, _internal_metadata_));
  TGroupUpdate_descriptor_ = file->message_type(24);
  static const int TGroupUpdate_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGroupUpdate, group_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGroupUpdate, private__),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGroupUpdate, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGroupUpdate, description_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGroupUpdate, avatar_url_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGroupUpdate, lang_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGroupUpdate, metadata_),
  };
  TGroupUpdate_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      TGroupUpdate_descriptor_,
      TGroupUpdate::internal_default_instance(),
      TGroupUpdate_offsets_,
      -1,
      -1,
      -1,
      sizeof(TGroupUpdate),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGroupUpdate, _internal_metadata_));
  TGroupRemove_descriptor_ = file->message_type(25);
  static const int TGroupRemove_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGroupRemove, group_id_),
  };
  TGroupRemove_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      TGroupRemove_descriptor_,
      TGroupRemove::internal_default_instance(),
      TGroupRemove_offsets_,
      -1,
      -1,
      -1,
      sizeof(TGroupRemove),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGroupRemove, _internal_metadata_));
  TGroupsSelfList_descriptor_ = file->message_type(26);
  static const int TGroupsSelfList_offsets_[1] = {
  };
  TGroupsSelfList_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      TGroupsSelfList_descriptor_,
      TGroupsSelfList::internal_default_instance(),
      TGroupsSelfList_offsets_,
      -1,
      -1,
      -1,
      sizeof(TGroupsSelfList),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGroupsSelfList, _internal_metadata_));
  TGroupsFetch_descriptor_ = file->message_type(27);
  static const int TGroupsFetch_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGroupsFetch, group_ids_),
  };
  TGroupsFetch_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      TGroupsFetch_descriptor_,
      TGroupsFetch::internal_default_instance(),
      TGroupsFetch_offsets_,
      -1,
      -1,
      -1,
      sizeof(TGroupsFetch),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGroupsFetch, _internal_metadata_));
  TGroupsList_descriptor_ = file->message_type(28);
  static const int TGroupsList_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGroupsList, page_limit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGroupsList, order_by_asc_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(TGroupsList_default_oneof_instance_, lang_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(TGroupsList_default_oneof_instance_, created_at_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(TGroupsList_default_oneof_instance_, count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGroupsList, cursor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGroupsList, filter_),
  };
  TGroupsList_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      TGroupsList_descriptor_,
      TGroupsList::internal_default_instance(),
      TGroupsList_offsets_,
      -1,
      -1,
      -1,
      TGroupsList_default_oneof_instance_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGroupsList, _oneof_case_[0]),
      sizeof(TGroupsList),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGroupsList, _internal_metadata_));
  TGroups_descriptor_ = file->message_type(29);
  static const int TGroups_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGroups, groups_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGroups, cursor_),
  };
  TGroups_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      TGroups_descriptor_,
      TGroups::internal_default_instance(),
      TGroups_offsets_,
      -1,
      -1,
      -1,
      sizeof(TGroups),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGroups, _internal_metadata_));
  GroupUser_descriptor_ = file->message_type(30);
  static const int GroupUser_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupUser, user_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupUser, type_),
  };
  GroupUser_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      GroupUser_descriptor_,
      GroupUser::internal_default_instance(),
      GroupUser_offsets_,
      -1,
      -1,
      -1,
      sizeof(GroupUser),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupUser, _internal_metadata_));
  TGroupUsersList_descriptor_ = file->message_type(31);
  static const int TGroupUsersList_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGroupUsersList, group_id_),
  };
  TGroupUsersList_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      TGroupUsersList_descriptor_,
      TGroupUsersList::internal_default_instance(),
      TGroupUsersList_offsets_,
      -1,
      -1,
      -1,
      sizeof(TGroupUsersList),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGroupUsersList, _internal_metadata_));
  TGroupUsers_descriptor_ = file->message_type(32);
  static const int TGroupUsers_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGroupUsers, users_),
  };
  TGroupUsers_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      TGroupUsers_descriptor_,
      TGroupUsers::internal_default_instance(),
      TGroupUsers_offsets_,
      -1,
      -1,
      -1,
      sizeof(TGroupUsers),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGroupUsers, _internal_metadata_));
  TGroupJoin_descriptor_ = file->message_type(33);
  static const int TGroupJoin_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGroupJoin, group_id_),
  };
  TGroupJoin_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      TGroupJoin_descriptor_,
      TGroupJoin::internal_default_instance(),
      TGroupJoin_offsets_,
      -1,
      -1,
      -1,
      sizeof(TGroupJoin),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGroupJoin, _internal_metadata_));
  TGroupLeave_descriptor_ = file->message_type(34);
  static const int TGroupLeave_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGroupLeave, group_id_),
  };
  TGroupLeave_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      TGroupLeave_descriptor_,
      TGroupLeave::internal_default_instance(),
      TGroupLeave_offsets_,
      -1,
      -1,
      -1,
      sizeof(TGroupLeave),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGroupLeave, _internal_metadata_));
  TGroupUserAdd_descriptor_ = file->message_type(35);
  static const int TGroupUserAdd_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGroupUserAdd, group_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGroupUserAdd, user_id_),
  };
  TGroupUserAdd_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      TGroupUserAdd_descriptor_,
      TGroupUserAdd::internal_default_instance(),
      TGroupUserAdd_offsets_,
      -1,
      -1,
      -1,
      sizeof(TGroupUserAdd),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGroupUserAdd, _internal_metadata_));
  TGroupUserKick_descriptor_ = file->message_type(36);
  static const int TGroupUserKick_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGroupUserKick, group_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGroupUserKick, user_id_),
  };
  TGroupUserKick_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      TGroupUserKick_descriptor_,
      TGroupUserKick::internal_default_instance(),
      TGroupUserKick_offsets_,
      -1,
      -1,
      -1,
      sizeof(TGroupUserKick),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGroupUserKick, _internal_metadata_));
  TGroupUserPromote_descriptor_ = file->message_type(37);
  static const int TGroupUserPromote_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGroupUserPromote, group_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGroupUserPromote, user_id_),
  };
  TGroupUserPromote_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      TGroupUserPromote_descriptor_,
      TGroupUserPromote::internal_default_instance(),
      TGroupUserPromote_offsets_,
      -1,
      -1,
      -1,
      sizeof(TGroupUserPromote),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGroupUserPromote, _internal_metadata_));
  TopicId_descriptor_ = file->message_type(38);
  static const int TopicId_offsets_[4] = {
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(TopicId_default_oneof_instance_, dm_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(TopicId_default_oneof_instance_, room_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(TopicId_default_oneof_instance_, group_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TopicId, id_),
  };
  TopicId_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      TopicId_descriptor_,
      TopicId::internal_default_instance(),
      TopicId_offsets_,
      -1,
      -1,
      -1,
      TopicId_default_oneof_instance_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TopicId, _oneof_case_[0]),
      sizeof(TopicId),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TopicId, _internal_metadata_));
  UserPresence_descriptor_ = file->message_type(39);
  static const int UserPresence_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserPresence, user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserPresence, session_id_),
  };
  UserPresence_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      UserPresence_descriptor_,
      UserPresence::internal_default_instance(),
      UserPresence_offsets_,
      -1,
      -1,
      -1,
      sizeof(UserPresence),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserPresence, _internal_metadata_));
  TTopicJoin_descriptor_ = file->message_type(40);
  static const int TTopicJoin_offsets_[4] = {
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(TTopicJoin_default_oneof_instance_, user_id_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(TTopicJoin_default_oneof_instance_, room_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(TTopicJoin_default_oneof_instance_, group_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TTopicJoin, id_),
  };
  TTopicJoin_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      TTopicJoin_descriptor_,
      TTopicJoin::internal_default_instance(),
      TTopicJoin_offsets_,
      -1,
      -1,
      -1,
      TTopicJoin_default_oneof_instance_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TTopicJoin, _oneof_case_[0]),
      sizeof(TTopicJoin),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TTopicJoin, _internal_metadata_));
  TTopic_descriptor_ = file->message_type(41);
  static const int TTopic_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TTopic, topic_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TTopic, presences_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TTopic, self_),
  };
  TTopic_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      TTopic_descriptor_,
      TTopic::internal_default_instance(),
      TTopic_offsets_,
      -1,
      -1,
      -1,
      sizeof(TTopic),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TTopic, _internal_metadata_));
  TTopicLeave_descriptor_ = file->message_type(42);
  static const int TTopicLeave_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TTopicLeave, topic_),
  };
  TTopicLeave_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      TTopicLeave_descriptor_,
      TTopicLeave::internal_default_instance(),
      TTopicLeave_offsets_,
      -1,
      -1,
      -1,
      sizeof(TTopicLeave),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TTopicLeave, _internal_metadata_));
  TTopicMessageSend_descriptor_ = file->message_type(43);
  static const int TTopicMessageSend_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TTopicMessageSend, topic_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TTopicMessageSend, data_),
  };
  TTopicMessageSend_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      TTopicMessageSend_descriptor_,
      TTopicMessageSend::internal_default_instance(),
      TTopicMessageSend_offsets_,
      -1,
      -1,
      -1,
      sizeof(TTopicMessageSend),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TTopicMessageSend, _internal_metadata_));
  TTopicMessageAck_descriptor_ = file->message_type(44);
  static const int TTopicMessageAck_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TTopicMessageAck, message_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TTopicMessageAck, created_at_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TTopicMessageAck, expires_at_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TTopicMessageAck, handle_),
  };
  TTopicMessageAck_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      TTopicMessageAck_descriptor_,
      TTopicMessageAck::internal_default_instance(),
      TTopicMessageAck_offsets_,
      -1,
      -1,
      -1,
      sizeof(TTopicMessageAck),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TTopicMessageAck, _internal_metadata_));
  TopicMessage_descriptor_ = file->message_type(45);
  static const int TopicMessage_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TopicMessage, topic_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TopicMessage, user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TopicMessage, message_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TopicMessage, created_at_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TopicMessage, expires_at_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TopicMessage, handle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TopicMessage, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TopicMessage, data_),
  };
  TopicMessage_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      TopicMessage_descriptor_,
      TopicMessage::internal_default_instance(),
      TopicMessage_offsets_,
      -1,
      -1,
      -1,
      sizeof(TopicMessage),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TopicMessage, _internal_metadata_));
  TTopicMessagesList_descriptor_ = file->message_type(46);
  static const int TTopicMessagesList_offsets_[7] = {
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(TTopicMessagesList_default_oneof_instance_, user_id_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(TTopicMessagesList_default_oneof_instance_, room_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(TTopicMessagesList_default_oneof_instance_, group_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TTopicMessagesList, cursor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TTopicMessagesList, forward_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TTopicMessagesList, limit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TTopicMessagesList, id_),
  };
  TTopicMessagesList_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      TTopicMessagesList_descriptor_,
      TTopicMessagesList::internal_default_instance(),
      TTopicMessagesList_offsets_,
      -1,
      -1,
      -1,
      TTopicMessagesList_default_oneof_instance_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TTopicMessagesList, _oneof_case_[0]),
      sizeof(TTopicMessagesList),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TTopicMessagesList, _internal_metadata_));
  TTopicMessages_descriptor_ = file->message_type(47);
  static const int TTopicMessages_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TTopicMessages, messages_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TTopicMessages, cursor_),
  };
  TTopicMessages_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      TTopicMessages_descriptor_,
      TTopicMessages::internal_default_instance(),
      TTopicMessages_offsets_,
      -1,
      -1,
      -1,
      sizeof(TTopicMessages),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TTopicMessages, _internal_metadata_));
  TopicPresence_descriptor_ = file->message_type(48);
  static const int TopicPresence_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TopicPresence, topic_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TopicPresence, joins_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TopicPresence, leaves_),
  };
  TopicPresence_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      TopicPresence_descriptor_,
      TopicPresence::internal_default_instance(),
      TopicPresence_offsets_,
      -1,
      -1,
      -1,
      sizeof(TopicPresence),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TopicPresence, _internal_metadata_));
  TMatchCreate_descriptor_ = file->message_type(49);
  static const int TMatchCreate_offsets_[1] = {
  };
  TMatchCreate_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      TMatchCreate_descriptor_,
      TMatchCreate::internal_default_instance(),
      TMatchCreate_offsets_,
      -1,
      -1,
      -1,
      sizeof(TMatchCreate),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TMatchCreate, _internal_metadata_));
  TMatchJoin_descriptor_ = file->message_type(50);
  static const int TMatchJoin_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TMatchJoin, match_id_),
  };
  TMatchJoin_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      TMatchJoin_descriptor_,
      TMatchJoin::internal_default_instance(),
      TMatchJoin_offsets_,
      -1,
      -1,
      -1,
      sizeof(TMatchJoin),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TMatchJoin, _internal_metadata_));
  TMatch_descriptor_ = file->message_type(51);
  static const int TMatch_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TMatch, match_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TMatch, presences_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TMatch, self_),
  };
  TMatch_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      TMatch_descriptor_,
      TMatch::internal_default_instance(),
      TMatch_offsets_,
      -1,
      -1,
      -1,
      sizeof(TMatch),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TMatch, _internal_metadata_));
  TMatchDataSend_descriptor_ = file->message_type(52);
  static const int TMatchDataSend_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TMatchDataSend, match_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TMatchDataSend, op_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TMatchDataSend, data_),
  };
  TMatchDataSend_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      TMatchDataSend_descriptor_,
      TMatchDataSend::internal_default_instance(),
      TMatchDataSend_offsets_,
      -1,
      -1,
      -1,
      sizeof(TMatchDataSend),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TMatchDataSend, _internal_metadata_));
  MatchData_descriptor_ = file->message_type(53);
  static const int MatchData_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MatchData, match_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MatchData, presence_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MatchData, op_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MatchData, data_),
  };
  MatchData_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      MatchData_descriptor_,
      MatchData::internal_default_instance(),
      MatchData_offsets_,
      -1,
      -1,
      -1,
      sizeof(MatchData),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MatchData, _internal_metadata_));
  TMatchLeave_descriptor_ = file->message_type(54);
  static const int TMatchLeave_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TMatchLeave, match_id_),
  };
  TMatchLeave_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      TMatchLeave_descriptor_,
      TMatchLeave::internal_default_instance(),
      TMatchLeave_offsets_,
      -1,
      -1,
      -1,
      sizeof(TMatchLeave),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TMatchLeave, _internal_metadata_));
  MatchPresence_descriptor_ = file->message_type(55);
  static const int MatchPresence_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MatchPresence, match_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MatchPresence, joins_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MatchPresence, leaves_),
  };
  MatchPresence_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      MatchPresence_descriptor_,
      MatchPresence::internal_default_instance(),
      MatchPresence_offsets_,
      -1,
      -1,
      -1,
      sizeof(MatchPresence),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MatchPresence, _internal_metadata_));
  TStorageFetch_descriptor_ = file->message_type(56);
  static const int TStorageFetch_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TStorageFetch, keys_),
  };
  TStorageFetch_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      TStorageFetch_descriptor_,
      TStorageFetch::internal_default_instance(),
      TStorageFetch_offsets_,
      -1,
      -1,
      -1,
      sizeof(TStorageFetch),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TStorageFetch, _internal_metadata_));
  TStorageFetch_StorageKey_descriptor_ = TStorageFetch_descriptor_->nested_type(0);
  static const int TStorageFetch_StorageKey_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TStorageFetch_StorageKey, bucket_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TStorageFetch_StorageKey, collection_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TStorageFetch_StorageKey, record_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TStorageFetch_StorageKey, user_id_),
  };
  TStorageFetch_StorageKey_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      TStorageFetch_StorageKey_descriptor_,
      TStorageFetch_StorageKey::internal_default_instance(),
      TStorageFetch_StorageKey_offsets_,
      -1,
      -1,
      -1,
      sizeof(TStorageFetch_StorageKey),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TStorageFetch_StorageKey, _internal_metadata_));
  TStorageData_descriptor_ = file->message_type(57);
  static const int TStorageData_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TStorageData, data_),
  };
  TStorageData_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      TStorageData_descriptor_,
      TStorageData::internal_default_instance(),
      TStorageData_offsets_,
      -1,
      -1,
      -1,
      sizeof(TStorageData),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TStorageData, _internal_metadata_));
  TStorageData_StorageData_descriptor_ = TStorageData_descriptor_->nested_type(0);
  static const int TStorageData_StorageData_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TStorageData_StorageData, bucket_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TStorageData_StorageData, collection_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TStorageData_StorageData, record_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TStorageData_StorageData, user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TStorageData_StorageData, value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TStorageData_StorageData, version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TStorageData_StorageData, permission_read_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TStorageData_StorageData, permission_write_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TStorageData_StorageData, created_at_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TStorageData_StorageData, updated_at_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TStorageData_StorageData, expires_at_),
  };
  TStorageData_StorageData_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      TStorageData_StorageData_descriptor_,
      TStorageData_StorageData::internal_default_instance(),
      TStorageData_StorageData_offsets_,
      -1,
      -1,
      -1,
      sizeof(TStorageData_StorageData),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TStorageData_StorageData, _internal_metadata_));
  TStorageWrite_descriptor_ = file->message_type(58);
  static const int TStorageWrite_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TStorageWrite, data_),
  };
  TStorageWrite_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      TStorageWrite_descriptor_,
      TStorageWrite::internal_default_instance(),
      TStorageWrite_offsets_,
      -1,
      -1,
      -1,
      sizeof(TStorageWrite),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TStorageWrite, _internal_metadata_));
  TStorageWrite_StorageData_descriptor_ = TStorageWrite_descriptor_->nested_type(0);
  static const int TStorageWrite_StorageData_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TStorageWrite_StorageData, bucket_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TStorageWrite_StorageData, collection_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TStorageWrite_StorageData, record_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TStorageWrite_StorageData, value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TStorageWrite_StorageData, version_),
  };
  TStorageWrite_StorageData_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      TStorageWrite_StorageData_descriptor_,
      TStorageWrite_StorageData::internal_default_instance(),
      TStorageWrite_StorageData_offsets_,
      -1,
      -1,
      -1,
      sizeof(TStorageWrite_StorageData),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TStorageWrite_StorageData, _internal_metadata_));
  TStorageKey_descriptor_ = file->message_type(59);
  static const int TStorageKey_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TStorageKey, keys_),
  };
  TStorageKey_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      TStorageKey_descriptor_,
      TStorageKey::internal_default_instance(),
      TStorageKey_offsets_,
      -1,
      -1,
      -1,
      sizeof(TStorageKey),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TStorageKey, _internal_metadata_));
  TStorageKey_StorageKey_descriptor_ = TStorageKey_descriptor_->nested_type(0);
  static const int TStorageKey_StorageKey_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TStorageKey_StorageKey, bucket_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TStorageKey_StorageKey, collection_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TStorageKey_StorageKey, record_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TStorageKey_StorageKey, version_),
  };
  TStorageKey_StorageKey_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      TStorageKey_StorageKey_descriptor_,
      TStorageKey_StorageKey::internal_default_instance(),
      TStorageKey_StorageKey_offsets_,
      -1,
      -1,
      -1,
      sizeof(TStorageKey_StorageKey),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TStorageKey_StorageKey, _internal_metadata_));
  TStorageRemove_descriptor_ = file->message_type(60);
  static const int TStorageRemove_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TStorageRemove, keys_),
  };
  TStorageRemove_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      TStorageRemove_descriptor_,
      TStorageRemove::internal_default_instance(),
      TStorageRemove_offsets_,
      -1,
      -1,
      -1,
      sizeof(TStorageRemove),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TStorageRemove, _internal_metadata_));
  TStorageRemove_StorageKey_descriptor_ = TStorageRemove_descriptor_->nested_type(0);
  static const int TStorageRemove_StorageKey_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TStorageRemove_StorageKey, bucket_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TStorageRemove_StorageKey, collection_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TStorageRemove_StorageKey, record_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TStorageRemove_StorageKey, version_),
  };
  TStorageRemove_StorageKey_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      TStorageRemove_StorageKey_descriptor_,
      TStorageRemove_StorageKey::internal_default_instance(),
      TStorageRemove_StorageKey_offsets_,
      -1,
      -1,
      -1,
      sizeof(TStorageRemove_StorageKey),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TStorageRemove_StorageKey, _internal_metadata_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_api_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Heartbeat_descriptor_, Heartbeat::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Error_descriptor_, Error::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      AuthenticateRequest_descriptor_, AuthenticateRequest::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      AuthenticateRequest_Email_descriptor_, AuthenticateRequest_Email::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      AuthenticateRequest_GameCenter_descriptor_, AuthenticateRequest_GameCenter::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      AuthenticateResponse_descriptor_, AuthenticateResponse::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      AuthenticateResponse_Session_descriptor_, AuthenticateResponse_Session::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      AuthenticateResponse_Error_descriptor_, AuthenticateResponse_Error::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Envelope_descriptor_, Envelope::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Logout_descriptor_, Logout::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      TLink_descriptor_, TLink::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      TUnlink_descriptor_, TUnlink::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      User_descriptor_, User::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Self_descriptor_, Self::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      TSelfFetch_descriptor_, TSelfFetch::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      TSelf_descriptor_, TSelf::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      TSelfUpdate_descriptor_, TSelfUpdate::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      TUsersFetch_descriptor_, TUsersFetch::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      TUsers_descriptor_, TUsers::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Friend_descriptor_, Friend::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      TFriendAdd_descriptor_, TFriendAdd::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      TFriendRemove_descriptor_, TFriendRemove::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      TFriendBlock_descriptor_, TFriendBlock::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      TFriendsList_descriptor_, TFriendsList::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      TFriends_descriptor_, TFriends::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Group_descriptor_, Group::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      TGroupCreate_descriptor_, TGroupCreate::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      TGroup_descriptor_, TGroup::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      TGroupUpdate_descriptor_, TGroupUpdate::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      TGroupRemove_descriptor_, TGroupRemove::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      TGroupsSelfList_descriptor_, TGroupsSelfList::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      TGroupsFetch_descriptor_, TGroupsFetch::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      TGroupsList_descriptor_, TGroupsList::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      TGroups_descriptor_, TGroups::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      GroupUser_descriptor_, GroupUser::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      TGroupUsersList_descriptor_, TGroupUsersList::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      TGroupUsers_descriptor_, TGroupUsers::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      TGroupJoin_descriptor_, TGroupJoin::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      TGroupLeave_descriptor_, TGroupLeave::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      TGroupUserAdd_descriptor_, TGroupUserAdd::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      TGroupUserKick_descriptor_, TGroupUserKick::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      TGroupUserPromote_descriptor_, TGroupUserPromote::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      TopicId_descriptor_, TopicId::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      UserPresence_descriptor_, UserPresence::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      TTopicJoin_descriptor_, TTopicJoin::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      TTopic_descriptor_, TTopic::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      TTopicLeave_descriptor_, TTopicLeave::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      TTopicMessageSend_descriptor_, TTopicMessageSend::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      TTopicMessageAck_descriptor_, TTopicMessageAck::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      TopicMessage_descriptor_, TopicMessage::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      TTopicMessagesList_descriptor_, TTopicMessagesList::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      TTopicMessages_descriptor_, TTopicMessages::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      TopicPresence_descriptor_, TopicPresence::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      TMatchCreate_descriptor_, TMatchCreate::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      TMatchJoin_descriptor_, TMatchJoin::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      TMatch_descriptor_, TMatch::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      TMatchDataSend_descriptor_, TMatchDataSend::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      MatchData_descriptor_, MatchData::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      TMatchLeave_descriptor_, TMatchLeave::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      MatchPresence_descriptor_, MatchPresence::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      TStorageFetch_descriptor_, TStorageFetch::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      TStorageFetch_StorageKey_descriptor_, TStorageFetch_StorageKey::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      TStorageData_descriptor_, TStorageData::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      TStorageData_StorageData_descriptor_, TStorageData_StorageData::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      TStorageWrite_descriptor_, TStorageWrite::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      TStorageWrite_StorageData_descriptor_, TStorageWrite_StorageData::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      TStorageKey_descriptor_, TStorageKey::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      TStorageKey_StorageKey_descriptor_, TStorageKey_StorageKey::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      TStorageRemove_descriptor_, TStorageRemove::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      TStorageRemove_StorageKey_descriptor_, TStorageRemove_StorageKey::internal_default_instance());
}

}  // namespace

void protobuf_ShutdownFile_api_2eproto() {
  Heartbeat_default_instance_.Shutdown();
  delete Heartbeat_reflection_;
  Error_default_instance_.Shutdown();
  delete Error_reflection_;
  AuthenticateRequest_default_instance_.Shutdown();
  delete AuthenticateRequest_default_oneof_instance_;
  delete AuthenticateRequest_reflection_;
  AuthenticateRequest_Email_default_instance_.Shutdown();
  delete AuthenticateRequest_Email_reflection_;
  AuthenticateRequest_GameCenter_default_instance_.Shutdown();
  delete AuthenticateRequest_GameCenter_reflection_;
  AuthenticateResponse_default_instance_.Shutdown();
  delete AuthenticateResponse_default_oneof_instance_;
  delete AuthenticateResponse_reflection_;
  AuthenticateResponse_Session_default_instance_.Shutdown();
  delete AuthenticateResponse_Session_reflection_;
  AuthenticateResponse_Error_default_instance_.Shutdown();
  delete AuthenticateResponse_Error_reflection_;
  Envelope_default_instance_.Shutdown();
  delete Envelope_default_oneof_instance_;
  delete Envelope_reflection_;
  Logout_default_instance_.Shutdown();
  delete Logout_reflection_;
  TLink_default_instance_.Shutdown();
  delete TLink_default_oneof_instance_;
  delete TLink_reflection_;
  TUnlink_default_instance_.Shutdown();
  delete TUnlink_default_oneof_instance_;
  delete TUnlink_reflection_;
  User_default_instance_.Shutdown();
  delete User_reflection_;
  Self_default_instance_.Shutdown();
  delete Self_reflection_;
  TSelfFetch_default_instance_.Shutdown();
  delete TSelfFetch_reflection_;
  TSelf_default_instance_.Shutdown();
  delete TSelf_reflection_;
  TSelfUpdate_default_instance_.Shutdown();
  delete TSelfUpdate_reflection_;
  TUsersFetch_default_instance_.Shutdown();
  delete TUsersFetch_reflection_;
  TUsers_default_instance_.Shutdown();
  delete TUsers_reflection_;
  Friend_default_instance_.Shutdown();
  delete Friend_reflection_;
  TFriendAdd_default_instance_.Shutdown();
  delete TFriendAdd_reflection_;
  TFriendRemove_default_instance_.Shutdown();
  delete TFriendRemove_reflection_;
  TFriendBlock_default_instance_.Shutdown();
  delete TFriendBlock_reflection_;
  TFriendsList_default_instance_.Shutdown();
  delete TFriendsList_reflection_;
  TFriends_default_instance_.Shutdown();
  delete TFriends_reflection_;
  Group_default_instance_.Shutdown();
  delete Group_reflection_;
  TGroupCreate_default_instance_.Shutdown();
  delete TGroupCreate_reflection_;
  TGroup_default_instance_.Shutdown();
  delete TGroup_reflection_;
  TGroupUpdate_default_instance_.Shutdown();
  delete TGroupUpdate_reflection_;
  TGroupRemove_default_instance_.Shutdown();
  delete TGroupRemove_reflection_;
  TGroupsSelfList_default_instance_.Shutdown();
  delete TGroupsSelfList_reflection_;
  TGroupsFetch_default_instance_.Shutdown();
  delete TGroupsFetch_reflection_;
  TGroupsList_default_instance_.Shutdown();
  delete TGroupsList_default_oneof_instance_;
  delete TGroupsList_reflection_;
  TGroups_default_instance_.Shutdown();
  delete TGroups_reflection_;
  GroupUser_default_instance_.Shutdown();
  delete GroupUser_reflection_;
  TGroupUsersList_default_instance_.Shutdown();
  delete TGroupUsersList_reflection_;
  TGroupUsers_default_instance_.Shutdown();
  delete TGroupUsers_reflection_;
  TGroupJoin_default_instance_.Shutdown();
  delete TGroupJoin_reflection_;
  TGroupLeave_default_instance_.Shutdown();
  delete TGroupLeave_reflection_;
  TGroupUserAdd_default_instance_.Shutdown();
  delete TGroupUserAdd_reflection_;
  TGroupUserKick_default_instance_.Shutdown();
  delete TGroupUserKick_reflection_;
  TGroupUserPromote_default_instance_.Shutdown();
  delete TGroupUserPromote_reflection_;
  TopicId_default_instance_.Shutdown();
  delete TopicId_default_oneof_instance_;
  delete TopicId_reflection_;
  UserPresence_default_instance_.Shutdown();
  delete UserPresence_reflection_;
  TTopicJoin_default_instance_.Shutdown();
  delete TTopicJoin_default_oneof_instance_;
  delete TTopicJoin_reflection_;
  TTopic_default_instance_.Shutdown();
  delete TTopic_reflection_;
  TTopicLeave_default_instance_.Shutdown();
  delete TTopicLeave_reflection_;
  TTopicMessageSend_default_instance_.Shutdown();
  delete TTopicMessageSend_reflection_;
  TTopicMessageAck_default_instance_.Shutdown();
  delete TTopicMessageAck_reflection_;
  TopicMessage_default_instance_.Shutdown();
  delete TopicMessage_reflection_;
  TTopicMessagesList_default_instance_.Shutdown();
  delete TTopicMessagesList_default_oneof_instance_;
  delete TTopicMessagesList_reflection_;
  TTopicMessages_default_instance_.Shutdown();
  delete TTopicMessages_reflection_;
  TopicPresence_default_instance_.Shutdown();
  delete TopicPresence_reflection_;
  TMatchCreate_default_instance_.Shutdown();
  delete TMatchCreate_reflection_;
  TMatchJoin_default_instance_.Shutdown();
  delete TMatchJoin_reflection_;
  TMatch_default_instance_.Shutdown();
  delete TMatch_reflection_;
  TMatchDataSend_default_instance_.Shutdown();
  delete TMatchDataSend_reflection_;
  MatchData_default_instance_.Shutdown();
  delete MatchData_reflection_;
  TMatchLeave_default_instance_.Shutdown();
  delete TMatchLeave_reflection_;
  MatchPresence_default_instance_.Shutdown();
  delete MatchPresence_reflection_;
  TStorageFetch_default_instance_.Shutdown();
  delete TStorageFetch_reflection_;
  TStorageFetch_StorageKey_default_instance_.Shutdown();
  delete TStorageFetch_StorageKey_reflection_;
  TStorageData_default_instance_.Shutdown();
  delete TStorageData_reflection_;
  TStorageData_StorageData_default_instance_.Shutdown();
  delete TStorageData_StorageData_reflection_;
  TStorageWrite_default_instance_.Shutdown();
  delete TStorageWrite_reflection_;
  TStorageWrite_StorageData_default_instance_.Shutdown();
  delete TStorageWrite_StorageData_reflection_;
  TStorageKey_default_instance_.Shutdown();
  delete TStorageKey_reflection_;
  TStorageKey_StorageKey_default_instance_.Shutdown();
  delete TStorageKey_StorageKey_reflection_;
  TStorageRemove_default_instance_.Shutdown();
  delete TStorageRemove_reflection_;
  TStorageRemove_StorageKey_default_instance_.Shutdown();
  delete TStorageRemove_StorageKey_reflection_;
}

void protobuf_InitDefaults_api_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  Heartbeat_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  Error_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  AuthenticateRequest_default_instance_.DefaultConstruct();
  AuthenticateRequest_default_oneof_instance_ = new AuthenticateRequestOneofInstance();
  ::google::protobuf::internal::GetEmptyString();
  AuthenticateRequest_Email_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  AuthenticateRequest_GameCenter_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  AuthenticateResponse_default_instance_.DefaultConstruct();
  AuthenticateResponse_default_oneof_instance_ = new AuthenticateResponseOneofInstance();
  ::google::protobuf::internal::GetEmptyString();
  AuthenticateResponse_Session_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  AuthenticateResponse_Error_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  Envelope_default_instance_.DefaultConstruct();
  Envelope_default_oneof_instance_ = new EnvelopeOneofInstance();
  Logout_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  TLink_default_instance_.DefaultConstruct();
  TLink_default_oneof_instance_ = new TLinkOneofInstance();
  ::google::protobuf::internal::GetEmptyString();
  TUnlink_default_instance_.DefaultConstruct();
  TUnlink_default_oneof_instance_ = new TUnlinkOneofInstance();
  ::google::protobuf::internal::GetEmptyString();
  User_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  Self_default_instance_.DefaultConstruct();
  TSelfFetch_default_instance_.DefaultConstruct();
  TSelf_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  TSelfUpdate_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  TUsersFetch_default_instance_.DefaultConstruct();
  TUsers_default_instance_.DefaultConstruct();
  Friend_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  TFriendAdd_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  TFriendRemove_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  TFriendBlock_default_instance_.DefaultConstruct();
  TFriendsList_default_instance_.DefaultConstruct();
  TFriends_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  Group_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  TGroupCreate_default_instance_.DefaultConstruct();
  TGroup_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  TGroupUpdate_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  TGroupRemove_default_instance_.DefaultConstruct();
  TGroupsSelfList_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  TGroupsFetch_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  TGroupsList_default_instance_.DefaultConstruct();
  TGroupsList_default_oneof_instance_ = new TGroupsListOneofInstance();
  ::google::protobuf::internal::GetEmptyString();
  TGroups_default_instance_.DefaultConstruct();
  GroupUser_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  TGroupUsersList_default_instance_.DefaultConstruct();
  TGroupUsers_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  TGroupJoin_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  TGroupLeave_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  TGroupUserAdd_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  TGroupUserKick_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  TGroupUserPromote_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  TopicId_default_instance_.DefaultConstruct();
  TopicId_default_oneof_instance_ = new TopicIdOneofInstance();
  ::google::protobuf::internal::GetEmptyString();
  UserPresence_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  TTopicJoin_default_instance_.DefaultConstruct();
  TTopicJoin_default_oneof_instance_ = new TTopicJoinOneofInstance();
  TTopic_default_instance_.DefaultConstruct();
  TTopicLeave_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  TTopicMessageSend_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  TTopicMessageAck_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  TopicMessage_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  TTopicMessagesList_default_instance_.DefaultConstruct();
  TTopicMessagesList_default_oneof_instance_ = new TTopicMessagesListOneofInstance();
  ::google::protobuf::internal::GetEmptyString();
  TTopicMessages_default_instance_.DefaultConstruct();
  TopicPresence_default_instance_.DefaultConstruct();
  TMatchCreate_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  TMatchJoin_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  TMatch_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  TMatchDataSend_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  MatchData_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  TMatchLeave_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  MatchPresence_default_instance_.DefaultConstruct();
  TStorageFetch_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  TStorageFetch_StorageKey_default_instance_.DefaultConstruct();
  TStorageData_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  TStorageData_StorageData_default_instance_.DefaultConstruct();
  TStorageWrite_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  TStorageWrite_StorageData_default_instance_.DefaultConstruct();
  TStorageKey_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  TStorageKey_StorageKey_default_instance_.DefaultConstruct();
  TStorageRemove_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  TStorageRemove_StorageKey_default_instance_.DefaultConstruct();
  Heartbeat_default_instance_.get_mutable()->InitAsDefaultInstance();
  Error_default_instance_.get_mutable()->InitAsDefaultInstance();
  AuthenticateRequest_default_instance_.get_mutable()->InitAsDefaultInstance();
  AuthenticateRequest_Email_default_instance_.get_mutable()->InitAsDefaultInstance();
  AuthenticateRequest_GameCenter_default_instance_.get_mutable()->InitAsDefaultInstance();
  AuthenticateResponse_default_instance_.get_mutable()->InitAsDefaultInstance();
  AuthenticateResponse_Session_default_instance_.get_mutable()->InitAsDefaultInstance();
  AuthenticateResponse_Error_default_instance_.get_mutable()->InitAsDefaultInstance();
  Envelope_default_instance_.get_mutable()->InitAsDefaultInstance();
  Logout_default_instance_.get_mutable()->InitAsDefaultInstance();
  TLink_default_instance_.get_mutable()->InitAsDefaultInstance();
  TUnlink_default_instance_.get_mutable()->InitAsDefaultInstance();
  User_default_instance_.get_mutable()->InitAsDefaultInstance();
  Self_default_instance_.get_mutable()->InitAsDefaultInstance();
  TSelfFetch_default_instance_.get_mutable()->InitAsDefaultInstance();
  TSelf_default_instance_.get_mutable()->InitAsDefaultInstance();
  TSelfUpdate_default_instance_.get_mutable()->InitAsDefaultInstance();
  TUsersFetch_default_instance_.get_mutable()->InitAsDefaultInstance();
  TUsers_default_instance_.get_mutable()->InitAsDefaultInstance();
  Friend_default_instance_.get_mutable()->InitAsDefaultInstance();
  TFriendAdd_default_instance_.get_mutable()->InitAsDefaultInstance();
  TFriendRemove_default_instance_.get_mutable()->InitAsDefaultInstance();
  TFriendBlock_default_instance_.get_mutable()->InitAsDefaultInstance();
  TFriendsList_default_instance_.get_mutable()->InitAsDefaultInstance();
  TFriends_default_instance_.get_mutable()->InitAsDefaultInstance();
  Group_default_instance_.get_mutable()->InitAsDefaultInstance();
  TGroupCreate_default_instance_.get_mutable()->InitAsDefaultInstance();
  TGroup_default_instance_.get_mutable()->InitAsDefaultInstance();
  TGroupUpdate_default_instance_.get_mutable()->InitAsDefaultInstance();
  TGroupRemove_default_instance_.get_mutable()->InitAsDefaultInstance();
  TGroupsSelfList_default_instance_.get_mutable()->InitAsDefaultInstance();
  TGroupsFetch_default_instance_.get_mutable()->InitAsDefaultInstance();
  TGroupsList_default_instance_.get_mutable()->InitAsDefaultInstance();
  TGroups_default_instance_.get_mutable()->InitAsDefaultInstance();
  GroupUser_default_instance_.get_mutable()->InitAsDefaultInstance();
  TGroupUsersList_default_instance_.get_mutable()->InitAsDefaultInstance();
  TGroupUsers_default_instance_.get_mutable()->InitAsDefaultInstance();
  TGroupJoin_default_instance_.get_mutable()->InitAsDefaultInstance();
  TGroupLeave_default_instance_.get_mutable()->InitAsDefaultInstance();
  TGroupUserAdd_default_instance_.get_mutable()->InitAsDefaultInstance();
  TGroupUserKick_default_instance_.get_mutable()->InitAsDefaultInstance();
  TGroupUserPromote_default_instance_.get_mutable()->InitAsDefaultInstance();
  TopicId_default_instance_.get_mutable()->InitAsDefaultInstance();
  UserPresence_default_instance_.get_mutable()->InitAsDefaultInstance();
  TTopicJoin_default_instance_.get_mutable()->InitAsDefaultInstance();
  TTopic_default_instance_.get_mutable()->InitAsDefaultInstance();
  TTopicLeave_default_instance_.get_mutable()->InitAsDefaultInstance();
  TTopicMessageSend_default_instance_.get_mutable()->InitAsDefaultInstance();
  TTopicMessageAck_default_instance_.get_mutable()->InitAsDefaultInstance();
  TopicMessage_default_instance_.get_mutable()->InitAsDefaultInstance();
  TTopicMessagesList_default_instance_.get_mutable()->InitAsDefaultInstance();
  TTopicMessages_default_instance_.get_mutable()->InitAsDefaultInstance();
  TopicPresence_default_instance_.get_mutable()->InitAsDefaultInstance();
  TMatchCreate_default_instance_.get_mutable()->InitAsDefaultInstance();
  TMatchJoin_default_instance_.get_mutable()->InitAsDefaultInstance();
  TMatch_default_instance_.get_mutable()->InitAsDefaultInstance();
  TMatchDataSend_default_instance_.get_mutable()->InitAsDefaultInstance();
  MatchData_default_instance_.get_mutable()->InitAsDefaultInstance();
  TMatchLeave_default_instance_.get_mutable()->InitAsDefaultInstance();
  MatchPresence_default_instance_.get_mutable()->InitAsDefaultInstance();
  TStorageFetch_default_instance_.get_mutable()->InitAsDefaultInstance();
  TStorageFetch_StorageKey_default_instance_.get_mutable()->InitAsDefaultInstance();
  TStorageData_default_instance_.get_mutable()->InitAsDefaultInstance();
  TStorageData_StorageData_default_instance_.get_mutable()->InitAsDefaultInstance();
  TStorageWrite_default_instance_.get_mutable()->InitAsDefaultInstance();
  TStorageWrite_StorageData_default_instance_.get_mutable()->InitAsDefaultInstance();
  TStorageKey_default_instance_.get_mutable()->InitAsDefaultInstance();
  TStorageKey_StorageKey_default_instance_.get_mutable()->InitAsDefaultInstance();
  TStorageRemove_default_instance_.get_mutable()->InitAsDefaultInstance();
  TStorageRemove_StorageKey_default_instance_.get_mutable()->InitAsDefaultInstance();
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_InitDefaults_api_2eproto_once_);
void protobuf_InitDefaults_api_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_InitDefaults_api_2eproto_once_,
                 &protobuf_InitDefaults_api_2eproto_impl);
}
void protobuf_AddDesc_api_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  protobuf_InitDefaults_api_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\tapi.proto\022\006server\"\036\n\tHeartbeat\022\021\n\ttime"
    "stamp\030\001 \001(\003\"\027\n\005Error\022\016\n\006reason\030\001 \001(\t\"\255\003\n"
    "\023AuthenticateRequest\022\023\n\013collationId\030\001 \001("
    "\t\0222\n\005email\030\002 \001(\0132!.server.AuthenticateRe"
    "quest.EmailH\000\022\022\n\010facebook\030\003 \001(\tH\000\022\020\n\006goo"
    "gle\030\004 \001(\tH\000\022=\n\013game_center\030\005 \001(\0132&.serve"
    "r.AuthenticateRequest.GameCenterH\000\022\017\n\005st"
    "eam\030\006 \001(\tH\000\022\020\n\006device\030\007 \001(\tH\000\022\020\n\006custom\030"
    "\010 \001(\tH\000\032(\n\005Email\022\r\n\005email\030\001 \001(\t\022\020\n\010passw"
    "ord\030\002 \001(\t\032~\n\nGameCenter\022\021\n\tplayer_id\030\001 \001"
    "(\t\022\021\n\tbundle_id\030\002 \001(\t\022\021\n\ttimestamp\030\003 \001(\003"
    "\022\014\n\004salt\030\004 \001(\t\022\021\n\tsignature\030\005 \001(\t\022\026\n\016pub"
    "lic_key_url\030\006 \001(\tB\t\n\007payload\"\206\002\n\024Authent"
    "icateResponse\022\024\n\014collation_id\030\001 \001(\t\0227\n\007s"
    "ession\030\002 \001(\0132$.server.AuthenticateRespon"
    "se.SessionH\000\0223\n\005error\030\003 \001(\0132\".server.Aut"
    "henticateResponse.ErrorH\000\032\030\n\007Session\022\r\n\005"
    "token\030\001 \001(\t\032E\n\005Error\022\016\n\006reason\030\001 \001(\t\022,\n\007"
    "request\030\002 \001(\0132\033.server.AuthenticateReque"
    "stB\t\n\007payload\"\367\021\n\010Envelope\022\024\n\014collation_"
    "id\030\001 \001(\t\022\036\n\005error\030\002 \001(\0132\r.server.ErrorH\000"
    "\022&\n\theartbeat\030\003 \001(\0132\021.server.HeartbeatH\000"
    "\022 \n\006logout\030\004 \001(\0132\016.server.LogoutH\000\022\035\n\004li"
    "nk\030\005 \001(\0132\r.server.TLinkH\000\022!\n\006unlink\030\006 \001("
    "\0132\017.server.TUnlinkH\000\022(\n\nself_fetch\030\007 \001(\013"
    "2\022.server.TSelfFetchH\000\022*\n\013self_update\030\010 "
    "\001(\0132\023.server.TSelfUpdateH\000\022*\n\013users_fetc"
    "h\030\t \001(\0132\023.server.TUsersFetchH\000\022\035\n\004self\030\n"
    " \001(\0132\r.server.TSelfH\000\022\037\n\005users\030\013 \001(\0132\016.s"
    "erver.TUsersH\000\022(\n\nfriend_add\030\014 \001(\0132\022.ser"
    "ver.TFriendAddH\000\022.\n\rfriend_remove\030\r \001(\0132"
    "\025.server.TFriendRemoveH\000\022,\n\014friend_block"
    "\030\016 \001(\0132\024.server.TFriendBlockH\000\022,\n\014friend"
    "s_list\030\017 \001(\0132\024.server.TFriendsListH\000\022#\n\007"
    "friends\030\020 \001(\0132\020.server.TFriendsH\000\022,\n\014gro"
    "up_create\030\021 \001(\0132\024.server.TGroupCreateH\000\022"
    ",\n\014group_update\030\022 \001(\0132\024.server.TGroupUpd"
    "ateH\000\022,\n\014group_remove\030\023 \001(\0132\024.server.TGr"
    "oupRemoveH\000\022,\n\014groups_fetch\030\024 \001(\0132\024.serv"
    "er.TGroupsFetchH\000\022*\n\013groups_list\030\025 \001(\0132\023"
    ".server.TGroupsListH\000\0223\n\020groups_self_lis"
    "t\030\026 \001(\0132\027.server.TGroupsSelfListH\000\0223\n\020gr"
    "oup_users_list\030\027 \001(\0132\027.server.TGroupUser"
    "sListH\000\022(\n\ngroup_join\030\030 \001(\0132\022.server.TGr"
    "oupJoinH\000\022*\n\013group_leave\030\031 \001(\0132\023.server."
    "TGroupLeaveH\000\022/\n\016group_user_add\030\032 \001(\0132\025."
    "server.TGroupUserAddH\000\0221\n\017group_user_kic"
    "k\030\033 \001(\0132\026.server.TGroupUserKickH\000\0227\n\022gro"
    "up_user_promote\030\034 \001(\0132\031.server.TGroupUse"
    "rPromoteH\000\022\037\n\005group\030\035 \001(\0132\016.server.TGrou"
    "pH\000\022!\n\006groups\030\036 \001(\0132\017.server.TGroupsH\000\022*"
    "\n\013group_users\030\037 \001(\0132\023.server.TGroupUsers"
    "H\000\022(\n\ntopic_join\030  \001(\0132\022.server.TTopicJo"
    "inH\000\022*\n\013topic_leave\030! \001(\0132\023.server.TTopi"
    "cLeaveH\000\0227\n\022topic_message_send\030\" \001(\0132\031.s"
    "erver.TTopicMessageSendH\000\0229\n\023topic_messa"
    "ges_list\030# \001(\0132\032.server.TTopicMessagesLi"
    "stH\000\022\037\n\005topic\030$ \001(\0132\016.server.TTopicH\000\0225\n"
    "\021topic_message_ack\030% \001(\0132\030.server.TTopic"
    "MessageAckH\000\022-\n\rtopic_message\030& \001(\0132\024.se"
    "rver.TopicMessageH\000\0220\n\016topic_messages\030\' "
    "\001(\0132\026.server.TTopicMessagesH\000\022/\n\016topic_p"
    "resence\030( \001(\0132\025.server.TopicPresenceH\000\022,"
    "\n\014match_create\030) \001(\0132\024.server.TMatchCrea"
    "teH\000\022(\n\nmatch_join\030* \001(\0132\022.server.TMatch"
    "JoinH\000\022*\n\013match_leave\030+ \001(\0132\023.server.TMa"
    "tchLeaveH\000\0221\n\017match_data_send\030, \001(\0132\026.se"
    "rver.TMatchDataSendH\000\022\037\n\005match\030- \001(\0132\016.s"
    "erver.TMatchH\000\022\'\n\nmatch_data\030. \001(\0132\021.ser"
    "ver.MatchDataH\000\022/\n\016match_presence\030/ \001(\0132"
    "\025.server.MatchPresenceH\000\022.\n\rstorage_fetc"
    "h\0300 \001(\0132\025.server.TStorageFetchH\000\022.\n\rstor"
    "age_write\0301 \001(\0132\025.server.TStorageWriteH\000"
    "\0220\n\016storage_remove\0302 \001(\0132\026.server.TStora"
    "geRemoveH\000\022,\n\014storage_data\0303 \001(\0132\024.serve"
    "r.TStorageDataH\000\022*\n\013storage_key\0304 \001(\0132\023."
    "server.TStorageKeyH\000B\t\n\007payload\"\010\n\006Logou"
    "t\"\340\001\n\005TLink\0222\n\005email\030\001 \001(\0132!.server.Auth"
    "enticateRequest.EmailH\000\022\022\n\010facebook\030\002 \001("
    "\tH\000\022\020\n\006google\030\003 \001(\tH\000\022=\n\013game_center\030\004 \001"
    "(\0132&.server.AuthenticateRequest.GameCent"
    "erH\000\022\017\n\005steam\030\005 \001(\tH\000\022\020\n\006device\030\006 \001(\tH\000\022"
    "\020\n\006custom\030\007 \001(\tH\000B\t\n\007payload\"\227\001\n\007TUnlink"
    "\022\017\n\005email\030\001 \001(\tH\000\022\022\n\010facebook\030\002 \001(\tH\000\022\020\n"
    "\006google\030\003 \001(\tH\000\022\025\n\013game_center\030\004 \001(\tH\000\022\017"
    "\n\005steam\030\005 \001(\tH\000\022\020\n\006device\030\006 \001(\tH\000\022\020\n\006cus"
    "tom\030\007 \001(\tH\000B\t\n\007payload\"\314\001\n\004User\022\n\n\002id\030\001 "
    "\001(\014\022\016\n\006handle\030\002 \001(\t\022\020\n\010fullname\030\003 \001(\t\022\022\n"
    "\navatar_url\030\004 \001(\t\022\014\n\004lang\030\005 \001(\t\022\020\n\010locat"
    "ion\030\006 \001(\t\022\020\n\010timezone\030\007 \001(\t\022\020\n\010metadata\030"
    "\010 \001(\014\022\022\n\ncreated_at\030\t \001(\003\022\022\n\nupdated_at\030"
    "\n \001(\003\022\026\n\016last_online_at\030\013 \001(\003\"\272\001\n\004Self\022\032"
    "\n\004user\030\001 \001(\0132\014.server.User\022\020\n\010verified\030\002"
    " \001(\010\022\r\n\005email\030\003 \001(\t\022\021\n\tdevice_id\030\004 \003(\t\022\023"
    "\n\013facebook_id\030\005 \001(\t\022\021\n\tgoogle_id\030\006 \001(\t\022\025"
    "\n\rgamecenter_id\030\007 \001(\t\022\020\n\010steam_id\030\010 \001(\t\022"
    "\021\n\tcustom_id\030\t \001(\t\"\014\n\nTSelfFetch\"#\n\005TSel"
    "f\022\032\n\004self\030\001 \001(\0132\014.server.Self\"\207\001\n\013TSelfU"
    "pdate\022\016\n\006handle\030\001 \001(\t\022\020\n\010fullname\030\002 \001(\t\022"
    "\020\n\010timezone\030\003 \001(\t\022\020\n\010location\030\004 \001(\t\022\014\n\004l"
    "ang\030\005 \001(\t\022\020\n\010metadata\030\006 \001(\014\022\022\n\navatar_ur"
    "l\030\007 \001(\t\"\037\n\013TUsersFetch\022\020\n\010user_ids\030\001 \003(\014"
    "\"%\n\006TUsers\022\033\n\005users\030\001 \003(\0132\014.server.User\""
    "2\n\006Friend\022\032\n\004user\030\001 \001(\0132\014.server.User\022\014\n"
    "\004type\030\002 \001(\003\"\035\n\nTFriendAdd\022\017\n\007user_id\030\001 \001"
    "(\014\" \n\rTFriendRemove\022\017\n\007user_id\030\001 \001(\014\"\037\n\014"
    "TFriendBlock\022\017\n\007user_id\030\001 \001(\014\"\016\n\014TFriend"
    "sList\"+\n\010TFriends\022\037\n\007friends\030\001 \003(\0132\016.ser"
    "ver.Friend\"\335\001\n\005Group\022\n\n\002id\030\001 \001(\014\022\017\n\007priv"
    "ate\030\002 \001(\010\022\022\n\ncreator_id\030\003 \001(\014\022\014\n\004name\030\004 "
    "\001(\t\022\023\n\013description\030\005 \001(\t\022\022\n\navatar_url\030\006"
    " \001(\t\022\014\n\004lang\030\007 \001(\t\022\025\n\rutc_offset_ms\030\010 \001("
    "\003\022\020\n\010metadata\030\t \001(\014\022\r\n\005count\030\n \001(\003\022\022\n\ncr"
    "eated_at\030\013 \001(\003\022\022\n\nupdated_at\030\014 \001(\003\"v\n\014TG"
    "roupCreate\022\014\n\004name\030\001 \001(\t\022\023\n\013description\030"
    "\002 \001(\t\022\022\n\navatar_url\030\003 \001(\t\022\014\n\004lang\030\004 \001(\t\022"
    "\020\n\010metadata\030\005 \001(\014\022\017\n\007private\030\006 \001(\010\"&\n\006TG"
    "roup\022\034\n\005group\030\001 \001(\0132\r.server.Group\"\210\001\n\014T"
    "GroupUpdate\022\020\n\010group_id\030\001 \001(\014\022\017\n\007private"
    "\030\002 \001(\010\022\014\n\004name\030\003 \001(\t\022\023\n\013description\030\004 \001("
    "\t\022\022\n\navatar_url\030\005 \001(\t\022\014\n\004lang\030\006 \001(\t\022\020\n\010m"
    "etadata\030\007 \001(\014\" \n\014TGroupRemove\022\020\n\010group_i"
    "d\030\001 \001(\014\"\021\n\017TGroupsSelfList\"!\n\014TGroupsFet"
    "ch\022\021\n\tgroup_ids\030\001 \003(\014\"\210\001\n\013TGroupsList\022\022\n"
    "\npage_limit\030\001 \001(\003\022\024\n\014order_by_asc\030\002 \001(\010\022"
    "\016\n\004lang\030\003 \001(\tH\000\022\024\n\ncreated_at\030\004 \001(\003H\000\022\017\n"
    "\005count\030\005 \001(\003H\000\022\016\n\006cursor\030\007 \001(\014B\010\n\006filter"
    "\"8\n\007TGroups\022\035\n\006groups\030\001 \003(\0132\r.server.Gro"
    "up\022\016\n\006cursor\030\002 \001(\014\"5\n\tGroupUser\022\032\n\004user\030"
    "\001 \001(\0132\014.server.User\022\014\n\004type\030\002 \001(\003\"#\n\017TGr"
    "oupUsersList\022\020\n\010group_id\030\001 \001(\014\"/\n\013TGroup"
    "Users\022 \n\005users\030\001 \003(\0132\021.server.GroupUser\""
    "\036\n\nTGroupJoin\022\020\n\010group_id\030\001 \001(\014\"\037\n\013TGrou"
    "pLeave\022\020\n\010group_id\030\001 \001(\014\"2\n\rTGroupUserAd"
    "d\022\020\n\010group_id\030\001 \001(\014\022\017\n\007user_id\030\002 \001(\014\"3\n\016"
    "TGroupUserKick\022\020\n\010group_id\030\001 \001(\014\022\017\n\007user"
    "_id\030\002 \001(\014\"6\n\021TGroupUserPromote\022\020\n\010group_"
    "id\030\001 \001(\014\022\017\n\007user_id\030\002 \001(\014\"A\n\007TopicId\022\014\n\002"
    "dm\030\001 \001(\014H\000\022\016\n\004room\030\002 \001(\014H\000\022\022\n\010group_id\030\003"
    " \001(\014H\000B\004\n\002id\"3\n\014UserPresence\022\017\n\007user_id\030"
    "\001 \001(\014\022\022\n\nsession_id\030\002 \001(\014\"I\n\nTTopicJoin\022"
    "\021\n\007user_id\030\001 \001(\014H\000\022\016\n\004room\030\002 \001(\014H\000\022\022\n\010gr"
    "oup_id\030\003 \001(\014H\000B\004\n\002id\"u\n\006TTopic\022\036\n\005topic\030"
    "\001 \001(\0132\017.server.TopicId\022\'\n\tpresences\030\002 \003("
    "\0132\024.server.UserPresence\022\"\n\004self\030\003 \001(\0132\024."
    "server.UserPresence\"-\n\013TTopicLeave\022\036\n\005to"
    "pic\030\001 \001(\0132\017.server.TopicId\"A\n\021TTopicMess"
    "ageSend\022\036\n\005topic\030\001 \001(\0132\017.server.TopicId\022"
    "\014\n\004data\030\002 \001(\014\"^\n\020TTopicMessageAck\022\022\n\nmes"
    "sage_id\030\001 \001(\014\022\022\n\ncreated_at\030\002 \001(\003\022\022\n\nexp"
    "ires_at\030\003 \001(\003\022\016\n\006handle\030\004 \001(\t\"\247\001\n\014TopicM"
    "essage\022\036\n\005topic\030\001 \001(\0132\017.server.TopicId\022\017"
    "\n\007user_id\030\002 \001(\014\022\022\n\nmessage_id\030\003 \001(\014\022\022\n\nc"
    "reated_at\030\004 \001(\003\022\022\n\nexpires_at\030\005 \001(\003\022\016\n\006h"
    "andle\030\006 \001(\t\022\014\n\004type\030\007 \001(\003\022\014\n\004data\030\010 \001(\014\""
    "\201\001\n\022TTopicMessagesList\022\021\n\007user_id\030\001 \001(\014H"
    "\000\022\016\n\004room\030\002 \001(\014H\000\022\022\n\010group_id\030\003 \001(\014H\000\022\016\n"
    "\006cursor\030\004 \001(\014\022\017\n\007forward\030\005 \001(\010\022\r\n\005limit\030"
    "\006 \001(\003B\004\n\002id\"H\n\016TTopicMessages\022&\n\010message"
    "s\030\001 \003(\0132\024.server.TopicMessage\022\016\n\006cursor\030"
    "\002 \001(\014\"z\n\rTopicPresence\022\036\n\005topic\030\001 \001(\0132\017."
    "server.TopicId\022#\n\005joins\030\002 \003(\0132\024.server.U"
    "serPresence\022$\n\006leaves\030\003 \003(\0132\024.server.Use"
    "rPresence\"\016\n\014TMatchCreate\"\036\n\nTMatchJoin\022"
    "\020\n\010match_id\030\001 \001(\014\"g\n\006TMatch\022\020\n\010match_id\030"
    "\001 \001(\014\022\'\n\tpresences\030\002 \003(\0132\024.server.UserPr"
    "esence\022\"\n\004self\030\003 \001(\0132\024.server.UserPresen"
    "ce\"A\n\016TMatchDataSend\022\020\n\010match_id\030\001 \001(\014\022\017"
    "\n\007op_code\030\002 \001(\003\022\014\n\004data\030\003 \001(\014\"d\n\tMatchDa"
    "ta\022\020\n\010match_id\030\001 \001(\014\022&\n\010presence\030\002 \001(\0132\024"
    ".server.UserPresence\022\017\n\007op_code\030\003 \001(\003\022\014\n"
    "\004data\030\004 \001(\014\"\037\n\013TMatchLeave\022\020\n\010match_id\030\001"
    " \001(\014\"l\n\rMatchPresence\022\020\n\010match_id\030\001 \001(\014\022"
    "#\n\005joins\030\002 \003(\0132\024.server.UserPresence\022$\n\006"
    "leaves\030\003 \003(\0132\024.server.UserPresence\"\222\001\n\rT"
    "StorageFetch\022.\n\004keys\030\001 \003(\0132 .server.TSto"
    "rageFetch.StorageKey\032Q\n\nStorageKey\022\016\n\006bu"
    "cket\030\001 \001(\t\022\022\n\ncollection\030\002 \001(\t\022\016\n\006record"
    "\030\003 \001(\t\022\017\n\007user_id\030\004 \001(\014\"\242\002\n\014TStorageData"
    "\022.\n\004data\030\001 \003(\0132 .server.TStorageData.Sto"
    "rageData\032\341\001\n\013StorageData\022\016\n\006bucket\030\001 \001(\t"
    "\022\022\n\ncollection\030\002 \001(\t\022\016\n\006record\030\003 \001(\t\022\017\n\007"
    "user_id\030\004 \001(\014\022\r\n\005value\030\005 \001(\014\022\017\n\007version\030"
    "\006 \001(\014\022\027\n\017permission_read\030\007 \001(\003\022\030\n\020permis"
    "sion_write\030\010 \001(\003\022\022\n\ncreated_at\030\t \001(\003\022\022\n\n"
    "updated_at\030\n \001(\003\022\022\n\nexpires_at\030\013 \001(\003\"\243\001\n"
    "\rTStorageWrite\022/\n\004data\030\003 \003(\0132!.server.TS"
    "torageWrite.StorageData\032a\n\013StorageData\022\016"
    "\n\006bucket\030\001 \001(\t\022\022\n\ncollection\030\002 \001(\t\022\016\n\006re"
    "cord\030\003 \001(\t\022\r\n\005value\030\004 \001(\014\022\017\n\007version\030\005 \001"
    "(\014\"\216\001\n\013TStorageKey\022,\n\004keys\030\001 \003(\0132\036.serve"
    "r.TStorageKey.StorageKey\032Q\n\nStorageKey\022\016"
    "\n\006bucket\030\001 \001(\t\022\022\n\ncollection\030\002 \001(\t\022\016\n\006re"
    "cord\030\003 \001(\t\022\017\n\007version\030\004 \001(\014\"\224\001\n\016TStorage"
    "Remove\022/\n\004keys\030\001 \003(\0132!.server.TStorageRe"
    "move.StorageKey\032Q\n\nStorageKey\022\016\n\006bucket\030"
    "\001 \001(\t\022\022\n\ncollection\030\002 \001(\t\022\016\n\006record\030\003 \001("
    "\t\022\017\n\007version\030\004 \001(\014B\t\252\002\006Nakamab\006proto3", 7917);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "api.proto", &protobuf_RegisterTypes);
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_api_2eproto);
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_api_2eproto_once_);
void protobuf_AddDesc_api_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_api_2eproto_once_,
                 &protobuf_AddDesc_api_2eproto_impl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_api_2eproto {
  StaticDescriptorInitializer_api_2eproto() {
    protobuf_AddDesc_api_2eproto();
  }
} static_descriptor_initializer_api_2eproto_;

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD GOOGLE_ATTRIBUTE_NORETURN;
static void MergeFromFail(int line) {
  ::google::protobuf::internal::MergeFromFail(__FILE__, line);
}

}  // namespace


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Heartbeat::kTimestampFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Heartbeat::Heartbeat()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_api_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:server.Heartbeat)
}

void Heartbeat::InitAsDefaultInstance() {
}

Heartbeat::Heartbeat(const Heartbeat& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:server.Heartbeat)
}

void Heartbeat::SharedCtor() {
  timestamp_ = GOOGLE_LONGLONG(0);
  _cached_size_ = 0;
}

Heartbeat::~Heartbeat() {
  // @@protoc_insertion_point(destructor:server.Heartbeat)
  SharedDtor();
}

void Heartbeat::SharedDtor() {
}

void Heartbeat::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Heartbeat::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Heartbeat_descriptor_;
}

const Heartbeat& Heartbeat::default_instance() {
  protobuf_InitDefaults_api_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<Heartbeat> Heartbeat_default_instance_;

Heartbeat* Heartbeat::New(::google::protobuf::Arena* arena) const {
  Heartbeat* n = new Heartbeat;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Heartbeat::Clear() {
// @@protoc_insertion_point(message_clear_start:server.Heartbeat)
  timestamp_ = GOOGLE_LONGLONG(0);
}

bool Heartbeat::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:server.Heartbeat)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 timestamp = 1;
      case 1: {
        if (tag == 8) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &timestamp_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:server.Heartbeat)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:server.Heartbeat)
  return false;
#undef DO_
}

void Heartbeat::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:server.Heartbeat)
  // optional int64 timestamp = 1;
  if (this->timestamp() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->timestamp(), output);
  }

  // @@protoc_insertion_point(serialize_end:server.Heartbeat)
}

::google::protobuf::uint8* Heartbeat::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:server.Heartbeat)
  // optional int64 timestamp = 1;
  if (this->timestamp() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->timestamp(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:server.Heartbeat)
  return target;
}

size_t Heartbeat::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:server.Heartbeat)
  size_t total_size = 0;

  // optional int64 timestamp = 1;
  if (this->timestamp() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->timestamp());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Heartbeat::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:server.Heartbeat)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Heartbeat* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Heartbeat>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:server.Heartbeat)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:server.Heartbeat)
    UnsafeMergeFrom(*source);
  }
}

void Heartbeat::MergeFrom(const Heartbeat& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:server.Heartbeat)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void Heartbeat::UnsafeMergeFrom(const Heartbeat& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.timestamp() != 0) {
    set_timestamp(from.timestamp());
  }
}

void Heartbeat::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:server.Heartbeat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Heartbeat::CopyFrom(const Heartbeat& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:server.Heartbeat)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool Heartbeat::IsInitialized() const {

  return true;
}

void Heartbeat::Swap(Heartbeat* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Heartbeat::InternalSwap(Heartbeat* other) {
  std::swap(timestamp_, other->timestamp_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Heartbeat::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Heartbeat_descriptor_;
  metadata.reflection = Heartbeat_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Heartbeat

// optional int64 timestamp = 1;
void Heartbeat::clear_timestamp() {
  timestamp_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 Heartbeat::timestamp() const {
  // @@protoc_insertion_point(field_get:server.Heartbeat.timestamp)
  return timestamp_;
}
void Heartbeat::set_timestamp(::google::protobuf::int64 value) {
  
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:server.Heartbeat.timestamp)
}

inline const Heartbeat* Heartbeat::internal_default_instance() {
  return &Heartbeat_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Error::kReasonFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Error::Error()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_api_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:server.Error)
}

void Error::InitAsDefaultInstance() {
}

Error::Error(const Error& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:server.Error)
}

void Error::SharedCtor() {
  reason_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

Error::~Error() {
  // @@protoc_insertion_point(destructor:server.Error)
  SharedDtor();
}

void Error::SharedDtor() {
  reason_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Error::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Error::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Error_descriptor_;
}

const Error& Error::default_instance() {
  protobuf_InitDefaults_api_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<Error> Error_default_instance_;

Error* Error::New(::google::protobuf::Arena* arena) const {
  Error* n = new Error;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Error::Clear() {
// @@protoc_insertion_point(message_clear_start:server.Error)
  reason_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool Error::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:server.Error)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string reason = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_reason()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->reason().data(), this->reason().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "server.Error.reason"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:server.Error)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:server.Error)
  return false;
#undef DO_
}

void Error::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:server.Error)
  // optional string reason = 1;
  if (this->reason().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->reason().data(), this->reason().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server.Error.reason");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->reason(), output);
  }

  // @@protoc_insertion_point(serialize_end:server.Error)
}

::google::protobuf::uint8* Error::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:server.Error)
  // optional string reason = 1;
  if (this->reason().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->reason().data(), this->reason().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server.Error.reason");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->reason(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:server.Error)
  return target;
}

size_t Error::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:server.Error)
  size_t total_size = 0;

  // optional string reason = 1;
  if (this->reason().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->reason());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Error::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:server.Error)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Error* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Error>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:server.Error)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:server.Error)
    UnsafeMergeFrom(*source);
  }
}

void Error::MergeFrom(const Error& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:server.Error)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void Error::UnsafeMergeFrom(const Error& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.reason().size() > 0) {

    reason_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.reason_);
  }
}

void Error::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:server.Error)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Error::CopyFrom(const Error& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:server.Error)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool Error::IsInitialized() const {

  return true;
}

void Error::Swap(Error* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Error::InternalSwap(Error* other) {
  reason_.Swap(&other->reason_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Error::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Error_descriptor_;
  metadata.reflection = Error_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Error

// optional string reason = 1;
void Error::clear_reason() {
  reason_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Error::reason() const {
  // @@protoc_insertion_point(field_get:server.Error.reason)
  return reason_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Error::set_reason(const ::std::string& value) {
  
  reason_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:server.Error.reason)
}
void Error::set_reason(const char* value) {
  
  reason_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:server.Error.reason)
}
void Error::set_reason(const char* value, size_t size) {
  
  reason_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:server.Error.reason)
}
::std::string* Error::mutable_reason() {
  
  // @@protoc_insertion_point(field_mutable:server.Error.reason)
  return reason_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Error::release_reason() {
  // @@protoc_insertion_point(field_release:server.Error.reason)
  
  return reason_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Error::set_allocated_reason(::std::string* reason) {
  if (reason != NULL) {
    
  } else {
    
  }
  reason_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), reason);
  // @@protoc_insertion_point(field_set_allocated:server.Error.reason)
}

inline const Error* Error::internal_default_instance() {
  return &Error_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AuthenticateRequest_Email::kEmailFieldNumber;
const int AuthenticateRequest_Email::kPasswordFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AuthenticateRequest_Email::AuthenticateRequest_Email()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_api_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:server.AuthenticateRequest.Email)
}

void AuthenticateRequest_Email::InitAsDefaultInstance() {
}

AuthenticateRequest_Email::AuthenticateRequest_Email(const AuthenticateRequest_Email& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:server.AuthenticateRequest.Email)
}

void AuthenticateRequest_Email::SharedCtor() {
  email_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  password_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

AuthenticateRequest_Email::~AuthenticateRequest_Email() {
  // @@protoc_insertion_point(destructor:server.AuthenticateRequest.Email)
  SharedDtor();
}

void AuthenticateRequest_Email::SharedDtor() {
  email_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  password_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void AuthenticateRequest_Email::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AuthenticateRequest_Email::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AuthenticateRequest_Email_descriptor_;
}

const AuthenticateRequest_Email& AuthenticateRequest_Email::default_instance() {
  protobuf_InitDefaults_api_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<AuthenticateRequest_Email> AuthenticateRequest_Email_default_instance_;

AuthenticateRequest_Email* AuthenticateRequest_Email::New(::google::protobuf::Arena* arena) const {
  AuthenticateRequest_Email* n = new AuthenticateRequest_Email;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AuthenticateRequest_Email::Clear() {
// @@protoc_insertion_point(message_clear_start:server.AuthenticateRequest.Email)
  email_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  password_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool AuthenticateRequest_Email::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:server.AuthenticateRequest.Email)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string email = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_email()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->email().data(), this->email().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "server.AuthenticateRequest.Email.email"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_password;
        break;
      }

      // optional string password = 2;
      case 2: {
        if (tag == 18) {
         parse_password:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_password()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->password().data(), this->password().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "server.AuthenticateRequest.Email.password"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:server.AuthenticateRequest.Email)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:server.AuthenticateRequest.Email)
  return false;
#undef DO_
}

void AuthenticateRequest_Email::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:server.AuthenticateRequest.Email)
  // optional string email = 1;
  if (this->email().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->email().data(), this->email().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server.AuthenticateRequest.Email.email");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->email(), output);
  }

  // optional string password = 2;
  if (this->password().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->password().data(), this->password().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server.AuthenticateRequest.Email.password");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->password(), output);
  }

  // @@protoc_insertion_point(serialize_end:server.AuthenticateRequest.Email)
}

::google::protobuf::uint8* AuthenticateRequest_Email::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:server.AuthenticateRequest.Email)
  // optional string email = 1;
  if (this->email().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->email().data(), this->email().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server.AuthenticateRequest.Email.email");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->email(), target);
  }

  // optional string password = 2;
  if (this->password().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->password().data(), this->password().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server.AuthenticateRequest.Email.password");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->password(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:server.AuthenticateRequest.Email)
  return target;
}

size_t AuthenticateRequest_Email::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:server.AuthenticateRequest.Email)
  size_t total_size = 0;

  // optional string email = 1;
  if (this->email().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->email());
  }

  // optional string password = 2;
  if (this->password().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->password());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AuthenticateRequest_Email::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:server.AuthenticateRequest.Email)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const AuthenticateRequest_Email* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AuthenticateRequest_Email>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:server.AuthenticateRequest.Email)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:server.AuthenticateRequest.Email)
    UnsafeMergeFrom(*source);
  }
}

void AuthenticateRequest_Email::MergeFrom(const AuthenticateRequest_Email& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:server.AuthenticateRequest.Email)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void AuthenticateRequest_Email::UnsafeMergeFrom(const AuthenticateRequest_Email& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.email().size() > 0) {

    email_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.email_);
  }
  if (from.password().size() > 0) {

    password_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.password_);
  }
}

void AuthenticateRequest_Email::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:server.AuthenticateRequest.Email)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AuthenticateRequest_Email::CopyFrom(const AuthenticateRequest_Email& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:server.AuthenticateRequest.Email)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool AuthenticateRequest_Email::IsInitialized() const {

  return true;
}

void AuthenticateRequest_Email::Swap(AuthenticateRequest_Email* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AuthenticateRequest_Email::InternalSwap(AuthenticateRequest_Email* other) {
  email_.Swap(&other->email_);
  password_.Swap(&other->password_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AuthenticateRequest_Email::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AuthenticateRequest_Email_descriptor_;
  metadata.reflection = AuthenticateRequest_Email_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AuthenticateRequest_GameCenter::kPlayerIdFieldNumber;
const int AuthenticateRequest_GameCenter::kBundleIdFieldNumber;
const int AuthenticateRequest_GameCenter::kTimestampFieldNumber;
const int AuthenticateRequest_GameCenter::kSaltFieldNumber;
const int AuthenticateRequest_GameCenter::kSignatureFieldNumber;
const int AuthenticateRequest_GameCenter::kPublicKeyUrlFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AuthenticateRequest_GameCenter::AuthenticateRequest_GameCenter()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_api_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:server.AuthenticateRequest.GameCenter)
}

void AuthenticateRequest_GameCenter::InitAsDefaultInstance() {
}

AuthenticateRequest_GameCenter::AuthenticateRequest_GameCenter(const AuthenticateRequest_GameCenter& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:server.AuthenticateRequest.GameCenter)
}

void AuthenticateRequest_GameCenter::SharedCtor() {
  player_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  bundle_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  salt_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  signature_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  public_key_url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  timestamp_ = GOOGLE_LONGLONG(0);
  _cached_size_ = 0;
}

AuthenticateRequest_GameCenter::~AuthenticateRequest_GameCenter() {
  // @@protoc_insertion_point(destructor:server.AuthenticateRequest.GameCenter)
  SharedDtor();
}

void AuthenticateRequest_GameCenter::SharedDtor() {
  player_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  bundle_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  salt_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  signature_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  public_key_url_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void AuthenticateRequest_GameCenter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AuthenticateRequest_GameCenter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AuthenticateRequest_GameCenter_descriptor_;
}

const AuthenticateRequest_GameCenter& AuthenticateRequest_GameCenter::default_instance() {
  protobuf_InitDefaults_api_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<AuthenticateRequest_GameCenter> AuthenticateRequest_GameCenter_default_instance_;

AuthenticateRequest_GameCenter* AuthenticateRequest_GameCenter::New(::google::protobuf::Arena* arena) const {
  AuthenticateRequest_GameCenter* n = new AuthenticateRequest_GameCenter;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AuthenticateRequest_GameCenter::Clear() {
// @@protoc_insertion_point(message_clear_start:server.AuthenticateRequest.GameCenter)
  player_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  bundle_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  timestamp_ = GOOGLE_LONGLONG(0);
  salt_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  signature_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  public_key_url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool AuthenticateRequest_GameCenter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:server.AuthenticateRequest.GameCenter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string player_id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_player_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->player_id().data(), this->player_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "server.AuthenticateRequest.GameCenter.player_id"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_bundle_id;
        break;
      }

      // optional string bundle_id = 2;
      case 2: {
        if (tag == 18) {
         parse_bundle_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_bundle_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->bundle_id().data(), this->bundle_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "server.AuthenticateRequest.GameCenter.bundle_id"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_timestamp;
        break;
      }

      // optional int64 timestamp = 3;
      case 3: {
        if (tag == 24) {
         parse_timestamp:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &timestamp_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_salt;
        break;
      }

      // optional string salt = 4;
      case 4: {
        if (tag == 34) {
         parse_salt:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_salt()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->salt().data(), this->salt().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "server.AuthenticateRequest.GameCenter.salt"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_signature;
        break;
      }

      // optional string signature = 5;
      case 5: {
        if (tag == 42) {
         parse_signature:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_signature()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->signature().data(), this->signature().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "server.AuthenticateRequest.GameCenter.signature"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_public_key_url;
        break;
      }

      // optional string public_key_url = 6;
      case 6: {
        if (tag == 50) {
         parse_public_key_url:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_public_key_url()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->public_key_url().data(), this->public_key_url().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "server.AuthenticateRequest.GameCenter.public_key_url"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:server.AuthenticateRequest.GameCenter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:server.AuthenticateRequest.GameCenter)
  return false;
#undef DO_
}

void AuthenticateRequest_GameCenter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:server.AuthenticateRequest.GameCenter)
  // optional string player_id = 1;
  if (this->player_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->player_id().data(), this->player_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server.AuthenticateRequest.GameCenter.player_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->player_id(), output);
  }

  // optional string bundle_id = 2;
  if (this->bundle_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->bundle_id().data(), this->bundle_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server.AuthenticateRequest.GameCenter.bundle_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->bundle_id(), output);
  }

  // optional int64 timestamp = 3;
  if (this->timestamp() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->timestamp(), output);
  }

  // optional string salt = 4;
  if (this->salt().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->salt().data(), this->salt().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server.AuthenticateRequest.GameCenter.salt");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->salt(), output);
  }

  // optional string signature = 5;
  if (this->signature().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->signature().data(), this->signature().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server.AuthenticateRequest.GameCenter.signature");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->signature(), output);
  }

  // optional string public_key_url = 6;
  if (this->public_key_url().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->public_key_url().data(), this->public_key_url().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server.AuthenticateRequest.GameCenter.public_key_url");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->public_key_url(), output);
  }

  // @@protoc_insertion_point(serialize_end:server.AuthenticateRequest.GameCenter)
}

::google::protobuf::uint8* AuthenticateRequest_GameCenter::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:server.AuthenticateRequest.GameCenter)
  // optional string player_id = 1;
  if (this->player_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->player_id().data(), this->player_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server.AuthenticateRequest.GameCenter.player_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->player_id(), target);
  }

  // optional string bundle_id = 2;
  if (this->bundle_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->bundle_id().data(), this->bundle_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server.AuthenticateRequest.GameCenter.bundle_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->bundle_id(), target);
  }

  // optional int64 timestamp = 3;
  if (this->timestamp() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->timestamp(), target);
  }

  // optional string salt = 4;
  if (this->salt().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->salt().data(), this->salt().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server.AuthenticateRequest.GameCenter.salt");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->salt(), target);
  }

  // optional string signature = 5;
  if (this->signature().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->signature().data(), this->signature().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server.AuthenticateRequest.GameCenter.signature");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->signature(), target);
  }

  // optional string public_key_url = 6;
  if (this->public_key_url().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->public_key_url().data(), this->public_key_url().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server.AuthenticateRequest.GameCenter.public_key_url");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->public_key_url(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:server.AuthenticateRequest.GameCenter)
  return target;
}

size_t AuthenticateRequest_GameCenter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:server.AuthenticateRequest.GameCenter)
  size_t total_size = 0;

  // optional string player_id = 1;
  if (this->player_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->player_id());
  }

  // optional string bundle_id = 2;
  if (this->bundle_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->bundle_id());
  }

  // optional int64 timestamp = 3;
  if (this->timestamp() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->timestamp());
  }

  // optional string salt = 4;
  if (this->salt().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->salt());
  }

  // optional string signature = 5;
  if (this->signature().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->signature());
  }

  // optional string public_key_url = 6;
  if (this->public_key_url().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->public_key_url());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AuthenticateRequest_GameCenter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:server.AuthenticateRequest.GameCenter)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const AuthenticateRequest_GameCenter* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AuthenticateRequest_GameCenter>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:server.AuthenticateRequest.GameCenter)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:server.AuthenticateRequest.GameCenter)
    UnsafeMergeFrom(*source);
  }
}

void AuthenticateRequest_GameCenter::MergeFrom(const AuthenticateRequest_GameCenter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:server.AuthenticateRequest.GameCenter)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void AuthenticateRequest_GameCenter::UnsafeMergeFrom(const AuthenticateRequest_GameCenter& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.player_id().size() > 0) {

    player_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.player_id_);
  }
  if (from.bundle_id().size() > 0) {

    bundle_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.bundle_id_);
  }
  if (from.timestamp() != 0) {
    set_timestamp(from.timestamp());
  }
  if (from.salt().size() > 0) {

    salt_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.salt_);
  }
  if (from.signature().size() > 0) {

    signature_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.signature_);
  }
  if (from.public_key_url().size() > 0) {

    public_key_url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.public_key_url_);
  }
}

void AuthenticateRequest_GameCenter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:server.AuthenticateRequest.GameCenter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AuthenticateRequest_GameCenter::CopyFrom(const AuthenticateRequest_GameCenter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:server.AuthenticateRequest.GameCenter)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool AuthenticateRequest_GameCenter::IsInitialized() const {

  return true;
}

void AuthenticateRequest_GameCenter::Swap(AuthenticateRequest_GameCenter* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AuthenticateRequest_GameCenter::InternalSwap(AuthenticateRequest_GameCenter* other) {
  player_id_.Swap(&other->player_id_);
  bundle_id_.Swap(&other->bundle_id_);
  std::swap(timestamp_, other->timestamp_);
  salt_.Swap(&other->salt_);
  signature_.Swap(&other->signature_);
  public_key_url_.Swap(&other->public_key_url_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AuthenticateRequest_GameCenter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AuthenticateRequest_GameCenter_descriptor_;
  metadata.reflection = AuthenticateRequest_GameCenter_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AuthenticateRequest::kCollationIdFieldNumber;
const int AuthenticateRequest::kEmailFieldNumber;
const int AuthenticateRequest::kFacebookFieldNumber;
const int AuthenticateRequest::kGoogleFieldNumber;
const int AuthenticateRequest::kGameCenterFieldNumber;
const int AuthenticateRequest::kSteamFieldNumber;
const int AuthenticateRequest::kDeviceFieldNumber;
const int AuthenticateRequest::kCustomFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AuthenticateRequest::AuthenticateRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_api_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:server.AuthenticateRequest)
}

void AuthenticateRequest::InitAsDefaultInstance() {
  AuthenticateRequest_default_oneof_instance_->email_ = const_cast< ::server::AuthenticateRequest_Email*>(
      ::server::AuthenticateRequest_Email::internal_default_instance());
  AuthenticateRequest_default_oneof_instance_->facebook_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  AuthenticateRequest_default_oneof_instance_->google_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  AuthenticateRequest_default_oneof_instance_->game_center_ = const_cast< ::server::AuthenticateRequest_GameCenter*>(
      ::server::AuthenticateRequest_GameCenter::internal_default_instance());
  AuthenticateRequest_default_oneof_instance_->steam_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  AuthenticateRequest_default_oneof_instance_->device_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  AuthenticateRequest_default_oneof_instance_->custom_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

AuthenticateRequest::AuthenticateRequest(const AuthenticateRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:server.AuthenticateRequest)
}

void AuthenticateRequest::SharedCtor() {
  collationid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_payload();
  _cached_size_ = 0;
}

AuthenticateRequest::~AuthenticateRequest() {
  // @@protoc_insertion_point(destructor:server.AuthenticateRequest)
  SharedDtor();
}

void AuthenticateRequest::SharedDtor() {
  collationid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (has_payload()) {
    clear_payload();
  }
}

void AuthenticateRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AuthenticateRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AuthenticateRequest_descriptor_;
}

const AuthenticateRequest& AuthenticateRequest::default_instance() {
  protobuf_InitDefaults_api_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<AuthenticateRequest> AuthenticateRequest_default_instance_;

AuthenticateRequest* AuthenticateRequest::New(::google::protobuf::Arena* arena) const {
  AuthenticateRequest* n = new AuthenticateRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AuthenticateRequest::clear_payload() {
// @@protoc_insertion_point(one_of_clear_start:server.AuthenticateRequest)
  switch (payload_case()) {
    case kEmail: {
      delete payload_.email_;
      break;
    }
    case kFacebook: {
      payload_.facebook_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
      break;
    }
    case kGoogle: {
      payload_.google_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
      break;
    }
    case kGameCenter: {
      delete payload_.game_center_;
      break;
    }
    case kSteam: {
      payload_.steam_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
      break;
    }
    case kDevice: {
      payload_.device_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
      break;
    }
    case kCustom: {
      payload_.custom_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
      break;
    }
    case PAYLOAD_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = PAYLOAD_NOT_SET;
}


void AuthenticateRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:server.AuthenticateRequest)
  collationid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_payload();
}

bool AuthenticateRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:server.AuthenticateRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string collationId = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_collationid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->collationid().data(), this->collationid().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "server.AuthenticateRequest.collationId"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_email;
        break;
      }

      // optional .server.AuthenticateRequest.Email email = 2;
      case 2: {
        if (tag == 18) {
         parse_email:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_email()));
        } else {
          goto handle_unusual;
        }
        goto after_custom;
        break;
      }

      // optional string facebook = 3;
      case 3: {
        if (tag == 26) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_facebook()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->facebook().data(), this->facebook().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "server.AuthenticateRequest.facebook"));
        } else {
          goto handle_unusual;
        }
        goto after_custom;
        break;
      }

      // optional string google = 4;
      case 4: {
        if (tag == 34) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_google()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->google().data(), this->google().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "server.AuthenticateRequest.google"));
        } else {
          goto handle_unusual;
        }
        goto after_custom;
        break;
      }

      // optional .server.AuthenticateRequest.GameCenter game_center = 5;
      case 5: {
        if (tag == 42) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_game_center()));
        } else {
          goto handle_unusual;
        }
        goto after_custom;
        break;
      }

      // optional string steam = 6;
      case 6: {
        if (tag == 50) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_steam()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->steam().data(), this->steam().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "server.AuthenticateRequest.steam"));
        } else {
          goto handle_unusual;
        }
        goto after_custom;
        break;
      }

      // optional string device = 7;
      case 7: {
        if (tag == 58) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_device()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->device().data(), this->device().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "server.AuthenticateRequest.device"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_custom;
        break;
      }

      // optional string custom = 8;
      case 8: {
        if (tag == 66) {
         parse_custom:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_custom()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->custom().data(), this->custom().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "server.AuthenticateRequest.custom"));
        } else {
          goto handle_unusual;
        }
       after_custom:
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:server.AuthenticateRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:server.AuthenticateRequest)
  return false;
#undef DO_
}

void AuthenticateRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:server.AuthenticateRequest)
  // optional string collationId = 1;
  if (this->collationid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->collationid().data(), this->collationid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server.AuthenticateRequest.collationId");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->collationid(), output);
  }

  // optional .server.AuthenticateRequest.Email email = 2;
  if (has_email()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *payload_.email_, output);
  }

  // optional string facebook = 3;
  if (has_facebook()) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->facebook().data(), this->facebook().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server.AuthenticateRequest.facebook");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->facebook(), output);
  }

  // optional string google = 4;
  if (has_google()) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->google().data(), this->google().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server.AuthenticateRequest.google");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->google(), output);
  }

  // optional .server.AuthenticateRequest.GameCenter game_center = 5;
  if (has_game_center()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *payload_.game_center_, output);
  }

  // optional string steam = 6;
  if (has_steam()) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->steam().data(), this->steam().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server.AuthenticateRequest.steam");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->steam(), output);
  }

  // optional string device = 7;
  if (has_device()) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->device().data(), this->device().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server.AuthenticateRequest.device");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->device(), output);
  }

  // optional string custom = 8;
  if (has_custom()) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->custom().data(), this->custom().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server.AuthenticateRequest.custom");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->custom(), output);
  }

  // @@protoc_insertion_point(serialize_end:server.AuthenticateRequest)
}

::google::protobuf::uint8* AuthenticateRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:server.AuthenticateRequest)
  // optional string collationId = 1;
  if (this->collationid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->collationid().data(), this->collationid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server.AuthenticateRequest.collationId");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->collationid(), target);
  }

  // optional .server.AuthenticateRequest.Email email = 2;
  if (has_email()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *payload_.email_, false, target);
  }

  // optional string facebook = 3;
  if (has_facebook()) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->facebook().data(), this->facebook().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server.AuthenticateRequest.facebook");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->facebook(), target);
  }

  // optional string google = 4;
  if (has_google()) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->google().data(), this->google().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server.AuthenticateRequest.google");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->google(), target);
  }

  // optional .server.AuthenticateRequest.GameCenter game_center = 5;
  if (has_game_center()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *payload_.game_center_, false, target);
  }

  // optional string steam = 6;
  if (has_steam()) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->steam().data(), this->steam().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server.AuthenticateRequest.steam");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->steam(), target);
  }

  // optional string device = 7;
  if (has_device()) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->device().data(), this->device().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server.AuthenticateRequest.device");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->device(), target);
  }

  // optional string custom = 8;
  if (has_custom()) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->custom().data(), this->custom().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server.AuthenticateRequest.custom");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->custom(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:server.AuthenticateRequest)
  return target;
}

size_t AuthenticateRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:server.AuthenticateRequest)
  size_t total_size = 0;

  // optional string collationId = 1;
  if (this->collationid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->collationid());
  }

  switch (payload_case()) {
    // optional .server.AuthenticateRequest.Email email = 2;
    case kEmail: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *payload_.email_);
      break;
    }
    // optional string facebook = 3;
    case kFacebook: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->facebook());
      break;
    }
    // optional string google = 4;
    case kGoogle: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->google());
      break;
    }
    // optional .server.AuthenticateRequest.GameCenter game_center = 5;
    case kGameCenter: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *payload_.game_center_);
      break;
    }
    // optional string steam = 6;
    case kSteam: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->steam());
      break;
    }
    // optional string device = 7;
    case kDevice: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->device());
      break;
    }
    // optional string custom = 8;
    case kCustom: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->custom());
      break;
    }
    case PAYLOAD_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AuthenticateRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:server.AuthenticateRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const AuthenticateRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AuthenticateRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:server.AuthenticateRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:server.AuthenticateRequest)
    UnsafeMergeFrom(*source);
  }
}

void AuthenticateRequest::MergeFrom(const AuthenticateRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:server.AuthenticateRequest)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void AuthenticateRequest::UnsafeMergeFrom(const AuthenticateRequest& from) {
  GOOGLE_DCHECK(&from != this);
  switch (from.payload_case()) {
    case kEmail: {
      mutable_email()->::server::AuthenticateRequest_Email::MergeFrom(from.email());
      break;
    }
    case kFacebook: {
      set_facebook(from.facebook());
      break;
    }
    case kGoogle: {
      set_google(from.google());
      break;
    }
    case kGameCenter: {
      mutable_game_center()->::server::AuthenticateRequest_GameCenter::MergeFrom(from.game_center());
      break;
    }
    case kSteam: {
      set_steam(from.steam());
      break;
    }
    case kDevice: {
      set_device(from.device());
      break;
    }
    case kCustom: {
      set_custom(from.custom());
      break;
    }
    case PAYLOAD_NOT_SET: {
      break;
    }
  }
  if (from.collationid().size() > 0) {

    collationid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.collationid_);
  }
}

void AuthenticateRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:server.AuthenticateRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AuthenticateRequest::CopyFrom(const AuthenticateRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:server.AuthenticateRequest)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool AuthenticateRequest::IsInitialized() const {

  return true;
}

void AuthenticateRequest::Swap(AuthenticateRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AuthenticateRequest::InternalSwap(AuthenticateRequest* other) {
  collationid_.Swap(&other->collationid_);
  std::swap(payload_, other->payload_);
  std::swap(_oneof_case_[0], other->_oneof_case_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AuthenticateRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AuthenticateRequest_descriptor_;
  metadata.reflection = AuthenticateRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// AuthenticateRequest_Email

// optional string email = 1;
void AuthenticateRequest_Email::clear_email() {
  email_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& AuthenticateRequest_Email::email() const {
  // @@protoc_insertion_point(field_get:server.AuthenticateRequest.Email.email)
  return email_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void AuthenticateRequest_Email::set_email(const ::std::string& value) {
  
  email_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:server.AuthenticateRequest.Email.email)
}
void AuthenticateRequest_Email::set_email(const char* value) {
  
  email_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:server.AuthenticateRequest.Email.email)
}
void AuthenticateRequest_Email::set_email(const char* value, size_t size) {
  
  email_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:server.AuthenticateRequest.Email.email)
}
::std::string* AuthenticateRequest_Email::mutable_email() {
  
  // @@protoc_insertion_point(field_mutable:server.AuthenticateRequest.Email.email)
  return email_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* AuthenticateRequest_Email::release_email() {
  // @@protoc_insertion_point(field_release:server.AuthenticateRequest.Email.email)
  
  return email_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void AuthenticateRequest_Email::set_allocated_email(::std::string* email) {
  if (email != NULL) {
    
  } else {
    
  }
  email_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), email);
  // @@protoc_insertion_point(field_set_allocated:server.AuthenticateRequest.Email.email)
}

// optional string password = 2;
void AuthenticateRequest_Email::clear_password() {
  password_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& AuthenticateRequest_Email::password() const {
  // @@protoc_insertion_point(field_get:server.AuthenticateRequest.Email.password)
  return password_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void AuthenticateRequest_Email::set_password(const ::std::string& value) {
  
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:server.AuthenticateRequest.Email.password)
}
void AuthenticateRequest_Email::set_password(const char* value) {
  
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:server.AuthenticateRequest.Email.password)
}
void AuthenticateRequest_Email::set_password(const char* value, size_t size) {
  
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:server.AuthenticateRequest.Email.password)
}
::std::string* AuthenticateRequest_Email::mutable_password() {
  
  // @@protoc_insertion_point(field_mutable:server.AuthenticateRequest.Email.password)
  return password_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* AuthenticateRequest_Email::release_password() {
  // @@protoc_insertion_point(field_release:server.AuthenticateRequest.Email.password)
  
  return password_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void AuthenticateRequest_Email::set_allocated_password(::std::string* password) {
  if (password != NULL) {
    
  } else {
    
  }
  password_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), password);
  // @@protoc_insertion_point(field_set_allocated:server.AuthenticateRequest.Email.password)
}

inline const AuthenticateRequest_Email* AuthenticateRequest_Email::internal_default_instance() {
  return &AuthenticateRequest_Email_default_instance_.get();
}
// -------------------------------------------------------------------

// AuthenticateRequest_GameCenter

// optional string player_id = 1;
void AuthenticateRequest_GameCenter::clear_player_id() {
  player_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& AuthenticateRequest_GameCenter::player_id() const {
  // @@protoc_insertion_point(field_get:server.AuthenticateRequest.GameCenter.player_id)
  return player_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void AuthenticateRequest_GameCenter::set_player_id(const ::std::string& value) {
  
  player_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:server.AuthenticateRequest.GameCenter.player_id)
}
void AuthenticateRequest_GameCenter::set_player_id(const char* value) {
  
  player_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:server.AuthenticateRequest.GameCenter.player_id)
}
void AuthenticateRequest_GameCenter::set_player_id(const char* value, size_t size) {
  
  player_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:server.AuthenticateRequest.GameCenter.player_id)
}
::std::string* AuthenticateRequest_GameCenter::mutable_player_id() {
  
  // @@protoc_insertion_point(field_mutable:server.AuthenticateRequest.GameCenter.player_id)
  return player_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* AuthenticateRequest_GameCenter::release_player_id() {
  // @@protoc_insertion_point(field_release:server.AuthenticateRequest.GameCenter.player_id)
  
  return player_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void AuthenticateRequest_GameCenter::set_allocated_player_id(::std::string* player_id) {
  if (player_id != NULL) {
    
  } else {
    
  }
  player_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), player_id);
  // @@protoc_insertion_point(field_set_allocated:server.AuthenticateRequest.GameCenter.player_id)
}

// optional string bundle_id = 2;
void AuthenticateRequest_GameCenter::clear_bundle_id() {
  bundle_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& AuthenticateRequest_GameCenter::bundle_id() const {
  // @@protoc_insertion_point(field_get:server.AuthenticateRequest.GameCenter.bundle_id)
  return bundle_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void AuthenticateRequest_GameCenter::set_bundle_id(const ::std::string& value) {
  
  bundle_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:server.AuthenticateRequest.GameCenter.bundle_id)
}
void AuthenticateRequest_GameCenter::set_bundle_id(const char* value) {
  
  bundle_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:server.AuthenticateRequest.GameCenter.bundle_id)
}
void AuthenticateRequest_GameCenter::set_bundle_id(const char* value, size_t size) {
  
  bundle_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:server.AuthenticateRequest.GameCenter.bundle_id)
}
::std::string* AuthenticateRequest_GameCenter::mutable_bundle_id() {
  
  // @@protoc_insertion_point(field_mutable:server.AuthenticateRequest.GameCenter.bundle_id)
  return bundle_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* AuthenticateRequest_GameCenter::release_bundle_id() {
  // @@protoc_insertion_point(field_release:server.AuthenticateRequest.GameCenter.bundle_id)
  
  return bundle_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void AuthenticateRequest_GameCenter::set_allocated_bundle_id(::std::string* bundle_id) {
  if (bundle_id != NULL) {
    
  } else {
    
  }
  bundle_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), bundle_id);
  // @@protoc_insertion_point(field_set_allocated:server.AuthenticateRequest.GameCenter.bundle_id)
}

// optional int64 timestamp = 3;
void AuthenticateRequest_GameCenter::clear_timestamp() {
  timestamp_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 AuthenticateRequest_GameCenter::timestamp() const {
  // @@protoc_insertion_point(field_get:server.AuthenticateRequest.GameCenter.timestamp)
  return timestamp_;
}
void AuthenticateRequest_GameCenter::set_timestamp(::google::protobuf::int64 value) {
  
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:server.AuthenticateRequest.GameCenter.timestamp)
}

// optional string salt = 4;
void AuthenticateRequest_GameCenter::clear_salt() {
  salt_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& AuthenticateRequest_GameCenter::salt() const {
  // @@protoc_insertion_point(field_get:server.AuthenticateRequest.GameCenter.salt)
  return salt_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void AuthenticateRequest_GameCenter::set_salt(const ::std::string& value) {
  
  salt_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:server.AuthenticateRequest.GameCenter.salt)
}
void AuthenticateRequest_GameCenter::set_salt(const char* value) {
  
  salt_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:server.AuthenticateRequest.GameCenter.salt)
}
void AuthenticateRequest_GameCenter::set_salt(const char* value, size_t size) {
  
  salt_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:server.AuthenticateRequest.GameCenter.salt)
}
::std::string* AuthenticateRequest_GameCenter::mutable_salt() {
  
  // @@protoc_insertion_point(field_mutable:server.AuthenticateRequest.GameCenter.salt)
  return salt_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* AuthenticateRequest_GameCenter::release_salt() {
  // @@protoc_insertion_point(field_release:server.AuthenticateRequest.GameCenter.salt)
  
  return salt_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void AuthenticateRequest_GameCenter::set_allocated_salt(::std::string* salt) {
  if (salt != NULL) {
    
  } else {
    
  }
  salt_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), salt);
  // @@protoc_insertion_point(field_set_allocated:server.AuthenticateRequest.GameCenter.salt)
}

// optional string signature = 5;
void AuthenticateRequest_GameCenter::clear_signature() {
  signature_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& AuthenticateRequest_GameCenter::signature() const {
  // @@protoc_insertion_point(field_get:server.AuthenticateRequest.GameCenter.signature)
  return signature_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void AuthenticateRequest_GameCenter::set_signature(const ::std::string& value) {
  
  signature_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:server.AuthenticateRequest.GameCenter.signature)
}
void AuthenticateRequest_GameCenter::set_signature(const char* value) {
  
  signature_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:server.AuthenticateRequest.GameCenter.signature)
}
void AuthenticateRequest_GameCenter::set_signature(const char* value, size_t size) {
  
  signature_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:server.AuthenticateRequest.GameCenter.signature)
}
::std::string* AuthenticateRequest_GameCenter::mutable_signature() {
  
  // @@protoc_insertion_point(field_mutable:server.AuthenticateRequest.GameCenter.signature)
  return signature_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* AuthenticateRequest_GameCenter::release_signature() {
  // @@protoc_insertion_point(field_release:server.AuthenticateRequest.GameCenter.signature)
  
  return signature_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void AuthenticateRequest_GameCenter::set_allocated_signature(::std::string* signature) {
  if (signature != NULL) {
    
  } else {
    
  }
  signature_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), signature);
  // @@protoc_insertion_point(field_set_allocated:server.AuthenticateRequest.GameCenter.signature)
}

// optional string public_key_url = 6;
void AuthenticateRequest_GameCenter::clear_public_key_url() {
  public_key_url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& AuthenticateRequest_GameCenter::public_key_url() const {
  // @@protoc_insertion_point(field_get:server.AuthenticateRequest.GameCenter.public_key_url)
  return public_key_url_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void AuthenticateRequest_GameCenter::set_public_key_url(const ::std::string& value) {
  
  public_key_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:server.AuthenticateRequest.GameCenter.public_key_url)
}
void AuthenticateRequest_GameCenter::set_public_key_url(const char* value) {
  
  public_key_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:server.AuthenticateRequest.GameCenter.public_key_url)
}
void AuthenticateRequest_GameCenter::set_public_key_url(const char* value, size_t size) {
  
  public_key_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:server.AuthenticateRequest.GameCenter.public_key_url)
}
::std::string* AuthenticateRequest_GameCenter::mutable_public_key_url() {
  
  // @@protoc_insertion_point(field_mutable:server.AuthenticateRequest.GameCenter.public_key_url)
  return public_key_url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* AuthenticateRequest_GameCenter::release_public_key_url() {
  // @@protoc_insertion_point(field_release:server.AuthenticateRequest.GameCenter.public_key_url)
  
  return public_key_url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void AuthenticateRequest_GameCenter::set_allocated_public_key_url(::std::string* public_key_url) {
  if (public_key_url != NULL) {
    
  } else {
    
  }
  public_key_url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), public_key_url);
  // @@protoc_insertion_point(field_set_allocated:server.AuthenticateRequest.GameCenter.public_key_url)
}

inline const AuthenticateRequest_GameCenter* AuthenticateRequest_GameCenter::internal_default_instance() {
  return &AuthenticateRequest_GameCenter_default_instance_.get();
}
// -------------------------------------------------------------------

// AuthenticateRequest

// optional string collationId = 1;
void AuthenticateRequest::clear_collationid() {
  collationid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& AuthenticateRequest::collationid() const {
  // @@protoc_insertion_point(field_get:server.AuthenticateRequest.collationId)
  return collationid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void AuthenticateRequest::set_collationid(const ::std::string& value) {
  
  collationid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:server.AuthenticateRequest.collationId)
}
void AuthenticateRequest::set_collationid(const char* value) {
  
  collationid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:server.AuthenticateRequest.collationId)
}
void AuthenticateRequest::set_collationid(const char* value, size_t size) {
  
  collationid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:server.AuthenticateRequest.collationId)
}
::std::string* AuthenticateRequest::mutable_collationid() {
  
  // @@protoc_insertion_point(field_mutable:server.AuthenticateRequest.collationId)
  return collationid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* AuthenticateRequest::release_collationid() {
  // @@protoc_insertion_point(field_release:server.AuthenticateRequest.collationId)
  
  return collationid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void AuthenticateRequest::set_allocated_collationid(::std::string* collationid) {
  if (collationid != NULL) {
    
  } else {
    
  }
  collationid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), collationid);
  // @@protoc_insertion_point(field_set_allocated:server.AuthenticateRequest.collationId)
}

// optional .server.AuthenticateRequest.Email email = 2;
bool AuthenticateRequest::has_email() const {
  return payload_case() == kEmail;
}
void AuthenticateRequest::set_has_email() {
  _oneof_case_[0] = kEmail;
}
void AuthenticateRequest::clear_email() {
  if (has_email()) {
    delete payload_.email_;
    clear_has_payload();
  }
}
 const ::server::AuthenticateRequest_Email& AuthenticateRequest::email() const {
  // @@protoc_insertion_point(field_get:server.AuthenticateRequest.email)
  return has_email()
      ? *payload_.email_
      : ::server::AuthenticateRequest_Email::default_instance();
}
::server::AuthenticateRequest_Email* AuthenticateRequest::mutable_email() {
  if (!has_email()) {
    clear_payload();
    set_has_email();
    payload_.email_ = new ::server::AuthenticateRequest_Email;
  }
  // @@protoc_insertion_point(field_mutable:server.AuthenticateRequest.email)
  return payload_.email_;
}
::server::AuthenticateRequest_Email* AuthenticateRequest::release_email() {
  // @@protoc_insertion_point(field_release:server.AuthenticateRequest.email)
  if (has_email()) {
    clear_has_payload();
    ::server::AuthenticateRequest_Email* temp = payload_.email_;
    payload_.email_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void AuthenticateRequest::set_allocated_email(::server::AuthenticateRequest_Email* email) {
  clear_payload();
  if (email) {
    set_has_email();
    payload_.email_ = email;
  }
  // @@protoc_insertion_point(field_set_allocated:server.AuthenticateRequest.email)
}

// optional string facebook = 3;
bool AuthenticateRequest::has_facebook() const {
  return payload_case() == kFacebook;
}
void AuthenticateRequest::set_has_facebook() {
  _oneof_case_[0] = kFacebook;
}
void AuthenticateRequest::clear_facebook() {
  if (has_facebook()) {
    payload_.facebook_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_payload();
  }
}
const ::std::string& AuthenticateRequest::facebook() const {
  // @@protoc_insertion_point(field_get:server.AuthenticateRequest.facebook)
  if (has_facebook()) {
    return payload_.facebook_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
void AuthenticateRequest::set_facebook(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:server.AuthenticateRequest.facebook)
  if (!has_facebook()) {
    clear_payload();
    set_has_facebook();
    payload_.facebook_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  payload_.facebook_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:server.AuthenticateRequest.facebook)
}
void AuthenticateRequest::set_facebook(const char* value) {
  if (!has_facebook()) {
    clear_payload();
    set_has_facebook();
    payload_.facebook_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  payload_.facebook_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:server.AuthenticateRequest.facebook)
}
void AuthenticateRequest::set_facebook(const char* value, size_t size) {
  if (!has_facebook()) {
    clear_payload();
    set_has_facebook();
    payload_.facebook_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  payload_.facebook_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:server.AuthenticateRequest.facebook)
}
::std::string* AuthenticateRequest::mutable_facebook() {
  if (!has_facebook()) {
    clear_payload();
    set_has_facebook();
    payload_.facebook_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:server.AuthenticateRequest.facebook)
  return payload_.facebook_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* AuthenticateRequest::release_facebook() {
  // @@protoc_insertion_point(field_release:server.AuthenticateRequest.facebook)
  if (has_facebook()) {
    clear_has_payload();
    return payload_.facebook_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return NULL;
  }
}
void AuthenticateRequest::set_allocated_facebook(::std::string* facebook) {
  if (!has_facebook()) {
    payload_.facebook_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_payload();
  if (facebook != NULL) {
    set_has_facebook();
    payload_.facebook_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        facebook);
  }
  // @@protoc_insertion_point(field_set_allocated:server.AuthenticateRequest.facebook)
}

// optional string google = 4;
bool AuthenticateRequest::has_google() const {
  return payload_case() == kGoogle;
}
void AuthenticateRequest::set_has_google() {
  _oneof_case_[0] = kGoogle;
}
void AuthenticateRequest::clear_google() {
  if (has_google()) {
    payload_.google_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_payload();
  }
}
const ::std::string& AuthenticateRequest::google() const {
  // @@protoc_insertion_point(field_get:server.AuthenticateRequest.google)
  if (has_google()) {
    return payload_.google_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
void AuthenticateRequest::set_google(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:server.AuthenticateRequest.google)
  if (!has_google()) {
    clear_payload();
    set_has_google();
    payload_.google_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  payload_.google_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:server.AuthenticateRequest.google)
}
void AuthenticateRequest::set_google(const char* value) {
  if (!has_google()) {
    clear_payload();
    set_has_google();
    payload_.google_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  payload_.google_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:server.AuthenticateRequest.google)
}
void AuthenticateRequest::set_google(const char* value, size_t size) {
  if (!has_google()) {
    clear_payload();
    set_has_google();
    payload_.google_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  payload_.google_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:server.AuthenticateRequest.google)
}
::std::string* AuthenticateRequest::mutable_google() {
  if (!has_google()) {
    clear_payload();
    set_has_google();
    payload_.google_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:server.AuthenticateRequest.google)
  return payload_.google_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* AuthenticateRequest::release_google() {
  // @@protoc_insertion_point(field_release:server.AuthenticateRequest.google)
  if (has_google()) {
    clear_has_payload();
    return payload_.google_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return NULL;
  }
}
void AuthenticateRequest::set_allocated_google(::std::string* google) {
  if (!has_google()) {
    payload_.google_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_payload();
  if (google != NULL) {
    set_has_google();
    payload_.google_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        google);
  }
  // @@protoc_insertion_point(field_set_allocated:server.AuthenticateRequest.google)
}

// optional .server.AuthenticateRequest.GameCenter game_center = 5;
bool AuthenticateRequest::has_game_center() const {
  return payload_case() == kGameCenter;
}
void AuthenticateRequest::set_has_game_center() {
  _oneof_case_[0] = kGameCenter;
}
void AuthenticateRequest::clear_game_center() {
  if (has_game_center()) {
    delete payload_.game_center_;
    clear_has_payload();
  }
}
 const ::server::AuthenticateRequest_GameCenter& AuthenticateRequest::game_center() const {
  // @@protoc_insertion_point(field_get:server.AuthenticateRequest.game_center)
  return has_game_center()
      ? *payload_.game_center_
      : ::server::AuthenticateRequest_GameCenter::default_instance();
}
::server::AuthenticateRequest_GameCenter* AuthenticateRequest::mutable_game_center() {
  if (!has_game_center()) {
    clear_payload();
    set_has_game_center();
    payload_.game_center_ = new ::server::AuthenticateRequest_GameCenter;
  }
  // @@protoc_insertion_point(field_mutable:server.AuthenticateRequest.game_center)
  return payload_.game_center_;
}
::server::AuthenticateRequest_GameCenter* AuthenticateRequest::release_game_center() {
  // @@protoc_insertion_point(field_release:server.AuthenticateRequest.game_center)
  if (has_game_center()) {
    clear_has_payload();
    ::server::AuthenticateRequest_GameCenter* temp = payload_.game_center_;
    payload_.game_center_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void AuthenticateRequest::set_allocated_game_center(::server::AuthenticateRequest_GameCenter* game_center) {
  clear_payload();
  if (game_center) {
    set_has_game_center();
    payload_.game_center_ = game_center;
  }
  // @@protoc_insertion_point(field_set_allocated:server.AuthenticateRequest.game_center)
}

// optional string steam = 6;
bool AuthenticateRequest::has_steam() const {
  return payload_case() == kSteam;
}
void AuthenticateRequest::set_has_steam() {
  _oneof_case_[0] = kSteam;
}
void AuthenticateRequest::clear_steam() {
  if (has_steam()) {
    payload_.steam_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_payload();
  }
}
const ::std::string& AuthenticateRequest::steam() const {
  // @@protoc_insertion_point(field_get:server.AuthenticateRequest.steam)
  if (has_steam()) {
    return payload_.steam_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
void AuthenticateRequest::set_steam(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:server.AuthenticateRequest.steam)
  if (!has_steam()) {
    clear_payload();
    set_has_steam();
    payload_.steam_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  payload_.steam_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:server.AuthenticateRequest.steam)
}
void AuthenticateRequest::set_steam(const char* value) {
  if (!has_steam()) {
    clear_payload();
    set_has_steam();
    payload_.steam_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  payload_.steam_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:server.AuthenticateRequest.steam)
}
void AuthenticateRequest::set_steam(const char* value, size_t size) {
  if (!has_steam()) {
    clear_payload();
    set_has_steam();
    payload_.steam_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  payload_.steam_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:server.AuthenticateRequest.steam)
}
::std::string* AuthenticateRequest::mutable_steam() {
  if (!has_steam()) {
    clear_payload();
    set_has_steam();
    payload_.steam_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:server.AuthenticateRequest.steam)
  return payload_.steam_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* AuthenticateRequest::release_steam() {
  // @@protoc_insertion_point(field_release:server.AuthenticateRequest.steam)
  if (has_steam()) {
    clear_has_payload();
    return payload_.steam_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return NULL;
  }
}
void AuthenticateRequest::set_allocated_steam(::std::string* steam) {
  if (!has_steam()) {
    payload_.steam_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_payload();
  if (steam != NULL) {
    set_has_steam();
    payload_.steam_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        steam);
  }
  // @@protoc_insertion_point(field_set_allocated:server.AuthenticateRequest.steam)
}

// optional string device = 7;
bool AuthenticateRequest::has_device() const {
  return payload_case() == kDevice;
}
void AuthenticateRequest::set_has_device() {
  _oneof_case_[0] = kDevice;
}
void AuthenticateRequest::clear_device() {
  if (has_device()) {
    payload_.device_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_payload();
  }
}
const ::std::string& AuthenticateRequest::device() const {
  // @@protoc_insertion_point(field_get:server.AuthenticateRequest.device)
  if (has_device()) {
    return payload_.device_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
void AuthenticateRequest::set_device(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:server.AuthenticateRequest.device)
  if (!has_device()) {
    clear_payload();
    set_has_device();
    payload_.device_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  payload_.device_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:server.AuthenticateRequest.device)
}
void AuthenticateRequest::set_device(const char* value) {
  if (!has_device()) {
    clear_payload();
    set_has_device();
    payload_.device_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  payload_.device_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:server.AuthenticateRequest.device)
}
void AuthenticateRequest::set_device(const char* value, size_t size) {
  if (!has_device()) {
    clear_payload();
    set_has_device();
    payload_.device_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  payload_.device_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:server.AuthenticateRequest.device)
}
::std::string* AuthenticateRequest::mutable_device() {
  if (!has_device()) {
    clear_payload();
    set_has_device();
    payload_.device_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:server.AuthenticateRequest.device)
  return payload_.device_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* AuthenticateRequest::release_device() {
  // @@protoc_insertion_point(field_release:server.AuthenticateRequest.device)
  if (has_device()) {
    clear_has_payload();
    return payload_.device_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return NULL;
  }
}
void AuthenticateRequest::set_allocated_device(::std::string* device) {
  if (!has_device()) {
    payload_.device_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_payload();
  if (device != NULL) {
    set_has_device();
    payload_.device_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        device);
  }
  // @@protoc_insertion_point(field_set_allocated:server.AuthenticateRequest.device)
}

// optional string custom = 8;
bool AuthenticateRequest::has_custom() const {
  return payload_case() == kCustom;
}
void AuthenticateRequest::set_has_custom() {
  _oneof_case_[0] = kCustom;
}
void AuthenticateRequest::clear_custom() {
  if (has_custom()) {
    payload_.custom_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_payload();
  }
}
const ::std::string& AuthenticateRequest::custom() const {
  // @@protoc_insertion_point(field_get:server.AuthenticateRequest.custom)
  if (has_custom()) {
    return payload_.custom_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
void AuthenticateRequest::set_custom(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:server.AuthenticateRequest.custom)
  if (!has_custom()) {
    clear_payload();
    set_has_custom();
    payload_.custom_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  payload_.custom_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:server.AuthenticateRequest.custom)
}
void AuthenticateRequest::set_custom(const char* value) {
  if (!has_custom()) {
    clear_payload();
    set_has_custom();
    payload_.custom_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  payload_.custom_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:server.AuthenticateRequest.custom)
}
void AuthenticateRequest::set_custom(const char* value, size_t size) {
  if (!has_custom()) {
    clear_payload();
    set_has_custom();
    payload_.custom_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  payload_.custom_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:server.AuthenticateRequest.custom)
}
::std::string* AuthenticateRequest::mutable_custom() {
  if (!has_custom()) {
    clear_payload();
    set_has_custom();
    payload_.custom_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:server.AuthenticateRequest.custom)
  return payload_.custom_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* AuthenticateRequest::release_custom() {
  // @@protoc_insertion_point(field_release:server.AuthenticateRequest.custom)
  if (has_custom()) {
    clear_has_payload();
    return payload_.custom_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return NULL;
  }
}
void AuthenticateRequest::set_allocated_custom(::std::string* custom) {
  if (!has_custom()) {
    payload_.custom_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_payload();
  if (custom != NULL) {
    set_has_custom();
    payload_.custom_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        custom);
  }
  // @@protoc_insertion_point(field_set_allocated:server.AuthenticateRequest.custom)
}

bool AuthenticateRequest::has_payload() const {
  return payload_case() != PAYLOAD_NOT_SET;
}
void AuthenticateRequest::clear_has_payload() {
  _oneof_case_[0] = PAYLOAD_NOT_SET;
}
AuthenticateRequest::PayloadCase AuthenticateRequest::payload_case() const {
  return AuthenticateRequest::PayloadCase(_oneof_case_[0]);
}
inline const AuthenticateRequest* AuthenticateRequest::internal_default_instance() {
  return &AuthenticateRequest_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AuthenticateResponse_Session::kTokenFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AuthenticateResponse_Session::AuthenticateResponse_Session()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_api_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:server.AuthenticateResponse.Session)
}

void AuthenticateResponse_Session::InitAsDefaultInstance() {
}

AuthenticateResponse_Session::AuthenticateResponse_Session(const AuthenticateResponse_Session& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:server.AuthenticateResponse.Session)
}

void AuthenticateResponse_Session::SharedCtor() {
  token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

AuthenticateResponse_Session::~AuthenticateResponse_Session() {
  // @@protoc_insertion_point(destructor:server.AuthenticateResponse.Session)
  SharedDtor();
}

void AuthenticateResponse_Session::SharedDtor() {
  token_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void AuthenticateResponse_Session::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AuthenticateResponse_Session::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AuthenticateResponse_Session_descriptor_;
}

const AuthenticateResponse_Session& AuthenticateResponse_Session::default_instance() {
  protobuf_InitDefaults_api_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<AuthenticateResponse_Session> AuthenticateResponse_Session_default_instance_;

AuthenticateResponse_Session* AuthenticateResponse_Session::New(::google::protobuf::Arena* arena) const {
  AuthenticateResponse_Session* n = new AuthenticateResponse_Session;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AuthenticateResponse_Session::Clear() {
// @@protoc_insertion_point(message_clear_start:server.AuthenticateResponse.Session)
  token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool AuthenticateResponse_Session::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:server.AuthenticateResponse.Session)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string token = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_token()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->token().data(), this->token().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "server.AuthenticateResponse.Session.token"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:server.AuthenticateResponse.Session)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:server.AuthenticateResponse.Session)
  return false;
#undef DO_
}

void AuthenticateResponse_Session::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:server.AuthenticateResponse.Session)
  // optional string token = 1;
  if (this->token().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->token().data(), this->token().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server.AuthenticateResponse.Session.token");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->token(), output);
  }

  // @@protoc_insertion_point(serialize_end:server.AuthenticateResponse.Session)
}

::google::protobuf::uint8* AuthenticateResponse_Session::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:server.AuthenticateResponse.Session)
  // optional string token = 1;
  if (this->token().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->token().data(), this->token().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server.AuthenticateResponse.Session.token");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->token(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:server.AuthenticateResponse.Session)
  return target;
}

size_t AuthenticateResponse_Session::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:server.AuthenticateResponse.Session)
  size_t total_size = 0;

  // optional string token = 1;
  if (this->token().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->token());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AuthenticateResponse_Session::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:server.AuthenticateResponse.Session)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const AuthenticateResponse_Session* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AuthenticateResponse_Session>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:server.AuthenticateResponse.Session)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:server.AuthenticateResponse.Session)
    UnsafeMergeFrom(*source);
  }
}

void AuthenticateResponse_Session::MergeFrom(const AuthenticateResponse_Session& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:server.AuthenticateResponse.Session)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void AuthenticateResponse_Session::UnsafeMergeFrom(const AuthenticateResponse_Session& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.token().size() > 0) {

    token_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.token_);
  }
}

void AuthenticateResponse_Session::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:server.AuthenticateResponse.Session)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AuthenticateResponse_Session::CopyFrom(const AuthenticateResponse_Session& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:server.AuthenticateResponse.Session)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool AuthenticateResponse_Session::IsInitialized() const {

  return true;
}

void AuthenticateResponse_Session::Swap(AuthenticateResponse_Session* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AuthenticateResponse_Session::InternalSwap(AuthenticateResponse_Session* other) {
  token_.Swap(&other->token_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AuthenticateResponse_Session::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AuthenticateResponse_Session_descriptor_;
  metadata.reflection = AuthenticateResponse_Session_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AuthenticateResponse_Error::kReasonFieldNumber;
const int AuthenticateResponse_Error::kRequestFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AuthenticateResponse_Error::AuthenticateResponse_Error()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_api_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:server.AuthenticateResponse.Error)
}

void AuthenticateResponse_Error::InitAsDefaultInstance() {
  request_ = const_cast< ::server::AuthenticateRequest*>(
      ::server::AuthenticateRequest::internal_default_instance());
}

AuthenticateResponse_Error::AuthenticateResponse_Error(const AuthenticateResponse_Error& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:server.AuthenticateResponse.Error)
}

void AuthenticateResponse_Error::SharedCtor() {
  reason_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  request_ = NULL;
  _cached_size_ = 0;
}

AuthenticateResponse_Error::~AuthenticateResponse_Error() {
  // @@protoc_insertion_point(destructor:server.AuthenticateResponse.Error)
  SharedDtor();
}

void AuthenticateResponse_Error::SharedDtor() {
  reason_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != &AuthenticateResponse_Error_default_instance_.get()) {
    delete request_;
  }
}

void AuthenticateResponse_Error::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AuthenticateResponse_Error::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AuthenticateResponse_Error_descriptor_;
}

const AuthenticateResponse_Error& AuthenticateResponse_Error::default_instance() {
  protobuf_InitDefaults_api_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<AuthenticateResponse_Error> AuthenticateResponse_Error_default_instance_;

AuthenticateResponse_Error* AuthenticateResponse_Error::New(::google::protobuf::Arena* arena) const {
  AuthenticateResponse_Error* n = new AuthenticateResponse_Error;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AuthenticateResponse_Error::Clear() {
// @@protoc_insertion_point(message_clear_start:server.AuthenticateResponse.Error)
  reason_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && request_ != NULL) delete request_;
  request_ = NULL;
}

bool AuthenticateResponse_Error::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:server.AuthenticateResponse.Error)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string reason = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_reason()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->reason().data(), this->reason().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "server.AuthenticateResponse.Error.reason"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_request;
        break;
      }

      // optional .server.AuthenticateRequest request = 2;
      case 2: {
        if (tag == 18) {
         parse_request:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_request()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:server.AuthenticateResponse.Error)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:server.AuthenticateResponse.Error)
  return false;
#undef DO_
}

void AuthenticateResponse_Error::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:server.AuthenticateResponse.Error)
  // optional string reason = 1;
  if (this->reason().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->reason().data(), this->reason().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server.AuthenticateResponse.Error.reason");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->reason(), output);
  }

  // optional .server.AuthenticateRequest request = 2;
  if (this->has_request()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->request_, output);
  }

  // @@protoc_insertion_point(serialize_end:server.AuthenticateResponse.Error)
}

::google::protobuf::uint8* AuthenticateResponse_Error::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:server.AuthenticateResponse.Error)
  // optional string reason = 1;
  if (this->reason().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->reason().data(), this->reason().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server.AuthenticateResponse.Error.reason");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->reason(), target);
  }

  // optional .server.AuthenticateRequest request = 2;
  if (this->has_request()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->request_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:server.AuthenticateResponse.Error)
  return target;
}

size_t AuthenticateResponse_Error::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:server.AuthenticateResponse.Error)
  size_t total_size = 0;

  // optional string reason = 1;
  if (this->reason().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->reason());
  }

  // optional .server.AuthenticateRequest request = 2;
  if (this->has_request()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->request_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AuthenticateResponse_Error::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:server.AuthenticateResponse.Error)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const AuthenticateResponse_Error* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AuthenticateResponse_Error>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:server.AuthenticateResponse.Error)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:server.AuthenticateResponse.Error)
    UnsafeMergeFrom(*source);
  }
}

void AuthenticateResponse_Error::MergeFrom(const AuthenticateResponse_Error& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:server.AuthenticateResponse.Error)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void AuthenticateResponse_Error::UnsafeMergeFrom(const AuthenticateResponse_Error& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.reason().size() > 0) {

    reason_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.reason_);
  }
  if (from.has_request()) {
    mutable_request()->::server::AuthenticateRequest::MergeFrom(from.request());
  }
}

void AuthenticateResponse_Error::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:server.AuthenticateResponse.Error)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AuthenticateResponse_Error::CopyFrom(const AuthenticateResponse_Error& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:server.AuthenticateResponse.Error)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool AuthenticateResponse_Error::IsInitialized() const {

  return true;
}

void AuthenticateResponse_Error::Swap(AuthenticateResponse_Error* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AuthenticateResponse_Error::InternalSwap(AuthenticateResponse_Error* other) {
  reason_.Swap(&other->reason_);
  std::swap(request_, other->request_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AuthenticateResponse_Error::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AuthenticateResponse_Error_descriptor_;
  metadata.reflection = AuthenticateResponse_Error_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AuthenticateResponse::kCollationIdFieldNumber;
const int AuthenticateResponse::kSessionFieldNumber;
const int AuthenticateResponse::kErrorFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AuthenticateResponse::AuthenticateResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_api_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:server.AuthenticateResponse)
}

void AuthenticateResponse::InitAsDefaultInstance() {
  AuthenticateResponse_default_oneof_instance_->session_ = const_cast< ::server::AuthenticateResponse_Session*>(
      ::server::AuthenticateResponse_Session::internal_default_instance());
  AuthenticateResponse_default_oneof_instance_->error_ = const_cast< ::server::AuthenticateResponse_Error*>(
      ::server::AuthenticateResponse_Error::internal_default_instance());
}

AuthenticateResponse::AuthenticateResponse(const AuthenticateResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:server.AuthenticateResponse)
}

void AuthenticateResponse::SharedCtor() {
  collation_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_payload();
  _cached_size_ = 0;
}

AuthenticateResponse::~AuthenticateResponse() {
  // @@protoc_insertion_point(destructor:server.AuthenticateResponse)
  SharedDtor();
}

void AuthenticateResponse::SharedDtor() {
  collation_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (has_payload()) {
    clear_payload();
  }
}

void AuthenticateResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AuthenticateResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AuthenticateResponse_descriptor_;
}

const AuthenticateResponse& AuthenticateResponse::default_instance() {
  protobuf_InitDefaults_api_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<AuthenticateResponse> AuthenticateResponse_default_instance_;

AuthenticateResponse* AuthenticateResponse::New(::google::protobuf::Arena* arena) const {
  AuthenticateResponse* n = new AuthenticateResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AuthenticateResponse::clear_payload() {
// @@protoc_insertion_point(one_of_clear_start:server.AuthenticateResponse)
  switch (payload_case()) {
    case kSession: {
      delete payload_.session_;
      break;
    }
    case kError: {
      delete payload_.error_;
      break;
    }
    case PAYLOAD_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = PAYLOAD_NOT_SET;
}


void AuthenticateResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:server.AuthenticateResponse)
  collation_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_payload();
}

bool AuthenticateResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:server.AuthenticateResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string collation_id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_collation_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->collation_id().data(), this->collation_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "server.AuthenticateResponse.collation_id"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_session;
        break;
      }

      // optional .server.AuthenticateResponse.Session session = 2;
      case 2: {
        if (tag == 18) {
         parse_session:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_session()));
        } else {
          goto handle_unusual;
        }
        goto after_error;
        break;
      }

      // optional .server.AuthenticateResponse.Error error = 3;
      case 3: {
        if (tag == 26) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_error()));
        } else {
          goto handle_unusual;
        }
       after_error:
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:server.AuthenticateResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:server.AuthenticateResponse)
  return false;
#undef DO_
}

void AuthenticateResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:server.AuthenticateResponse)
  // optional string collation_id = 1;
  if (this->collation_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->collation_id().data(), this->collation_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server.AuthenticateResponse.collation_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->collation_id(), output);
  }

  // optional .server.AuthenticateResponse.Session session = 2;
  if (has_session()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *payload_.session_, output);
  }

  // optional .server.AuthenticateResponse.Error error = 3;
  if (has_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *payload_.error_, output);
  }

  // @@protoc_insertion_point(serialize_end:server.AuthenticateResponse)
}

::google::protobuf::uint8* AuthenticateResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:server.AuthenticateResponse)
  // optional string collation_id = 1;
  if (this->collation_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->collation_id().data(), this->collation_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server.AuthenticateResponse.collation_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->collation_id(), target);
  }

  // optional .server.AuthenticateResponse.Session session = 2;
  if (has_session()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *payload_.session_, false, target);
  }

  // optional .server.AuthenticateResponse.Error error = 3;
  if (has_error()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *payload_.error_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:server.AuthenticateResponse)
  return target;
}

size_t AuthenticateResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:server.AuthenticateResponse)
  size_t total_size = 0;

  // optional string collation_id = 1;
  if (this->collation_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->collation_id());
  }

  switch (payload_case()) {
    // optional .server.AuthenticateResponse.Session session = 2;
    case kSession: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *payload_.session_);
      break;
    }
    // optional .server.AuthenticateResponse.Error error = 3;
    case kError: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *payload_.error_);
      break;
    }
    case PAYLOAD_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AuthenticateResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:server.AuthenticateResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const AuthenticateResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AuthenticateResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:server.AuthenticateResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:server.AuthenticateResponse)
    UnsafeMergeFrom(*source);
  }
}

void AuthenticateResponse::MergeFrom(const AuthenticateResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:server.AuthenticateResponse)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void AuthenticateResponse::UnsafeMergeFrom(const AuthenticateResponse& from) {
  GOOGLE_DCHECK(&from != this);
  switch (from.payload_case()) {
    case kSession: {
      mutable_session()->::server::AuthenticateResponse_Session::MergeFrom(from.session());
      break;
    }
    case kError: {
      mutable_error()->::server::AuthenticateResponse_Error::MergeFrom(from.error());
      break;
    }
    case PAYLOAD_NOT_SET: {
      break;
    }
  }
  if (from.collation_id().size() > 0) {

    collation_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.collation_id_);
  }
}

void AuthenticateResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:server.AuthenticateResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AuthenticateResponse::CopyFrom(const AuthenticateResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:server.AuthenticateResponse)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool AuthenticateResponse::IsInitialized() const {

  return true;
}

void AuthenticateResponse::Swap(AuthenticateResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AuthenticateResponse::InternalSwap(AuthenticateResponse* other) {
  collation_id_.Swap(&other->collation_id_);
  std::swap(payload_, other->payload_);
  std::swap(_oneof_case_[0], other->_oneof_case_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AuthenticateResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AuthenticateResponse_descriptor_;
  metadata.reflection = AuthenticateResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// AuthenticateResponse_Session

// optional string token = 1;
void AuthenticateResponse_Session::clear_token() {
  token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& AuthenticateResponse_Session::token() const {
  // @@protoc_insertion_point(field_get:server.AuthenticateResponse.Session.token)
  return token_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void AuthenticateResponse_Session::set_token(const ::std::string& value) {
  
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:server.AuthenticateResponse.Session.token)
}
void AuthenticateResponse_Session::set_token(const char* value) {
  
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:server.AuthenticateResponse.Session.token)
}
void AuthenticateResponse_Session::set_token(const char* value, size_t size) {
  
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:server.AuthenticateResponse.Session.token)
}
::std::string* AuthenticateResponse_Session::mutable_token() {
  
  // @@protoc_insertion_point(field_mutable:server.AuthenticateResponse.Session.token)
  return token_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* AuthenticateResponse_Session::release_token() {
  // @@protoc_insertion_point(field_release:server.AuthenticateResponse.Session.token)
  
  return token_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void AuthenticateResponse_Session::set_allocated_token(::std::string* token) {
  if (token != NULL) {
    
  } else {
    
  }
  token_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), token);
  // @@protoc_insertion_point(field_set_allocated:server.AuthenticateResponse.Session.token)
}

inline const AuthenticateResponse_Session* AuthenticateResponse_Session::internal_default_instance() {
  return &AuthenticateResponse_Session_default_instance_.get();
}
// -------------------------------------------------------------------

// AuthenticateResponse_Error

// optional string reason = 1;
void AuthenticateResponse_Error::clear_reason() {
  reason_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& AuthenticateResponse_Error::reason() const {
  // @@protoc_insertion_point(field_get:server.AuthenticateResponse.Error.reason)
  return reason_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void AuthenticateResponse_Error::set_reason(const ::std::string& value) {
  
  reason_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:server.AuthenticateResponse.Error.reason)
}
void AuthenticateResponse_Error::set_reason(const char* value) {
  
  reason_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:server.AuthenticateResponse.Error.reason)
}
void AuthenticateResponse_Error::set_reason(const char* value, size_t size) {
  
  reason_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:server.AuthenticateResponse.Error.reason)
}
::std::string* AuthenticateResponse_Error::mutable_reason() {
  
  // @@protoc_insertion_point(field_mutable:server.AuthenticateResponse.Error.reason)
  return reason_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* AuthenticateResponse_Error::release_reason() {
  // @@protoc_insertion_point(field_release:server.AuthenticateResponse.Error.reason)
  
  return reason_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void AuthenticateResponse_Error::set_allocated_reason(::std::string* reason) {
  if (reason != NULL) {
    
  } else {
    
  }
  reason_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), reason);
  // @@protoc_insertion_point(field_set_allocated:server.AuthenticateResponse.Error.reason)
}

// optional .server.AuthenticateRequest request = 2;
bool AuthenticateResponse_Error::has_request() const {
  return this != internal_default_instance() && request_ != NULL;
}
void AuthenticateResponse_Error::clear_request() {
  if (GetArenaNoVirtual() == NULL && request_ != NULL) delete request_;
  request_ = NULL;
}
const ::server::AuthenticateRequest& AuthenticateResponse_Error::request() const {
  // @@protoc_insertion_point(field_get:server.AuthenticateResponse.Error.request)
  return request_ != NULL ? *request_
                         : *::server::AuthenticateRequest::internal_default_instance();
}
::server::AuthenticateRequest* AuthenticateResponse_Error::mutable_request() {
  
  if (request_ == NULL) {
    request_ = new ::server::AuthenticateRequest;
  }
  // @@protoc_insertion_point(field_mutable:server.AuthenticateResponse.Error.request)
  return request_;
}
::server::AuthenticateRequest* AuthenticateResponse_Error::release_request() {
  // @@protoc_insertion_point(field_release:server.AuthenticateResponse.Error.request)
  
  ::server::AuthenticateRequest* temp = request_;
  request_ = NULL;
  return temp;
}
void AuthenticateResponse_Error::set_allocated_request(::server::AuthenticateRequest* request) {
  delete request_;
  request_ = request;
  if (request) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:server.AuthenticateResponse.Error.request)
}

inline const AuthenticateResponse_Error* AuthenticateResponse_Error::internal_default_instance() {
  return &AuthenticateResponse_Error_default_instance_.get();
}
// -------------------------------------------------------------------

// AuthenticateResponse

// optional string collation_id = 1;
void AuthenticateResponse::clear_collation_id() {
  collation_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& AuthenticateResponse::collation_id() const {
  // @@protoc_insertion_point(field_get:server.AuthenticateResponse.collation_id)
  return collation_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void AuthenticateResponse::set_collation_id(const ::std::string& value) {
  
  collation_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:server.AuthenticateResponse.collation_id)
}
void AuthenticateResponse::set_collation_id(const char* value) {
  
  collation_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:server.AuthenticateResponse.collation_id)
}
void AuthenticateResponse::set_collation_id(const char* value, size_t size) {
  
  collation_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:server.AuthenticateResponse.collation_id)
}
::std::string* AuthenticateResponse::mutable_collation_id() {
  
  // @@protoc_insertion_point(field_mutable:server.AuthenticateResponse.collation_id)
  return collation_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* AuthenticateResponse::release_collation_id() {
  // @@protoc_insertion_point(field_release:server.AuthenticateResponse.collation_id)
  
  return collation_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void AuthenticateResponse::set_allocated_collation_id(::std::string* collation_id) {
  if (collation_id != NULL) {
    
  } else {
    
  }
  collation_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), collation_id);
  // @@protoc_insertion_point(field_set_allocated:server.AuthenticateResponse.collation_id)
}

// optional .server.AuthenticateResponse.Session session = 2;
bool AuthenticateResponse::has_session() const {
  return payload_case() == kSession;
}
void AuthenticateResponse::set_has_session() {
  _oneof_case_[0] = kSession;
}
void AuthenticateResponse::clear_session() {
  if (has_session()) {
    delete payload_.session_;
    clear_has_payload();
  }
}
 const ::server::AuthenticateResponse_Session& AuthenticateResponse::session() const {
  // @@protoc_insertion_point(field_get:server.AuthenticateResponse.session)
  return has_session()
      ? *payload_.session_
      : ::server::AuthenticateResponse_Session::default_instance();
}
::server::AuthenticateResponse_Session* AuthenticateResponse::mutable_session() {
  if (!has_session()) {
    clear_payload();
    set_has_session();
    payload_.session_ = new ::server::AuthenticateResponse_Session;
  }
  // @@protoc_insertion_point(field_mutable:server.AuthenticateResponse.session)
  return payload_.session_;
}
::server::AuthenticateResponse_Session* AuthenticateResponse::release_session() {
  // @@protoc_insertion_point(field_release:server.AuthenticateResponse.session)
  if (has_session()) {
    clear_has_payload();
    ::server::AuthenticateResponse_Session* temp = payload_.session_;
    payload_.session_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void AuthenticateResponse::set_allocated_session(::server::AuthenticateResponse_Session* session) {
  clear_payload();
  if (session) {
    set_has_session();
    payload_.session_ = session;
  }
  // @@protoc_insertion_point(field_set_allocated:server.AuthenticateResponse.session)
}

// optional .server.AuthenticateResponse.Error error = 3;
bool AuthenticateResponse::has_error() const {
  return payload_case() == kError;
}
void AuthenticateResponse::set_has_error() {
  _oneof_case_[0] = kError;
}
void AuthenticateResponse::clear_error() {
  if (has_error()) {
    delete payload_.error_;
    clear_has_payload();
  }
}
 const ::server::AuthenticateResponse_Error& AuthenticateResponse::error() const {
  // @@protoc_insertion_point(field_get:server.AuthenticateResponse.error)
  return has_error()
      ? *payload_.error_
      : ::server::AuthenticateResponse_Error::default_instance();
}
::server::AuthenticateResponse_Error* AuthenticateResponse::mutable_error() {
  if (!has_error()) {
    clear_payload();
    set_has_error();
    payload_.error_ = new ::server::AuthenticateResponse_Error;
  }
  // @@protoc_insertion_point(field_mutable:server.AuthenticateResponse.error)
  return payload_.error_;
}
::server::AuthenticateResponse_Error* AuthenticateResponse::release_error() {
  // @@protoc_insertion_point(field_release:server.AuthenticateResponse.error)
  if (has_error()) {
    clear_has_payload();
    ::server::AuthenticateResponse_Error* temp = payload_.error_;
    payload_.error_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void AuthenticateResponse::set_allocated_error(::server::AuthenticateResponse_Error* error) {
  clear_payload();
  if (error) {
    set_has_error();
    payload_.error_ = error;
  }
  // @@protoc_insertion_point(field_set_allocated:server.AuthenticateResponse.error)
}

bool AuthenticateResponse::has_payload() const {
  return payload_case() != PAYLOAD_NOT_SET;
}
void AuthenticateResponse::clear_has_payload() {
  _oneof_case_[0] = PAYLOAD_NOT_SET;
}
AuthenticateResponse::PayloadCase AuthenticateResponse::payload_case() const {
  return AuthenticateResponse::PayloadCase(_oneof_case_[0]);
}
inline const AuthenticateResponse* AuthenticateResponse::internal_default_instance() {
  return &AuthenticateResponse_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Envelope::kCollationIdFieldNumber;
const int Envelope::kErrorFieldNumber;
const int Envelope::kHeartbeatFieldNumber;
const int Envelope::kLogoutFieldNumber;
const int Envelope::kLinkFieldNumber;
const int Envelope::kUnlinkFieldNumber;
const int Envelope::kSelfFetchFieldNumber;
const int Envelope::kSelfUpdateFieldNumber;
const int Envelope::kUsersFetchFieldNumber;
const int Envelope::kSelfFieldNumber;
const int Envelope::kUsersFieldNumber;
const int Envelope::kFriendAddFieldNumber;
const int Envelope::kFriendRemoveFieldNumber;
const int Envelope::kFriendBlockFieldNumber;
const int Envelope::kFriendsListFieldNumber;
const int Envelope::kFriendsFieldNumber;
const int Envelope::kGroupCreateFieldNumber;
const int Envelope::kGroupUpdateFieldNumber;
const int Envelope::kGroupRemoveFieldNumber;
const int Envelope::kGroupsFetchFieldNumber;
const int Envelope::kGroupsListFieldNumber;
const int Envelope::kGroupsSelfListFieldNumber;
const int Envelope::kGroupUsersListFieldNumber;
const int Envelope::kGroupJoinFieldNumber;
const int Envelope::kGroupLeaveFieldNumber;
const int Envelope::kGroupUserAddFieldNumber;
const int Envelope::kGroupUserKickFieldNumber;
const int Envelope::kGroupUserPromoteFieldNumber;
const int Envelope::kGroupFieldNumber;
const int Envelope::kGroupsFieldNumber;
const int Envelope::kGroupUsersFieldNumber;
const int Envelope::kTopicJoinFieldNumber;
const int Envelope::kTopicLeaveFieldNumber;
const int Envelope::kTopicMessageSendFieldNumber;
const int Envelope::kTopicMessagesListFieldNumber;
const int Envelope::kTopicFieldNumber;
const int Envelope::kTopicMessageAckFieldNumber;
const int Envelope::kTopicMessageFieldNumber;
const int Envelope::kTopicMessagesFieldNumber;
const int Envelope::kTopicPresenceFieldNumber;
const int Envelope::kMatchCreateFieldNumber;
const int Envelope::kMatchJoinFieldNumber;
const int Envelope::kMatchLeaveFieldNumber;
const int Envelope::kMatchDataSendFieldNumber;
const int Envelope::kMatchFieldNumber;
const int Envelope::kMatchDataFieldNumber;
const int Envelope::kMatchPresenceFieldNumber;
const int Envelope::kStorageFetchFieldNumber;
const int Envelope::kStorageWriteFieldNumber;
const int Envelope::kStorageRemoveFieldNumber;
const int Envelope::kStorageDataFieldNumber;
const int Envelope::kStorageKeyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Envelope::Envelope()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_api_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:server.Envelope)
}

void Envelope::InitAsDefaultInstance() {
  Envelope_default_oneof_instance_->error_ = const_cast< ::server::Error*>(
      ::server::Error::internal_default_instance());
  Envelope_default_oneof_instance_->heartbeat_ = const_cast< ::server::Heartbeat*>(
      ::server::Heartbeat::internal_default_instance());
  Envelope_default_oneof_instance_->logout_ = const_cast< ::server::Logout*>(
      ::server::Logout::internal_default_instance());
  Envelope_default_oneof_instance_->link_ = const_cast< ::server::TLink*>(
      ::server::TLink::internal_default_instance());
  Envelope_default_oneof_instance_->unlink_ = const_cast< ::server::TUnlink*>(
      ::server::TUnlink::internal_default_instance());
  Envelope_default_oneof_instance_->self_fetch_ = const_cast< ::server::TSelfFetch*>(
      ::server::TSelfFetch::internal_default_instance());
  Envelope_default_oneof_instance_->self_update_ = const_cast< ::server::TSelfUpdate*>(
      ::server::TSelfUpdate::internal_default_instance());
  Envelope_default_oneof_instance_->users_fetch_ = const_cast< ::server::TUsersFetch*>(
      ::server::TUsersFetch::internal_default_instance());
  Envelope_default_oneof_instance_->self_ = const_cast< ::server::TSelf*>(
      ::server::TSelf::internal_default_instance());
  Envelope_default_oneof_instance_->users_ = const_cast< ::server::TUsers*>(
      ::server::TUsers::internal_default_instance());
  Envelope_default_oneof_instance_->friend_add_ = const_cast< ::server::TFriendAdd*>(
      ::server::TFriendAdd::internal_default_instance());
  Envelope_default_oneof_instance_->friend_remove_ = const_cast< ::server::TFriendRemove*>(
      ::server::TFriendRemove::internal_default_instance());
  Envelope_default_oneof_instance_->friend_block_ = const_cast< ::server::TFriendBlock*>(
      ::server::TFriendBlock::internal_default_instance());
  Envelope_default_oneof_instance_->friends_list_ = const_cast< ::server::TFriendsList*>(
      ::server::TFriendsList::internal_default_instance());
  Envelope_default_oneof_instance_->friends_ = const_cast< ::server::TFriends*>(
      ::server::TFriends::internal_default_instance());
  Envelope_default_oneof_instance_->group_create_ = const_cast< ::server::TGroupCreate*>(
      ::server::TGroupCreate::internal_default_instance());
  Envelope_default_oneof_instance_->group_update_ = const_cast< ::server::TGroupUpdate*>(
      ::server::TGroupUpdate::internal_default_instance());
  Envelope_default_oneof_instance_->group_remove_ = const_cast< ::server::TGroupRemove*>(
      ::server::TGroupRemove::internal_default_instance());
  Envelope_default_oneof_instance_->groups_fetch_ = const_cast< ::server::TGroupsFetch*>(
      ::server::TGroupsFetch::internal_default_instance());
  Envelope_default_oneof_instance_->groups_list_ = const_cast< ::server::TGroupsList*>(
      ::server::TGroupsList::internal_default_instance());
  Envelope_default_oneof_instance_->groups_self_list_ = const_cast< ::server::TGroupsSelfList*>(
      ::server::TGroupsSelfList::internal_default_instance());
  Envelope_default_oneof_instance_->group_users_list_ = const_cast< ::server::TGroupUsersList*>(
      ::server::TGroupUsersList::internal_default_instance());
  Envelope_default_oneof_instance_->group_join_ = const_cast< ::server::TGroupJoin*>(
      ::server::TGroupJoin::internal_default_instance());
  Envelope_default_oneof_instance_->group_leave_ = const_cast< ::server::TGroupLeave*>(
      ::server::TGroupLeave::internal_default_instance());
  Envelope_default_oneof_instance_->group_user_add_ = const_cast< ::server::TGroupUserAdd*>(
      ::server::TGroupUserAdd::internal_default_instance());
  Envelope_default_oneof_instance_->group_user_kick_ = const_cast< ::server::TGroupUserKick*>(
      ::server::TGroupUserKick::internal_default_instance());
  Envelope_default_oneof_instance_->group_user_promote_ = const_cast< ::server::TGroupUserPromote*>(
      ::server::TGroupUserPromote::internal_default_instance());
  Envelope_default_oneof_instance_->group_ = const_cast< ::server::TGroup*>(
      ::server::TGroup::internal_default_instance());
  Envelope_default_oneof_instance_->groups_ = const_cast< ::server::TGroups*>(
      ::server::TGroups::internal_default_instance());
  Envelope_default_oneof_instance_->group_users_ = const_cast< ::server::TGroupUsers*>(
      ::server::TGroupUsers::internal_default_instance());
  Envelope_default_oneof_instance_->topic_join_ = const_cast< ::server::TTopicJoin*>(
      ::server::TTopicJoin::internal_default_instance());
  Envelope_default_oneof_instance_->topic_leave_ = const_cast< ::server::TTopicLeave*>(
      ::server::TTopicLeave::internal_default_instance());
  Envelope_default_oneof_instance_->topic_message_send_ = const_cast< ::server::TTopicMessageSend*>(
      ::server::TTopicMessageSend::internal_default_instance());
  Envelope_default_oneof_instance_->topic_messages_list_ = const_cast< ::server::TTopicMessagesList*>(
      ::server::TTopicMessagesList::internal_default_instance());
  Envelope_default_oneof_instance_->topic_ = const_cast< ::server::TTopic*>(
      ::server::TTopic::internal_default_instance());
  Envelope_default_oneof_instance_->topic_message_ack_ = const_cast< ::server::TTopicMessageAck*>(
      ::server::TTopicMessageAck::internal_default_instance());
  Envelope_default_oneof_instance_->topic_message_ = const_cast< ::server::TopicMessage*>(
      ::server::TopicMessage::internal_default_instance());
  Envelope_default_oneof_instance_->topic_messages_ = const_cast< ::server::TTopicMessages*>(
      ::server::TTopicMessages::internal_default_instance());
  Envelope_default_oneof_instance_->topic_presence_ = const_cast< ::server::TopicPresence*>(
      ::server::TopicPresence::internal_default_instance());
  Envelope_default_oneof_instance_->match_create_ = const_cast< ::server::TMatchCreate*>(
      ::server::TMatchCreate::internal_default_instance());
  Envelope_default_oneof_instance_->match_join_ = const_cast< ::server::TMatchJoin*>(
      ::server::TMatchJoin::internal_default_instance());
  Envelope_default_oneof_instance_->match_leave_ = const_cast< ::server::TMatchLeave*>(
      ::server::TMatchLeave::internal_default_instance());
  Envelope_default_oneof_instance_->match_data_send_ = const_cast< ::server::TMatchDataSend*>(
      ::server::TMatchDataSend::internal_default_instance());
  Envelope_default_oneof_instance_->match_ = const_cast< ::server::TMatch*>(
      ::server::TMatch::internal_default_instance());
  Envelope_default_oneof_instance_->match_data_ = const_cast< ::server::MatchData*>(
      ::server::MatchData::internal_default_instance());
  Envelope_default_oneof_instance_->match_presence_ = const_cast< ::server::MatchPresence*>(
      ::server::MatchPresence::internal_default_instance());
  Envelope_default_oneof_instance_->storage_fetch_ = const_cast< ::server::TStorageFetch*>(
      ::server::TStorageFetch::internal_default_instance());
  Envelope_default_oneof_instance_->storage_write_ = const_cast< ::server::TStorageWrite*>(
      ::server::TStorageWrite::internal_default_instance());
  Envelope_default_oneof_instance_->storage_remove_ = const_cast< ::server::TStorageRemove*>(
      ::server::TStorageRemove::internal_default_instance());
  Envelope_default_oneof_instance_->storage_data_ = const_cast< ::server::TStorageData*>(
      ::server::TStorageData::internal_default_instance());
  Envelope_default_oneof_instance_->storage_key_ = const_cast< ::server::TStorageKey*>(
      ::server::TStorageKey::internal_default_instance());
}

Envelope::Envelope(const Envelope& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:server.Envelope)
}

void Envelope::SharedCtor() {
  collation_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_payload();
  _cached_size_ = 0;
}

Envelope::~Envelope() {
  // @@protoc_insertion_point(destructor:server.Envelope)
  SharedDtor();
}

void Envelope::SharedDtor() {
  collation_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (has_payload()) {
    clear_payload();
  }
}

void Envelope::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Envelope::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Envelope_descriptor_;
}

const Envelope& Envelope::default_instance() {
  protobuf_InitDefaults_api_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<Envelope> Envelope_default_instance_;

Envelope* Envelope::New(::google::protobuf::Arena* arena) const {
  Envelope* n = new Envelope;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Envelope::clear_payload() {
// @@protoc_insertion_point(one_of_clear_start:server.Envelope)
  switch (payload_case()) {
    case kError: {
      delete payload_.error_;
      break;
    }
    case kHeartbeat: {
      delete payload_.heartbeat_;
      break;
    }
    case kLogout: {
      delete payload_.logout_;
      break;
    }
    case kLink: {
      delete payload_.link_;
      break;
    }
    case kUnlink: {
      delete payload_.unlink_;
      break;
    }
    case kSelfFetch: {
      delete payload_.self_fetch_;
      break;
    }
    case kSelfUpdate: {
      delete payload_.self_update_;
      break;
    }
    case kUsersFetch: {
      delete payload_.users_fetch_;
      break;
    }
    case kSelf: {
      delete payload_.self_;
      break;
    }
    case kUsers: {
      delete payload_.users_;
      break;
    }
    case kFriendAdd: {
      delete payload_.friend_add_;
      break;
    }
    case kFriendRemove: {
      delete payload_.friend_remove_;
      break;
    }
    case kFriendBlock: {
      delete payload_.friend_block_;
      break;
    }
    case kFriendsList: {
      delete payload_.friends_list_;
      break;
    }
    case kFriends: {
      delete payload_.friends_;
      break;
    }
    case kGroupCreate: {
      delete payload_.group_create_;
      break;
    }
    case kGroupUpdate: {
      delete payload_.group_update_;
      break;
    }
    case kGroupRemove: {
      delete payload_.group_remove_;
      break;
    }
    case kGroupsFetch: {
      delete payload_.groups_fetch_;
      break;
    }
    case kGroupsList: {
      delete payload_.groups_list_;
      break;
    }
    case kGroupsSelfList: {
      delete payload_.groups_self_list_;
      break;
    }
    case kGroupUsersList: {
      delete payload_.group_users_list_;
      break;
    }
    case kGroupJoin: {
      delete payload_.group_join_;
      break;
    }
    case kGroupLeave: {
      delete payload_.group_leave_;
      break;
    }
    case kGroupUserAdd: {
      delete payload_.group_user_add_;
      break;
    }
    case kGroupUserKick: {
      delete payload_.group_user_kick_;
      break;
    }
    case kGroupUserPromote: {
      delete payload_.group_user_promote_;
      break;
    }
    case kGroup: {
      delete payload_.group_;
      break;
    }
    case kGroups: {
      delete payload_.groups_;
      break;
    }
    case kGroupUsers: {
      delete payload_.group_users_;
      break;
    }
    case kTopicJoin: {
      delete payload_.topic_join_;
      break;
    }
    case kTopicLeave: {
      delete payload_.topic_leave_;
      break;
    }
    case kTopicMessageSend: {
      delete payload_.topic_message_send_;
      break;
    }
    case kTopicMessagesList: {
      delete payload_.topic_messages_list_;
      break;
    }
    case kTopic: {
      delete payload_.topic_;
      break;
    }
    case kTopicMessageAck: {
      delete payload_.topic_message_ack_;
      break;
    }
    case kTopicMessage: {
      delete payload_.topic_message_;
      break;
    }
    case kTopicMessages: {
      delete payload_.topic_messages_;
      break;
    }
    case kTopicPresence: {
      delete payload_.topic_presence_;
      break;
    }
    case kMatchCreate: {
      delete payload_.match_create_;
      break;
    }
    case kMatchJoin: {
      delete payload_.match_join_;
      break;
    }
    case kMatchLeave: {
      delete payload_.match_leave_;
      break;
    }
    case kMatchDataSend: {
      delete payload_.match_data_send_;
      break;
    }
    case kMatch: {
      delete payload_.match_;
      break;
    }
    case kMatchData: {
      delete payload_.match_data_;
      break;
    }
    case kMatchPresence: {
      delete payload_.match_presence_;
      break;
    }
    case kStorageFetch: {
      delete payload_.storage_fetch_;
      break;
    }
    case kStorageWrite: {
      delete payload_.storage_write_;
      break;
    }
    case kStorageRemove: {
      delete payload_.storage_remove_;
      break;
    }
    case kStorageData: {
      delete payload_.storage_data_;
      break;
    }
    case kStorageKey: {
      delete payload_.storage_key_;
      break;
    }
    case PAYLOAD_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = PAYLOAD_NOT_SET;
}


void Envelope::Clear() {
// @@protoc_insertion_point(message_clear_start:server.Envelope)
  collation_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_payload();
}

bool Envelope::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:server.Envelope)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string collation_id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_collation_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->collation_id().data(), this->collation_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "server.Envelope.collation_id"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_error;
        break;
      }

      // optional .server.Error error = 2;
      case 2: {
        if (tag == 18) {
         parse_error:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_error()));
        } else {
          goto handle_unusual;
        }
        goto after_storage_key;
        break;
      }

      // optional .server.Heartbeat heartbeat = 3;
      case 3: {
        if (tag == 26) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_heartbeat()));
        } else {
          goto handle_unusual;
        }
        goto after_storage_key;
        break;
      }

      // optional .server.Logout logout = 4;
      case 4: {
        if (tag == 34) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_logout()));
        } else {
          goto handle_unusual;
        }
        goto after_storage_key;
        break;
      }

      // optional .server.TLink link = 5;
      case 5: {
        if (tag == 42) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_link()));
        } else {
          goto handle_unusual;
        }
        goto after_storage_key;
        break;
      }

      // optional .server.TUnlink unlink = 6;
      case 6: {
        if (tag == 50) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_unlink()));
        } else {
          goto handle_unusual;
        }
        goto after_storage_key;
        break;
      }

      // optional .server.TSelfFetch self_fetch = 7;
      case 7: {
        if (tag == 58) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_self_fetch()));
        } else {
          goto handle_unusual;
        }
        goto after_storage_key;
        break;
      }

      // optional .server.TSelfUpdate self_update = 8;
      case 8: {
        if (tag == 66) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_self_update()));
        } else {
          goto handle_unusual;
        }
        goto after_storage_key;
        break;
      }

      // optional .server.TUsersFetch users_fetch = 9;
      case 9: {
        if (tag == 74) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_users_fetch()));
        } else {
          goto handle_unusual;
        }
        goto after_storage_key;
        break;
      }

      // optional .server.TSelf self = 10;
      case 10: {
        if (tag == 82) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_self()));
        } else {
          goto handle_unusual;
        }
        goto after_storage_key;
        break;
      }

      // optional .server.TUsers users = 11;
      case 11: {
        if (tag == 90) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_users()));
        } else {
          goto handle_unusual;
        }
        goto after_storage_key;
        break;
      }

      // optional .server.TFriendAdd friend_add = 12;
      case 12: {
        if (tag == 98) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_friend_add()));
        } else {
          goto handle_unusual;
        }
        goto after_storage_key;
        break;
      }

      // optional .server.TFriendRemove friend_remove = 13;
      case 13: {
        if (tag == 106) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_friend_remove()));
        } else {
          goto handle_unusual;
        }
        goto after_storage_key;
        break;
      }

      // optional .server.TFriendBlock friend_block = 14;
      case 14: {
        if (tag == 114) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_friend_block()));
        } else {
          goto handle_unusual;
        }
        goto after_storage_key;
        break;
      }

      // optional .server.TFriendsList friends_list = 15;
      case 15: {
        if (tag == 122) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_friends_list()));
        } else {
          goto handle_unusual;
        }
        goto after_storage_key;
        break;
      }

      // optional .server.TFriends friends = 16;
      case 16: {
        if (tag == 130) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_friends()));
        } else {
          goto handle_unusual;
        }
        goto after_storage_key;
        break;
      }

      // optional .server.TGroupCreate group_create = 17;
      case 17: {
        if (tag == 138) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_group_create()));
        } else {
          goto handle_unusual;
        }
        goto after_storage_key;
        break;
      }

      // optional .server.TGroupUpdate group_update = 18;
      case 18: {
        if (tag == 146) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_group_update()));
        } else {
          goto handle_unusual;
        }
        goto after_storage_key;
        break;
      }

      // optional .server.TGroupRemove group_remove = 19;
      case 19: {
        if (tag == 154) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_group_remove()));
        } else {
          goto handle_unusual;
        }
        goto after_storage_key;
        break;
      }

      // optional .server.TGroupsFetch groups_fetch = 20;
      case 20: {
        if (tag == 162) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_groups_fetch()));
        } else {
          goto handle_unusual;
        }
        goto after_storage_key;
        break;
      }

      // optional .server.TGroupsList groups_list = 21;
      case 21: {
        if (tag == 170) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_groups_list()));
        } else {
          goto handle_unusual;
        }
        goto after_storage_key;
        break;
      }

      // optional .server.TGroupsSelfList groups_self_list = 22;
      case 22: {
        if (tag == 178) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_groups_self_list()));
        } else {
          goto handle_unusual;
        }
        goto after_storage_key;
        break;
      }

      // optional .server.TGroupUsersList group_users_list = 23;
      case 23: {
        if (tag == 186) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_group_users_list()));
        } else {
          goto handle_unusual;
        }
        goto after_storage_key;
        break;
      }

      // optional .server.TGroupJoin group_join = 24;
      case 24: {
        if (tag == 194) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_group_join()));
        } else {
          goto handle_unusual;
        }
        goto after_storage_key;
        break;
      }

      // optional .server.TGroupLeave group_leave = 25;
      case 25: {
        if (tag == 202) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_group_leave()));
        } else {
          goto handle_unusual;
        }
        goto after_storage_key;
        break;
      }

      // optional .server.TGroupUserAdd group_user_add = 26;
      case 26: {
        if (tag == 210) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_group_user_add()));
        } else {
          goto handle_unusual;
        }
        goto after_storage_key;
        break;
      }

      // optional .server.TGroupUserKick group_user_kick = 27;
      case 27: {
        if (tag == 218) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_group_user_kick()));
        } else {
          goto handle_unusual;
        }
        goto after_storage_key;
        break;
      }

      // optional .server.TGroupUserPromote group_user_promote = 28;
      case 28: {
        if (tag == 226) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_group_user_promote()));
        } else {
          goto handle_unusual;
        }
        goto after_storage_key;
        break;
      }

      // optional .server.TGroup group = 29;
      case 29: {
        if (tag == 234) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_group()));
        } else {
          goto handle_unusual;
        }
        goto after_storage_key;
        break;
      }

      // optional .server.TGroups groups = 30;
      case 30: {
        if (tag == 242) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_groups()));
        } else {
          goto handle_unusual;
        }
        goto after_storage_key;
        break;
      }

      // optional .server.TGroupUsers group_users = 31;
      case 31: {
        if (tag == 250) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_group_users()));
        } else {
          goto handle_unusual;
        }
        goto after_storage_key;
        break;
      }

      // optional .server.TTopicJoin topic_join = 32;
      case 32: {
        if (tag == 258) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_topic_join()));
        } else {
          goto handle_unusual;
        }
        goto after_storage_key;
        break;
      }

      // optional .server.TTopicLeave topic_leave = 33;
      case 33: {
        if (tag == 266) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_topic_leave()));
        } else {
          goto handle_unusual;
        }
        goto after_storage_key;
        break;
      }

      // optional .server.TTopicMessageSend topic_message_send = 34;
      case 34: {
        if (tag == 274) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_topic_message_send()));
        } else {
          goto handle_unusual;
        }
        goto after_storage_key;
        break;
      }

      // optional .server.TTopicMessagesList topic_messages_list = 35;
      case 35: {
        if (tag == 282) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_topic_messages_list()));
        } else {
          goto handle_unusual;
        }
        goto after_storage_key;
        break;
      }

      // optional .server.TTopic topic = 36;
      case 36: {
        if (tag == 290) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_topic()));
        } else {
          goto handle_unusual;
        }
        goto after_storage_key;
        break;
      }

      // optional .server.TTopicMessageAck topic_message_ack = 37;
      case 37: {
        if (tag == 298) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_topic_message_ack()));
        } else {
          goto handle_unusual;
        }
        goto after_storage_key;
        break;
      }

      // optional .server.TopicMessage topic_message = 38;
      case 38: {
        if (tag == 306) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_topic_message()));
        } else {
          goto handle_unusual;
        }
        goto after_storage_key;
        break;
      }

      // optional .server.TTopicMessages topic_messages = 39;
      case 39: {
        if (tag == 314) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_topic_messages()));
        } else {
          goto handle_unusual;
        }
        goto after_storage_key;
        break;
      }

      // optional .server.TopicPresence topic_presence = 40;
      case 40: {
        if (tag == 322) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_topic_presence()));
        } else {
          goto handle_unusual;
        }
        goto after_storage_key;
        break;
      }

      // optional .server.TMatchCreate match_create = 41;
      case 41: {
        if (tag == 330) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_match_create()));
        } else {
          goto handle_unusual;
        }
        goto after_storage_key;
        break;
      }

      // optional .server.TMatchJoin match_join = 42;
      case 42: {
        if (tag == 338) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_match_join()));
        } else {
          goto handle_unusual;
        }
        goto after_storage_key;
        break;
      }

      // optional .server.TMatchLeave match_leave = 43;
      case 43: {
        if (tag == 346) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_match_leave()));
        } else {
          goto handle_unusual;
        }
        goto after_storage_key;
        break;
      }

      // optional .server.TMatchDataSend match_data_send = 44;
      case 44: {
        if (tag == 354) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_match_data_send()));
        } else {
          goto handle_unusual;
        }
        goto after_storage_key;
        break;
      }

      // optional .server.TMatch match = 45;
      case 45: {
        if (tag == 362) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_match()));
        } else {
          goto handle_unusual;
        }
        goto after_storage_key;
        break;
      }

      // optional .server.MatchData match_data = 46;
      case 46: {
        if (tag == 370) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_match_data()));
        } else {
          goto handle_unusual;
        }
        goto after_storage_key;
        break;
      }

      // optional .server.MatchPresence match_presence = 47;
      case 47: {
        if (tag == 378) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_match_presence()));
        } else {
          goto handle_unusual;
        }
        goto after_storage_key;
        break;
      }

      // optional .server.TStorageFetch storage_fetch = 48;
      case 48: {
        if (tag == 386) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_storage_fetch()));
        } else {
          goto handle_unusual;
        }
        goto after_storage_key;
        break;
      }

      // optional .server.TStorageWrite storage_write = 49;
      case 49: {
        if (tag == 394) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_storage_write()));
        } else {
          goto handle_unusual;
        }
        goto after_storage_key;
        break;
      }

      // optional .server.TStorageRemove storage_remove = 50;
      case 50: {
        if (tag == 402) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_storage_remove()));
        } else {
          goto handle_unusual;
        }
        goto after_storage_key;
        break;
      }

      // optional .server.TStorageData storage_data = 51;
      case 51: {
        if (tag == 410) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_storage_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(418)) goto parse_storage_key;
        break;
      }

      // optional .server.TStorageKey storage_key = 52;
      case 52: {
        if (tag == 418) {
         parse_storage_key:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_storage_key()));
        } else {
          goto handle_unusual;
        }
       after_storage_key:
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:server.Envelope)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:server.Envelope)
  return false;
#undef DO_
}

void Envelope::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:server.Envelope)
  // optional string collation_id = 1;
  if (this->collation_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->collation_id().data(), this->collation_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server.Envelope.collation_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->collation_id(), output);
  }

  // optional .server.Error error = 2;
  if (has_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *payload_.error_, output);
  }

  // optional .server.Heartbeat heartbeat = 3;
  if (has_heartbeat()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *payload_.heartbeat_, output);
  }

  // optional .server.Logout logout = 4;
  if (has_logout()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *payload_.logout_, output);
  }

  // optional .server.TLink link = 5;
  if (has_link()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *payload_.link_, output);
  }

  // optional .server.TUnlink unlink = 6;
  if (has_unlink()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *payload_.unlink_, output);
  }

  // optional .server.TSelfFetch self_fetch = 7;
  if (has_self_fetch()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, *payload_.self_fetch_, output);
  }

  // optional .server.TSelfUpdate self_update = 8;
  if (has_self_update()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, *payload_.self_update_, output);
  }

  // optional .server.TUsersFetch users_fetch = 9;
  if (has_users_fetch()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, *payload_.users_fetch_, output);
  }

  // optional .server.TSelf self = 10;
  if (has_self()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, *payload_.self_, output);
  }

  // optional .server.TUsers users = 11;
  if (has_users()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, *payload_.users_, output);
  }

  // optional .server.TFriendAdd friend_add = 12;
  if (has_friend_add()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, *payload_.friend_add_, output);
  }

  // optional .server.TFriendRemove friend_remove = 13;
  if (has_friend_remove()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, *payload_.friend_remove_, output);
  }

  // optional .server.TFriendBlock friend_block = 14;
  if (has_friend_block()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, *payload_.friend_block_, output);
  }

  // optional .server.TFriendsList friends_list = 15;
  if (has_friends_list()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      15, *payload_.friends_list_, output);
  }

  // optional .server.TFriends friends = 16;
  if (has_friends()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      16, *payload_.friends_, output);
  }

  // optional .server.TGroupCreate group_create = 17;
  if (has_group_create()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      17, *payload_.group_create_, output);
  }

  // optional .server.TGroupUpdate group_update = 18;
  if (has_group_update()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      18, *payload_.group_update_, output);
  }

  // optional .server.TGroupRemove group_remove = 19;
  if (has_group_remove()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      19, *payload_.group_remove_, output);
  }

  // optional .server.TGroupsFetch groups_fetch = 20;
  if (has_groups_fetch()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      20, *payload_.groups_fetch_, output);
  }

  // optional .server.TGroupsList groups_list = 21;
  if (has_groups_list()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      21, *payload_.groups_list_, output);
  }

  // optional .server.TGroupsSelfList groups_self_list = 22;
  if (has_groups_self_list()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      22, *payload_.groups_self_list_, output);
  }

  // optional .server.TGroupUsersList group_users_list = 23;
  if (has_group_users_list()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      23, *payload_.group_users_list_, output);
  }

  // optional .server.TGroupJoin group_join = 24;
  if (has_group_join()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      24, *payload_.group_join_, output);
  }

  // optional .server.TGroupLeave group_leave = 25;
  if (has_group_leave()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      25, *payload_.group_leave_, output);
  }

  // optional .server.TGroupUserAdd group_user_add = 26;
  if (has_group_user_add()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      26, *payload_.group_user_add_, output);
  }

  // optional .server.TGroupUserKick group_user_kick = 27;
  if (has_group_user_kick()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      27, *payload_.group_user_kick_, output);
  }

  // optional .server.TGroupUserPromote group_user_promote = 28;
  if (has_group_user_promote()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      28, *payload_.group_user_promote_, output);
  }

  // optional .server.TGroup group = 29;
  if (has_group()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      29, *payload_.group_, output);
  }

  // optional .server.TGroups groups = 30;
  if (has_groups()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      30, *payload_.groups_, output);
  }

  // optional .server.TGroupUsers group_users = 31;
  if (has_group_users()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      31, *payload_.group_users_, output);
  }

  // optional .server.TTopicJoin topic_join = 32;
  if (has_topic_join()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      32, *payload_.topic_join_, output);
  }

  // optional .server.TTopicLeave topic_leave = 33;
  if (has_topic_leave()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      33, *payload_.topic_leave_, output);
  }

  // optional .server.TTopicMessageSend topic_message_send = 34;
  if (has_topic_message_send()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      34, *payload_.topic_message_send_, output);
  }

  // optional .server.TTopicMessagesList topic_messages_list = 35;
  if (has_topic_messages_list()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      35, *payload_.topic_messages_list_, output);
  }

  // optional .server.TTopic topic = 36;
  if (has_topic()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      36, *payload_.topic_, output);
  }

  // optional .server.TTopicMessageAck topic_message_ack = 37;
  if (has_topic_message_ack()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      37, *payload_.topic_message_ack_, output);
  }

  // optional .server.TopicMessage topic_message = 38;
  if (has_topic_message()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      38, *payload_.topic_message_, output);
  }

  // optional .server.TTopicMessages topic_messages = 39;
  if (has_topic_messages()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      39, *payload_.topic_messages_, output);
  }

  // optional .server.TopicPresence topic_presence = 40;
  if (has_topic_presence()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      40, *payload_.topic_presence_, output);
  }

  // optional .server.TMatchCreate match_create = 41;
  if (has_match_create()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      41, *payload_.match_create_, output);
  }

  // optional .server.TMatchJoin match_join = 42;
  if (has_match_join()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      42, *payload_.match_join_, output);
  }

  // optional .server.TMatchLeave match_leave = 43;
  if (has_match_leave()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      43, *payload_.match_leave_, output);
  }

  // optional .server.TMatchDataSend match_data_send = 44;
  if (has_match_data_send()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      44, *payload_.match_data_send_, output);
  }

  // optional .server.TMatch match = 45;
  if (has_match()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      45, *payload_.match_, output);
  }

  // optional .server.MatchData match_data = 46;
  if (has_match_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      46, *payload_.match_data_, output);
  }

  // optional .server.MatchPresence match_presence = 47;
  if (has_match_presence()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      47, *payload_.match_presence_, output);
  }

  // optional .server.TStorageFetch storage_fetch = 48;
  if (has_storage_fetch()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      48, *payload_.storage_fetch_, output);
  }

  // optional .server.TStorageWrite storage_write = 49;
  if (has_storage_write()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      49, *payload_.storage_write_, output);
  }

  // optional .server.TStorageRemove storage_remove = 50;
  if (has_storage_remove()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      50, *payload_.storage_remove_, output);
  }

  // optional .server.TStorageData storage_data = 51;
  if (has_storage_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      51, *payload_.storage_data_, output);
  }

  // optional .server.TStorageKey storage_key = 52;
  if (has_storage_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      52, *payload_.storage_key_, output);
  }

  // @@protoc_insertion_point(serialize_end:server.Envelope)
}

::google::protobuf::uint8* Envelope::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:server.Envelope)
  // optional string collation_id = 1;
  if (this->collation_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->collation_id().data(), this->collation_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server.Envelope.collation_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->collation_id(), target);
  }

  // optional .server.Error error = 2;
  if (has_error()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *payload_.error_, false, target);
  }

  // optional .server.Heartbeat heartbeat = 3;
  if (has_heartbeat()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *payload_.heartbeat_, false, target);
  }

  // optional .server.Logout logout = 4;
  if (has_logout()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *payload_.logout_, false, target);
  }

  // optional .server.TLink link = 5;
  if (has_link()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *payload_.link_, false, target);
  }

  // optional .server.TUnlink unlink = 6;
  if (has_unlink()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, *payload_.unlink_, false, target);
  }

  // optional .server.TSelfFetch self_fetch = 7;
  if (has_self_fetch()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        7, *payload_.self_fetch_, false, target);
  }

  // optional .server.TSelfUpdate self_update = 8;
  if (has_self_update()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        8, *payload_.self_update_, false, target);
  }

  // optional .server.TUsersFetch users_fetch = 9;
  if (has_users_fetch()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        9, *payload_.users_fetch_, false, target);
  }

  // optional .server.TSelf self = 10;
  if (has_self()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        10, *payload_.self_, false, target);
  }

  // optional .server.TUsers users = 11;
  if (has_users()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        11, *payload_.users_, false, target);
  }

  // optional .server.TFriendAdd friend_add = 12;
  if (has_friend_add()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        12, *payload_.friend_add_, false, target);
  }

  // optional .server.TFriendRemove friend_remove = 13;
  if (has_friend_remove()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        13, *payload_.friend_remove_, false, target);
  }

  // optional .server.TFriendBlock friend_block = 14;
  if (has_friend_block()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        14, *payload_.friend_block_, false, target);
  }

  // optional .server.TFriendsList friends_list = 15;
  if (has_friends_list()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        15, *payload_.friends_list_, false, target);
  }

  // optional .server.TFriends friends = 16;
  if (has_friends()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        16, *payload_.friends_, false, target);
  }

  // optional .server.TGroupCreate group_create = 17;
  if (has_group_create()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        17, *payload_.group_create_, false, target);
  }

  // optional .server.TGroupUpdate group_update = 18;
  if (has_group_update()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        18, *payload_.group_update_, false, target);
  }

  // optional .server.TGroupRemove group_remove = 19;
  if (has_group_remove()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        19, *payload_.group_remove_, false, target);
  }

  // optional .server.TGroupsFetch groups_fetch = 20;
  if (has_groups_fetch()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        20, *payload_.groups_fetch_, false, target);
  }

  // optional .server.TGroupsList groups_list = 21;
  if (has_groups_list()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        21, *payload_.groups_list_, false, target);
  }

  // optional .server.TGroupsSelfList groups_self_list = 22;
  if (has_groups_self_list()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        22, *payload_.groups_self_list_, false, target);
  }

  // optional .server.TGroupUsersList group_users_list = 23;
  if (has_group_users_list()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        23, *payload_.group_users_list_, false, target);
  }

  // optional .server.TGroupJoin group_join = 24;
  if (has_group_join()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        24, *payload_.group_join_, false, target);
  }

  // optional .server.TGroupLeave group_leave = 25;
  if (has_group_leave()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        25, *payload_.group_leave_, false, target);
  }

  // optional .server.TGroupUserAdd group_user_add = 26;
  if (has_group_user_add()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        26, *payload_.group_user_add_, false, target);
  }

  // optional .server.TGroupUserKick group_user_kick = 27;
  if (has_group_user_kick()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        27, *payload_.group_user_kick_, false, target);
  }

  // optional .server.TGroupUserPromote group_user_promote = 28;
  if (has_group_user_promote()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        28, *payload_.group_user_promote_, false, target);
  }

  // optional .server.TGroup group = 29;
  if (has_group()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        29, *payload_.group_, false, target);
  }

  // optional .server.TGroups groups = 30;
  if (has_groups()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        30, *payload_.groups_, false, target);
  }

  // optional .server.TGroupUsers group_users = 31;
  if (has_group_users()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        31, *payload_.group_users_, false, target);
  }

  // optional .server.TTopicJoin topic_join = 32;
  if (has_topic_join()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        32, *payload_.topic_join_, false, target);
  }

  // optional .server.TTopicLeave topic_leave = 33;
  if (has_topic_leave()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        33, *payload_.topic_leave_, false, target);
  }

  // optional .server.TTopicMessageSend topic_message_send = 34;
  if (has_topic_message_send()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        34, *payload_.topic_message_send_, false, target);
  }

  // optional .server.TTopicMessagesList topic_messages_list = 35;
  if (has_topic_messages_list()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        35, *payload_.topic_messages_list_, false, target);
  }

  // optional .server.TTopic topic = 36;
  if (has_topic()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        36, *payload_.topic_, false, target);
  }

  // optional .server.TTopicMessageAck topic_message_ack = 37;
  if (has_topic_message_ack()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        37, *payload_.topic_message_ack_, false, target);
  }

  // optional .server.TopicMessage topic_message = 38;
  if (has_topic_message()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        38, *payload_.topic_message_, false, target);
  }

  // optional .server.TTopicMessages topic_messages = 39;
  if (has_topic_messages()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        39, *payload_.topic_messages_, false, target);
  }

  // optional .server.TopicPresence topic_presence = 40;
  if (has_topic_presence()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        40, *payload_.topic_presence_, false, target);
  }

  // optional .server.TMatchCreate match_create = 41;
  if (has_match_create()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        41, *payload_.match_create_, false, target);
  }

  // optional .server.TMatchJoin match_join = 42;
  if (has_match_join()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        42, *payload_.match_join_, false, target);
  }

  // optional .server.TMatchLeave match_leave = 43;
  if (has_match_leave()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        43, *payload_.match_leave_, false, target);
  }

  // optional .server.TMatchDataSend match_data_send = 44;
  if (has_match_data_send()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        44, *payload_.match_data_send_, false, target);
  }

  // optional .server.TMatch match = 45;
  if (has_match()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        45, *payload_.match_, false, target);
  }

  // optional .server.MatchData match_data = 46;
  if (has_match_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        46, *payload_.match_data_, false, target);
  }

  // optional .server.MatchPresence match_presence = 47;
  if (has_match_presence()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        47, *payload_.match_presence_, false, target);
  }

  // optional .server.TStorageFetch storage_fetch = 48;
  if (has_storage_fetch()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        48, *payload_.storage_fetch_, false, target);
  }

  // optional .server.TStorageWrite storage_write = 49;
  if (has_storage_write()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        49, *payload_.storage_write_, false, target);
  }

  // optional .server.TStorageRemove storage_remove = 50;
  if (has_storage_remove()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        50, *payload_.storage_remove_, false, target);
  }

  // optional .server.TStorageData storage_data = 51;
  if (has_storage_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        51, *payload_.storage_data_, false, target);
  }

  // optional .server.TStorageKey storage_key = 52;
  if (has_storage_key()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        52, *payload_.storage_key_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:server.Envelope)
  return target;
}

size_t Envelope::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:server.Envelope)
  size_t total_size = 0;

  // optional string collation_id = 1;
  if (this->collation_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->collation_id());
  }

  switch (payload_case()) {
    // optional .server.Error error = 2;
    case kError: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *payload_.error_);
      break;
    }
    // optional .server.Heartbeat heartbeat = 3;
    case kHeartbeat: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *payload_.heartbeat_);
      break;
    }
    // optional .server.Logout logout = 4;
    case kLogout: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *payload_.logout_);
      break;
    }
    // optional .server.TLink link = 5;
    case kLink: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *payload_.link_);
      break;
    }
    // optional .server.TUnlink unlink = 6;
    case kUnlink: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *payload_.unlink_);
      break;
    }
    // optional .server.TSelfFetch self_fetch = 7;
    case kSelfFetch: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *payload_.self_fetch_);
      break;
    }
    // optional .server.TSelfUpdate self_update = 8;
    case kSelfUpdate: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *payload_.self_update_);
      break;
    }
    // optional .server.TUsersFetch users_fetch = 9;
    case kUsersFetch: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *payload_.users_fetch_);
      break;
    }
    // optional .server.TSelf self = 10;
    case kSelf: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *payload_.self_);
      break;
    }
    // optional .server.TUsers users = 11;
    case kUsers: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *payload_.users_);
      break;
    }
    // optional .server.TFriendAdd friend_add = 12;
    case kFriendAdd: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *payload_.friend_add_);
      break;
    }
    // optional .server.TFriendRemove friend_remove = 13;
    case kFriendRemove: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *payload_.friend_remove_);
      break;
    }
    // optional .server.TFriendBlock friend_block = 14;
    case kFriendBlock: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *payload_.friend_block_);
      break;
    }
    // optional .server.TFriendsList friends_list = 15;
    case kFriendsList: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *payload_.friends_list_);
      break;
    }
    // optional .server.TFriends friends = 16;
    case kFriends: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *payload_.friends_);
      break;
    }
    // optional .server.TGroupCreate group_create = 17;
    case kGroupCreate: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *payload_.group_create_);
      break;
    }
    // optional .server.TGroupUpdate group_update = 18;
    case kGroupUpdate: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *payload_.group_update_);
      break;
    }
    // optional .server.TGroupRemove group_remove = 19;
    case kGroupRemove: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *payload_.group_remove_);
      break;
    }
    // optional .server.TGroupsFetch groups_fetch = 20;
    case kGroupsFetch: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *payload_.groups_fetch_);
      break;
    }
    // optional .server.TGroupsList groups_list = 21;
    case kGroupsList: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *payload_.groups_list_);
      break;
    }
    // optional .server.TGroupsSelfList groups_self_list = 22;
    case kGroupsSelfList: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *payload_.groups_self_list_);
      break;
    }
    // optional .server.TGroupUsersList group_users_list = 23;
    case kGroupUsersList: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *payload_.group_users_list_);
      break;
    }
    // optional .server.TGroupJoin group_join = 24;
    case kGroupJoin: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *payload_.group_join_);
      break;
    }
    // optional .server.TGroupLeave group_leave = 25;
    case kGroupLeave: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *payload_.group_leave_);
      break;
    }
    // optional .server.TGroupUserAdd group_user_add = 26;
    case kGroupUserAdd: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *payload_.group_user_add_);
      break;
    }
    // optional .server.TGroupUserKick group_user_kick = 27;
    case kGroupUserKick: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *payload_.group_user_kick_);
      break;
    }
    // optional .server.TGroupUserPromote group_user_promote = 28;
    case kGroupUserPromote: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *payload_.group_user_promote_);
      break;
    }
    // optional .server.TGroup group = 29;
    case kGroup: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *payload_.group_);
      break;
    }
    // optional .server.TGroups groups = 30;
    case kGroups: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *payload_.groups_);
      break;
    }
    // optional .server.TGroupUsers group_users = 31;
    case kGroupUsers: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *payload_.group_users_);
      break;
    }
    // optional .server.TTopicJoin topic_join = 32;
    case kTopicJoin: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *payload_.topic_join_);
      break;
    }
    // optional .server.TTopicLeave topic_leave = 33;
    case kTopicLeave: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *payload_.topic_leave_);
      break;
    }
    // optional .server.TTopicMessageSend topic_message_send = 34;
    case kTopicMessageSend: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *payload_.topic_message_send_);
      break;
    }
    // optional .server.TTopicMessagesList topic_messages_list = 35;
    case kTopicMessagesList: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *payload_.topic_messages_list_);
      break;
    }
    // optional .server.TTopic topic = 36;
    case kTopic: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *payload_.topic_);
      break;
    }
    // optional .server.TTopicMessageAck topic_message_ack = 37;
    case kTopicMessageAck: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *payload_.topic_message_ack_);
      break;
    }
    // optional .server.TopicMessage topic_message = 38;
    case kTopicMessage: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *payload_.topic_message_);
      break;
    }
    // optional .server.TTopicMessages topic_messages = 39;
    case kTopicMessages: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *payload_.topic_messages_);
      break;
    }
    // optional .server.TopicPresence topic_presence = 40;
    case kTopicPresence: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *payload_.topic_presence_);
      break;
    }
    // optional .server.TMatchCreate match_create = 41;
    case kMatchCreate: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *payload_.match_create_);
      break;
    }
    // optional .server.TMatchJoin match_join = 42;
    case kMatchJoin: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *payload_.match_join_);
      break;
    }
    // optional .server.TMatchLeave match_leave = 43;
    case kMatchLeave: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *payload_.match_leave_);
      break;
    }
    // optional .server.TMatchDataSend match_data_send = 44;
    case kMatchDataSend: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *payload_.match_data_send_);
      break;
    }
    // optional .server.TMatch match = 45;
    case kMatch: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *payload_.match_);
      break;
    }
    // optional .server.MatchData match_data = 46;
    case kMatchData: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *payload_.match_data_);
      break;
    }
    // optional .server.MatchPresence match_presence = 47;
    case kMatchPresence: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *payload_.match_presence_);
      break;
    }
    // optional .server.TStorageFetch storage_fetch = 48;
    case kStorageFetch: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *payload_.storage_fetch_);
      break;
    }
    // optional .server.TStorageWrite storage_write = 49;
    case kStorageWrite: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *payload_.storage_write_);
      break;
    }
    // optional .server.TStorageRemove storage_remove = 50;
    case kStorageRemove: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *payload_.storage_remove_);
      break;
    }
    // optional .server.TStorageData storage_data = 51;
    case kStorageData: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *payload_.storage_data_);
      break;
    }
    // optional .server.TStorageKey storage_key = 52;
    case kStorageKey: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *payload_.storage_key_);
      break;
    }
    case PAYLOAD_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Envelope::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:server.Envelope)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Envelope* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Envelope>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:server.Envelope)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:server.Envelope)
    UnsafeMergeFrom(*source);
  }
}

void Envelope::MergeFrom(const Envelope& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:server.Envelope)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void Envelope::UnsafeMergeFrom(const Envelope& from) {
  GOOGLE_DCHECK(&from != this);
  switch (from.payload_case()) {
    case kError: {
      mutable_error()->::server::Error::MergeFrom(from.error());
      break;
    }
    case kHeartbeat: {
      mutable_heartbeat()->::server::Heartbeat::MergeFrom(from.heartbeat());
      break;
    }
    case kLogout: {
      mutable_logout()->::server::Logout::MergeFrom(from.logout());
      break;
    }
    case kLink: {
      mutable_link()->::server::TLink::MergeFrom(from.link());
      break;
    }
    case kUnlink: {
      mutable_unlink()->::server::TUnlink::MergeFrom(from.unlink());
      break;
    }
    case kSelfFetch: {
      mutable_self_fetch()->::server::TSelfFetch::MergeFrom(from.self_fetch());
      break;
    }
    case kSelfUpdate: {
      mutable_self_update()->::server::TSelfUpdate::MergeFrom(from.self_update());
      break;
    }
    case kUsersFetch: {
      mutable_users_fetch()->::server::TUsersFetch::MergeFrom(from.users_fetch());
      break;
    }
    case kSelf: {
      mutable_self()->::server::TSelf::MergeFrom(from.self());
      break;
    }
    case kUsers: {
      mutable_users()->::server::TUsers::MergeFrom(from.users());
      break;
    }
    case kFriendAdd: {
      mutable_friend_add()->::server::TFriendAdd::MergeFrom(from.friend_add());
      break;
    }
    case kFriendRemove: {
      mutable_friend_remove()->::server::TFriendRemove::MergeFrom(from.friend_remove());
      break;
    }
    case kFriendBlock: {
      mutable_friend_block()->::server::TFriendBlock::MergeFrom(from.friend_block());
      break;
    }
    case kFriendsList: {
      mutable_friends_list()->::server::TFriendsList::MergeFrom(from.friends_list());
      break;
    }
    case kFriends: {
      mutable_friends()->::server::TFriends::MergeFrom(from.friends());
      break;
    }
    case kGroupCreate: {
      mutable_group_create()->::server::TGroupCreate::MergeFrom(from.group_create());
      break;
    }
    case kGroupUpdate: {
      mutable_group_update()->::server::TGroupUpdate::MergeFrom(from.group_update());
      break;
    }
    case kGroupRemove: {
      mutable_group_remove()->::server::TGroupRemove::MergeFrom(from.group_remove());
      break;
    }
    case kGroupsFetch: {
      mutable_groups_fetch()->::server::TGroupsFetch::MergeFrom(from.groups_fetch());
      break;
    }
    case kGroupsList: {
      mutable_groups_list()->::server::TGroupsList::MergeFrom(from.groups_list());
      break;
    }
    case kGroupsSelfList: {
      mutable_groups_self_list()->::server::TGroupsSelfList::MergeFrom(from.groups_self_list());
      break;
    }
    case kGroupUsersList: {
      mutable_group_users_list()->::server::TGroupUsersList::MergeFrom(from.group_users_list());
      break;
    }
    case kGroupJoin: {
      mutable_group_join()->::server::TGroupJoin::MergeFrom(from.group_join());
      break;
    }
    case kGroupLeave: {
      mutable_group_leave()->::server::TGroupLeave::MergeFrom(from.group_leave());
      break;
    }
    case kGroupUserAdd: {
      mutable_group_user_add()->::server::TGroupUserAdd::MergeFrom(from.group_user_add());
      break;
    }
    case kGroupUserKick: {
      mutable_group_user_kick()->::server::TGroupUserKick::MergeFrom(from.group_user_kick());
      break;
    }
    case kGroupUserPromote: {
      mutable_group_user_promote()->::server::TGroupUserPromote::MergeFrom(from.group_user_promote());
      break;
    }
    case kGroup: {
      mutable_group()->::server::TGroup::MergeFrom(from.group());
      break;
    }
    case kGroups: {
      mutable_groups()->::server::TGroups::MergeFrom(from.groups());
      break;
    }
    case kGroupUsers: {
      mutable_group_users()->::server::TGroupUsers::MergeFrom(from.group_users());
      break;
    }
    case kTopicJoin: {
      mutable_topic_join()->::server::TTopicJoin::MergeFrom(from.topic_join());
      break;
    }
    case kTopicLeave: {
      mutable_topic_leave()->::server::TTopicLeave::MergeFrom(from.topic_leave());
      break;
    }
    case kTopicMessageSend: {
      mutable_topic_message_send()->::server::TTopicMessageSend::MergeFrom(from.topic_message_send());
      break;
    }
    case kTopicMessagesList: {
      mutable_topic_messages_list()->::server::TTopicMessagesList::MergeFrom(from.topic_messages_list());
      break;
    }
    case kTopic: {
      mutable_topic()->::server::TTopic::MergeFrom(from.topic());
      break;
    }
    case kTopicMessageAck: {
      mutable_topic_message_ack()->::server::TTopicMessageAck::MergeFrom(from.topic_message_ack());
      break;
    }
    case kTopicMessage: {
      mutable_topic_message()->::server::TopicMessage::MergeFrom(from.topic_message());
      break;
    }
    case kTopicMessages: {
      mutable_topic_messages()->::server::TTopicMessages::MergeFrom(from.topic_messages());
      break;
    }
    case kTopicPresence: {
      mutable_topic_presence()->::server::TopicPresence::MergeFrom(from.topic_presence());
      break;
    }
    case kMatchCreate: {
      mutable_match_create()->::server::TMatchCreate::MergeFrom(from.match_create());
      break;
    }
    case kMatchJoin: {
      mutable_match_join()->::server::TMatchJoin::MergeFrom(from.match_join());
      break;
    }
    case kMatchLeave: {
      mutable_match_leave()->::server::TMatchLeave::MergeFrom(from.match_leave());
      break;
    }
    case kMatchDataSend: {
      mutable_match_data_send()->::server::TMatchDataSend::MergeFrom(from.match_data_send());
      break;
    }
    case kMatch: {
      mutable_match()->::server::TMatch::MergeFrom(from.match());
      break;
    }
    case kMatchData: {
      mutable_match_data()->::server::MatchData::MergeFrom(from.match_data());
      break;
    }
    case kMatchPresence: {
      mutable_match_presence()->::server::MatchPresence::MergeFrom(from.match_presence());
      break;
    }
    case kStorageFetch: {
      mutable_storage_fetch()->::server::TStorageFetch::MergeFrom(from.storage_fetch());
      break;
    }
    case kStorageWrite: {
      mutable_storage_write()->::server::TStorageWrite::MergeFrom(from.storage_write());
      break;
    }
    case kStorageRemove: {
      mutable_storage_remove()->::server::TStorageRemove::MergeFrom(from.storage_remove());
      break;
    }
    case kStorageData: {
      mutable_storage_data()->::server::TStorageData::MergeFrom(from.storage_data());
      break;
    }
    case kStorageKey: {
      mutable_storage_key()->::server::TStorageKey::MergeFrom(from.storage_key());
      break;
    }
    case PAYLOAD_NOT_SET: {
      break;
    }
  }
  if (from.collation_id().size() > 0) {

    collation_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.collation_id_);
  }
}

void Envelope::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:server.Envelope)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Envelope::CopyFrom(const Envelope& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:server.Envelope)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool Envelope::IsInitialized() const {

  return true;
}

void Envelope::Swap(Envelope* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Envelope::InternalSwap(Envelope* other) {
  collation_id_.Swap(&other->collation_id_);
  std::swap(payload_, other->payload_);
  std::swap(_oneof_case_[0], other->_oneof_case_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Envelope::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Envelope_descriptor_;
  metadata.reflection = Envelope_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Envelope

// optional string collation_id = 1;
void Envelope::clear_collation_id() {
  collation_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Envelope::collation_id() const {
  // @@protoc_insertion_point(field_get:server.Envelope.collation_id)
  return collation_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Envelope::set_collation_id(const ::std::string& value) {
  
  collation_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:server.Envelope.collation_id)
}
void Envelope::set_collation_id(const char* value) {
  
  collation_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:server.Envelope.collation_id)
}
void Envelope::set_collation_id(const char* value, size_t size) {
  
  collation_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:server.Envelope.collation_id)
}
::std::string* Envelope::mutable_collation_id() {
  
  // @@protoc_insertion_point(field_mutable:server.Envelope.collation_id)
  return collation_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Envelope::release_collation_id() {
  // @@protoc_insertion_point(field_release:server.Envelope.collation_id)
  
  return collation_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Envelope::set_allocated_collation_id(::std::string* collation_id) {
  if (collation_id != NULL) {
    
  } else {
    
  }
  collation_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), collation_id);
  // @@protoc_insertion_point(field_set_allocated:server.Envelope.collation_id)
}

// optional .server.Error error = 2;
bool Envelope::has_error() const {
  return payload_case() == kError;
}
void Envelope::set_has_error() {
  _oneof_case_[0] = kError;
}
void Envelope::clear_error() {
  if (has_error()) {
    delete payload_.error_;
    clear_has_payload();
  }
}
 const ::server::Error& Envelope::error() const {
  // @@protoc_insertion_point(field_get:server.Envelope.error)
  return has_error()
      ? *payload_.error_
      : ::server::Error::default_instance();
}
::server::Error* Envelope::mutable_error() {
  if (!has_error()) {
    clear_payload();
    set_has_error();
    payload_.error_ = new ::server::Error;
  }
  // @@protoc_insertion_point(field_mutable:server.Envelope.error)
  return payload_.error_;
}
::server::Error* Envelope::release_error() {
  // @@protoc_insertion_point(field_release:server.Envelope.error)
  if (has_error()) {
    clear_has_payload();
    ::server::Error* temp = payload_.error_;
    payload_.error_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void Envelope::set_allocated_error(::server::Error* error) {
  clear_payload();
  if (error) {
    set_has_error();
    payload_.error_ = error;
  }
  // @@protoc_insertion_point(field_set_allocated:server.Envelope.error)
}

// optional .server.Heartbeat heartbeat = 3;
bool Envelope::has_heartbeat() const {
  return payload_case() == kHeartbeat;
}
void Envelope::set_has_heartbeat() {
  _oneof_case_[0] = kHeartbeat;
}
void Envelope::clear_heartbeat() {
  if (has_heartbeat()) {
    delete payload_.heartbeat_;
    clear_has_payload();
  }
}
 const ::server::Heartbeat& Envelope::heartbeat() const {
  // @@protoc_insertion_point(field_get:server.Envelope.heartbeat)
  return has_heartbeat()
      ? *payload_.heartbeat_
      : ::server::Heartbeat::default_instance();
}
::server::Heartbeat* Envelope::mutable_heartbeat() {
  if (!has_heartbeat()) {
    clear_payload();
    set_has_heartbeat();
    payload_.heartbeat_ = new ::server::Heartbeat;
  }
  // @@protoc_insertion_point(field_mutable:server.Envelope.heartbeat)
  return payload_.heartbeat_;
}
::server::Heartbeat* Envelope::release_heartbeat() {
  // @@protoc_insertion_point(field_release:server.Envelope.heartbeat)
  if (has_heartbeat()) {
    clear_has_payload();
    ::server::Heartbeat* temp = payload_.heartbeat_;
    payload_.heartbeat_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void Envelope::set_allocated_heartbeat(::server::Heartbeat* heartbeat) {
  clear_payload();
  if (heartbeat) {
    set_has_heartbeat();
    payload_.heartbeat_ = heartbeat;
  }
  // @@protoc_insertion_point(field_set_allocated:server.Envelope.heartbeat)
}

// optional .server.Logout logout = 4;
bool Envelope::has_logout() const {
  return payload_case() == kLogout;
}
void Envelope::set_has_logout() {
  _oneof_case_[0] = kLogout;
}
void Envelope::clear_logout() {
  if (has_logout()) {
    delete payload_.logout_;
    clear_has_payload();
  }
}
 const ::server::Logout& Envelope::logout() const {
  // @@protoc_insertion_point(field_get:server.Envelope.logout)
  return has_logout()
      ? *payload_.logout_
      : ::server::Logout::default_instance();
}
::server::Logout* Envelope::mutable_logout() {
  if (!has_logout()) {
    clear_payload();
    set_has_logout();
    payload_.logout_ = new ::server::Logout;
  }
  // @@protoc_insertion_point(field_mutable:server.Envelope.logout)
  return payload_.logout_;
}
::server::Logout* Envelope::release_logout() {
  // @@protoc_insertion_point(field_release:server.Envelope.logout)
  if (has_logout()) {
    clear_has_payload();
    ::server::Logout* temp = payload_.logout_;
    payload_.logout_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void Envelope::set_allocated_logout(::server::Logout* logout) {
  clear_payload();
  if (logout) {
    set_has_logout();
    payload_.logout_ = logout;
  }
  // @@protoc_insertion_point(field_set_allocated:server.Envelope.logout)
}

// optional .server.TLink link = 5;
bool Envelope::has_link() const {
  return payload_case() == kLink;
}
void Envelope::set_has_link() {
  _oneof_case_[0] = kLink;
}
void Envelope::clear_link() {
  if (has_link()) {
    delete payload_.link_;
    clear_has_payload();
  }
}
 const ::server::TLink& Envelope::link() const {
  // @@protoc_insertion_point(field_get:server.Envelope.link)
  return has_link()
      ? *payload_.link_
      : ::server::TLink::default_instance();
}
::server::TLink* Envelope::mutable_link() {
  if (!has_link()) {
    clear_payload();
    set_has_link();
    payload_.link_ = new ::server::TLink;
  }
  // @@protoc_insertion_point(field_mutable:server.Envelope.link)
  return payload_.link_;
}
::server::TLink* Envelope::release_link() {
  // @@protoc_insertion_point(field_release:server.Envelope.link)
  if (has_link()) {
    clear_has_payload();
    ::server::TLink* temp = payload_.link_;
    payload_.link_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void Envelope::set_allocated_link(::server::TLink* link) {
  clear_payload();
  if (link) {
    set_has_link();
    payload_.link_ = link;
  }
  // @@protoc_insertion_point(field_set_allocated:server.Envelope.link)
}

// optional .server.TUnlink unlink = 6;
bool Envelope::has_unlink() const {
  return payload_case() == kUnlink;
}
void Envelope::set_has_unlink() {
  _oneof_case_[0] = kUnlink;
}
void Envelope::clear_unlink() {
  if (has_unlink()) {
    delete payload_.unlink_;
    clear_has_payload();
  }
}
 const ::server::TUnlink& Envelope::unlink() const {
  // @@protoc_insertion_point(field_get:server.Envelope.unlink)
  return has_unlink()
      ? *payload_.unlink_
      : ::server::TUnlink::default_instance();
}
::server::TUnlink* Envelope::mutable_unlink() {
  if (!has_unlink()) {
    clear_payload();
    set_has_unlink();
    payload_.unlink_ = new ::server::TUnlink;
  }
  // @@protoc_insertion_point(field_mutable:server.Envelope.unlink)
  return payload_.unlink_;
}
::server::TUnlink* Envelope::release_unlink() {
  // @@protoc_insertion_point(field_release:server.Envelope.unlink)
  if (has_unlink()) {
    clear_has_payload();
    ::server::TUnlink* temp = payload_.unlink_;
    payload_.unlink_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void Envelope::set_allocated_unlink(::server::TUnlink* unlink) {
  clear_payload();
  if (unlink) {
    set_has_unlink();
    payload_.unlink_ = unlink;
  }
  // @@protoc_insertion_point(field_set_allocated:server.Envelope.unlink)
}

// optional .server.TSelfFetch self_fetch = 7;
bool Envelope::has_self_fetch() const {
  return payload_case() == kSelfFetch;
}
void Envelope::set_has_self_fetch() {
  _oneof_case_[0] = kSelfFetch;
}
void Envelope::clear_self_fetch() {
  if (has_self_fetch()) {
    delete payload_.self_fetch_;
    clear_has_payload();
  }
}
 const ::server::TSelfFetch& Envelope::self_fetch() const {
  // @@protoc_insertion_point(field_get:server.Envelope.self_fetch)
  return has_self_fetch()
      ? *payload_.self_fetch_
      : ::server::TSelfFetch::default_instance();
}
::server::TSelfFetch* Envelope::mutable_self_fetch() {
  if (!has_self_fetch()) {
    clear_payload();
    set_has_self_fetch();
    payload_.self_fetch_ = new ::server::TSelfFetch;
  }
  // @@protoc_insertion_point(field_mutable:server.Envelope.self_fetch)
  return payload_.self_fetch_;
}
::server::TSelfFetch* Envelope::release_self_fetch() {
  // @@protoc_insertion_point(field_release:server.Envelope.self_fetch)
  if (has_self_fetch()) {
    clear_has_payload();
    ::server::TSelfFetch* temp = payload_.self_fetch_;
    payload_.self_fetch_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void Envelope::set_allocated_self_fetch(::server::TSelfFetch* self_fetch) {
  clear_payload();
  if (self_fetch) {
    set_has_self_fetch();
    payload_.self_fetch_ = self_fetch;
  }
  // @@protoc_insertion_point(field_set_allocated:server.Envelope.self_fetch)
}

// optional .server.TSelfUpdate self_update = 8;
bool Envelope::has_self_update() const {
  return payload_case() == kSelfUpdate;
}
void Envelope::set_has_self_update() {
  _oneof_case_[0] = kSelfUpdate;
}
void Envelope::clear_self_update() {
  if (has_self_update()) {
    delete payload_.self_update_;
    clear_has_payload();
  }
}
 const ::server::TSelfUpdate& Envelope::self_update() const {
  // @@protoc_insertion_point(field_get:server.Envelope.self_update)
  return has_self_update()
      ? *payload_.self_update_
      : ::server::TSelfUpdate::default_instance();
}
::server::TSelfUpdate* Envelope::mutable_self_update() {
  if (!has_self_update()) {
    clear_payload();
    set_has_self_update();
    payload_.self_update_ = new ::server::TSelfUpdate;
  }
  // @@protoc_insertion_point(field_mutable:server.Envelope.self_update)
  return payload_.self_update_;
}
::server::TSelfUpdate* Envelope::release_self_update() {
  // @@protoc_insertion_point(field_release:server.Envelope.self_update)
  if (has_self_update()) {
    clear_has_payload();
    ::server::TSelfUpdate* temp = payload_.self_update_;
    payload_.self_update_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void Envelope::set_allocated_self_update(::server::TSelfUpdate* self_update) {
  clear_payload();
  if (self_update) {
    set_has_self_update();
    payload_.self_update_ = self_update;
  }
  // @@protoc_insertion_point(field_set_allocated:server.Envelope.self_update)
}

// optional .server.TUsersFetch users_fetch = 9;
bool Envelope::has_users_fetch() const {
  return payload_case() == kUsersFetch;
}
void Envelope::set_has_users_fetch() {
  _oneof_case_[0] = kUsersFetch;
}
void Envelope::clear_users_fetch() {
  if (has_users_fetch()) {
    delete payload_.users_fetch_;
    clear_has_payload();
  }
}
 const ::server::TUsersFetch& Envelope::users_fetch() const {
  // @@protoc_insertion_point(field_get:server.Envelope.users_fetch)
  return has_users_fetch()
      ? *payload_.users_fetch_
      : ::server::TUsersFetch::default_instance();
}
::server::TUsersFetch* Envelope::mutable_users_fetch() {
  if (!has_users_fetch()) {
    clear_payload();
    set_has_users_fetch();
    payload_.users_fetch_ = new ::server::TUsersFetch;
  }
  // @@protoc_insertion_point(field_mutable:server.Envelope.users_fetch)
  return payload_.users_fetch_;
}
::server::TUsersFetch* Envelope::release_users_fetch() {
  // @@protoc_insertion_point(field_release:server.Envelope.users_fetch)
  if (has_users_fetch()) {
    clear_has_payload();
    ::server::TUsersFetch* temp = payload_.users_fetch_;
    payload_.users_fetch_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void Envelope::set_allocated_users_fetch(::server::TUsersFetch* users_fetch) {
  clear_payload();
  if (users_fetch) {
    set_has_users_fetch();
    payload_.users_fetch_ = users_fetch;
  }
  // @@protoc_insertion_point(field_set_allocated:server.Envelope.users_fetch)
}

// optional .server.TSelf self = 10;
bool Envelope::has_self() const {
  return payload_case() == kSelf;
}
void Envelope::set_has_self() {
  _oneof_case_[0] = kSelf;
}
void Envelope::clear_self() {
  if (has_self()) {
    delete payload_.self_;
    clear_has_payload();
  }
}
 const ::server::TSelf& Envelope::self() const {
  // @@protoc_insertion_point(field_get:server.Envelope.self)
  return has_self()
      ? *payload_.self_
      : ::server::TSelf::default_instance();
}
::server::TSelf* Envelope::mutable_self() {
  if (!has_self()) {
    clear_payload();
    set_has_self();
    payload_.self_ = new ::server::TSelf;
  }
  // @@protoc_insertion_point(field_mutable:server.Envelope.self)
  return payload_.self_;
}
::server::TSelf* Envelope::release_self() {
  // @@protoc_insertion_point(field_release:server.Envelope.self)
  if (has_self()) {
    clear_has_payload();
    ::server::TSelf* temp = payload_.self_;
    payload_.self_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void Envelope::set_allocated_self(::server::TSelf* self) {
  clear_payload();
  if (self) {
    set_has_self();
    payload_.self_ = self;
  }
  // @@protoc_insertion_point(field_set_allocated:server.Envelope.self)
}

// optional .server.TUsers users = 11;
bool Envelope::has_users() const {
  return payload_case() == kUsers;
}
void Envelope::set_has_users() {
  _oneof_case_[0] = kUsers;
}
void Envelope::clear_users() {
  if (has_users()) {
    delete payload_.users_;
    clear_has_payload();
  }
}
 const ::server::TUsers& Envelope::users() const {
  // @@protoc_insertion_point(field_get:server.Envelope.users)
  return has_users()
      ? *payload_.users_
      : ::server::TUsers::default_instance();
}
::server::TUsers* Envelope::mutable_users() {
  if (!has_users()) {
    clear_payload();
    set_has_users();
    payload_.users_ = new ::server::TUsers;
  }
  // @@protoc_insertion_point(field_mutable:server.Envelope.users)
  return payload_.users_;
}
::server::TUsers* Envelope::release_users() {
  // @@protoc_insertion_point(field_release:server.Envelope.users)
  if (has_users()) {
    clear_has_payload();
    ::server::TUsers* temp = payload_.users_;
    payload_.users_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void Envelope::set_allocated_users(::server::TUsers* users) {
  clear_payload();
  if (users) {
    set_has_users();
    payload_.users_ = users;
  }
  // @@protoc_insertion_point(field_set_allocated:server.Envelope.users)
}

// optional .server.TFriendAdd friend_add = 12;
bool Envelope::has_friend_add() const {
  return payload_case() == kFriendAdd;
}
void Envelope::set_has_friend_add() {
  _oneof_case_[0] = kFriendAdd;
}
void Envelope::clear_friend_add() {
  if (has_friend_add()) {
    delete payload_.friend_add_;
    clear_has_payload();
  }
}
 const ::server::TFriendAdd& Envelope::friend_add() const {
  // @@protoc_insertion_point(field_get:server.Envelope.friend_add)
  return has_friend_add()
      ? *payload_.friend_add_
      : ::server::TFriendAdd::default_instance();
}
::server::TFriendAdd* Envelope::mutable_friend_add() {
  if (!has_friend_add()) {
    clear_payload();
    set_has_friend_add();
    payload_.friend_add_ = new ::server::TFriendAdd;
  }
  // @@protoc_insertion_point(field_mutable:server.Envelope.friend_add)
  return payload_.friend_add_;
}
::server::TFriendAdd* Envelope::release_friend_add() {
  // @@protoc_insertion_point(field_release:server.Envelope.friend_add)
  if (has_friend_add()) {
    clear_has_payload();
    ::server::TFriendAdd* temp = payload_.friend_add_;
    payload_.friend_add_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void Envelope::set_allocated_friend_add(::server::TFriendAdd* friend_add) {
  clear_payload();
  if (friend_add) {
    set_has_friend_add();
    payload_.friend_add_ = friend_add;
  }
  // @@protoc_insertion_point(field_set_allocated:server.Envelope.friend_add)
}

// optional .server.TFriendRemove friend_remove = 13;
bool Envelope::has_friend_remove() const {
  return payload_case() == kFriendRemove;
}
void Envelope::set_has_friend_remove() {
  _oneof_case_[0] = kFriendRemove;
}
void Envelope::clear_friend_remove() {
  if (has_friend_remove()) {
    delete payload_.friend_remove_;
    clear_has_payload();
  }
}
 const ::server::TFriendRemove& Envelope::friend_remove() const {
  // @@protoc_insertion_point(field_get:server.Envelope.friend_remove)
  return has_friend_remove()
      ? *payload_.friend_remove_
      : ::server::TFriendRemove::default_instance();
}
::server::TFriendRemove* Envelope::mutable_friend_remove() {
  if (!has_friend_remove()) {
    clear_payload();
    set_has_friend_remove();
    payload_.friend_remove_ = new ::server::TFriendRemove;
  }
  // @@protoc_insertion_point(field_mutable:server.Envelope.friend_remove)
  return payload_.friend_remove_;
}
::server::TFriendRemove* Envelope::release_friend_remove() {
  // @@protoc_insertion_point(field_release:server.Envelope.friend_remove)
  if (has_friend_remove()) {
    clear_has_payload();
    ::server::TFriendRemove* temp = payload_.friend_remove_;
    payload_.friend_remove_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void Envelope::set_allocated_friend_remove(::server::TFriendRemove* friend_remove) {
  clear_payload();
  if (friend_remove) {
    set_has_friend_remove();
    payload_.friend_remove_ = friend_remove;
  }
  // @@protoc_insertion_point(field_set_allocated:server.Envelope.friend_remove)
}

// optional .server.TFriendBlock friend_block = 14;
bool Envelope::has_friend_block() const {
  return payload_case() == kFriendBlock;
}
void Envelope::set_has_friend_block() {
  _oneof_case_[0] = kFriendBlock;
}
void Envelope::clear_friend_block() {
  if (has_friend_block()) {
    delete payload_.friend_block_;
    clear_has_payload();
  }
}
 const ::server::TFriendBlock& Envelope::friend_block() const {
  // @@protoc_insertion_point(field_get:server.Envelope.friend_block)
  return has_friend_block()
      ? *payload_.friend_block_
      : ::server::TFriendBlock::default_instance();
}
::server::TFriendBlock* Envelope::mutable_friend_block() {
  if (!has_friend_block()) {
    clear_payload();
    set_has_friend_block();
    payload_.friend_block_ = new ::server::TFriendBlock;
  }
  // @@protoc_insertion_point(field_mutable:server.Envelope.friend_block)
  return payload_.friend_block_;
}
::server::TFriendBlock* Envelope::release_friend_block() {
  // @@protoc_insertion_point(field_release:server.Envelope.friend_block)
  if (has_friend_block()) {
    clear_has_payload();
    ::server::TFriendBlock* temp = payload_.friend_block_;
    payload_.friend_block_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void Envelope::set_allocated_friend_block(::server::TFriendBlock* friend_block) {
  clear_payload();
  if (friend_block) {
    set_has_friend_block();
    payload_.friend_block_ = friend_block;
  }
  // @@protoc_insertion_point(field_set_allocated:server.Envelope.friend_block)
}

// optional .server.TFriendsList friends_list = 15;
bool Envelope::has_friends_list() const {
  return payload_case() == kFriendsList;
}
void Envelope::set_has_friends_list() {
  _oneof_case_[0] = kFriendsList;
}
void Envelope::clear_friends_list() {
  if (has_friends_list()) {
    delete payload_.friends_list_;
    clear_has_payload();
  }
}
 const ::server::TFriendsList& Envelope::friends_list() const {
  // @@protoc_insertion_point(field_get:server.Envelope.friends_list)
  return has_friends_list()
      ? *payload_.friends_list_
      : ::server::TFriendsList::default_instance();
}
::server::TFriendsList* Envelope::mutable_friends_list() {
  if (!has_friends_list()) {
    clear_payload();
    set_has_friends_list();
    payload_.friends_list_ = new ::server::TFriendsList;
  }
  // @@protoc_insertion_point(field_mutable:server.Envelope.friends_list)
  return payload_.friends_list_;
}
::server::TFriendsList* Envelope::release_friends_list() {
  // @@protoc_insertion_point(field_release:server.Envelope.friends_list)
  if (has_friends_list()) {
    clear_has_payload();
    ::server::TFriendsList* temp = payload_.friends_list_;
    payload_.friends_list_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void Envelope::set_allocated_friends_list(::server::TFriendsList* friends_list) {
  clear_payload();
  if (friends_list) {
    set_has_friends_list();
    payload_.friends_list_ = friends_list;
  }
  // @@protoc_insertion_point(field_set_allocated:server.Envelope.friends_list)
}

// optional .server.TFriends friends = 16;
bool Envelope::has_friends() const {
  return payload_case() == kFriends;
}
void Envelope::set_has_friends() {
  _oneof_case_[0] = kFriends;
}
void Envelope::clear_friends() {
  if (has_friends()) {
    delete payload_.friends_;
    clear_has_payload();
  }
}
 const ::server::TFriends& Envelope::friends() const {
  // @@protoc_insertion_point(field_get:server.Envelope.friends)
  return has_friends()
      ? *payload_.friends_
      : ::server::TFriends::default_instance();
}
::server::TFriends* Envelope::mutable_friends() {
  if (!has_friends()) {
    clear_payload();
    set_has_friends();
    payload_.friends_ = new ::server::TFriends;
  }
  // @@protoc_insertion_point(field_mutable:server.Envelope.friends)
  return payload_.friends_;
}
::server::TFriends* Envelope::release_friends() {
  // @@protoc_insertion_point(field_release:server.Envelope.friends)
  if (has_friends()) {
    clear_has_payload();
    ::server::TFriends* temp = payload_.friends_;
    payload_.friends_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void Envelope::set_allocated_friends(::server::TFriends* friends) {
  clear_payload();
  if (friends) {
    set_has_friends();
    payload_.friends_ = friends;
  }
  // @@protoc_insertion_point(field_set_allocated:server.Envelope.friends)
}

// optional .server.TGroupCreate group_create = 17;
bool Envelope::has_group_create() const {
  return payload_case() == kGroupCreate;
}
void Envelope::set_has_group_create() {
  _oneof_case_[0] = kGroupCreate;
}
void Envelope::clear_group_create() {
  if (has_group_create()) {
    delete payload_.group_create_;
    clear_has_payload();
  }
}
 const ::server::TGroupCreate& Envelope::group_create() const {
  // @@protoc_insertion_point(field_get:server.Envelope.group_create)
  return has_group_create()
      ? *payload_.group_create_
      : ::server::TGroupCreate::default_instance();
}
::server::TGroupCreate* Envelope::mutable_group_create() {
  if (!has_group_create()) {
    clear_payload();
    set_has_group_create();
    payload_.group_create_ = new ::server::TGroupCreate;
  }
  // @@protoc_insertion_point(field_mutable:server.Envelope.group_create)
  return payload_.group_create_;
}
::server::TGroupCreate* Envelope::release_group_create() {
  // @@protoc_insertion_point(field_release:server.Envelope.group_create)
  if (has_group_create()) {
    clear_has_payload();
    ::server::TGroupCreate* temp = payload_.group_create_;
    payload_.group_create_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void Envelope::set_allocated_group_create(::server::TGroupCreate* group_create) {
  clear_payload();
  if (group_create) {
    set_has_group_create();
    payload_.group_create_ = group_create;
  }
  // @@protoc_insertion_point(field_set_allocated:server.Envelope.group_create)
}

// optional .server.TGroupUpdate group_update = 18;
bool Envelope::has_group_update() const {
  return payload_case() == kGroupUpdate;
}
void Envelope::set_has_group_update() {
  _oneof_case_[0] = kGroupUpdate;
}
void Envelope::clear_group_update() {
  if (has_group_update()) {
    delete payload_.group_update_;
    clear_has_payload();
  }
}
 const ::server::TGroupUpdate& Envelope::group_update() const {
  // @@protoc_insertion_point(field_get:server.Envelope.group_update)
  return has_group_update()
      ? *payload_.group_update_
      : ::server::TGroupUpdate::default_instance();
}
::server::TGroupUpdate* Envelope::mutable_group_update() {
  if (!has_group_update()) {
    clear_payload();
    set_has_group_update();
    payload_.group_update_ = new ::server::TGroupUpdate;
  }
  // @@protoc_insertion_point(field_mutable:server.Envelope.group_update)
  return payload_.group_update_;
}
::server::TGroupUpdate* Envelope::release_group_update() {
  // @@protoc_insertion_point(field_release:server.Envelope.group_update)
  if (has_group_update()) {
    clear_has_payload();
    ::server::TGroupUpdate* temp = payload_.group_update_;
    payload_.group_update_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void Envelope::set_allocated_group_update(::server::TGroupUpdate* group_update) {
  clear_payload();
  if (group_update) {
    set_has_group_update();
    payload_.group_update_ = group_update;
  }
  // @@protoc_insertion_point(field_set_allocated:server.Envelope.group_update)
}

// optional .server.TGroupRemove group_remove = 19;
bool Envelope::has_group_remove() const {
  return payload_case() == kGroupRemove;
}
void Envelope::set_has_group_remove() {
  _oneof_case_[0] = kGroupRemove;
}
void Envelope::clear_group_remove() {
  if (has_group_remove()) {
    delete payload_.group_remove_;
    clear_has_payload();
  }
}
 const ::server::TGroupRemove& Envelope::group_remove() const {
  // @@protoc_insertion_point(field_get:server.Envelope.group_remove)
  return has_group_remove()
      ? *payload_.group_remove_
      : ::server::TGroupRemove::default_instance();
}
::server::TGroupRemove* Envelope::mutable_group_remove() {
  if (!has_group_remove()) {
    clear_payload();
    set_has_group_remove();
    payload_.group_remove_ = new ::server::TGroupRemove;
  }
  // @@protoc_insertion_point(field_mutable:server.Envelope.group_remove)
  return payload_.group_remove_;
}
::server::TGroupRemove* Envelope::release_group_remove() {
  // @@protoc_insertion_point(field_release:server.Envelope.group_remove)
  if (has_group_remove()) {
    clear_has_payload();
    ::server::TGroupRemove* temp = payload_.group_remove_;
    payload_.group_remove_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void Envelope::set_allocated_group_remove(::server::TGroupRemove* group_remove) {
  clear_payload();
  if (group_remove) {
    set_has_group_remove();
    payload_.group_remove_ = group_remove;
  }
  // @@protoc_insertion_point(field_set_allocated:server.Envelope.group_remove)
}

// optional .server.TGroupsFetch groups_fetch = 20;
bool Envelope::has_groups_fetch() const {
  return payload_case() == kGroupsFetch;
}
void Envelope::set_has_groups_fetch() {
  _oneof_case_[0] = kGroupsFetch;
}
void Envelope::clear_groups_fetch() {
  if (has_groups_fetch()) {
    delete payload_.groups_fetch_;
    clear_has_payload();
  }
}
 const ::server::TGroupsFetch& Envelope::groups_fetch() const {
  // @@protoc_insertion_point(field_get:server.Envelope.groups_fetch)
  return has_groups_fetch()
      ? *payload_.groups_fetch_
      : ::server::TGroupsFetch::default_instance();
}
::server::TGroupsFetch* Envelope::mutable_groups_fetch() {
  if (!has_groups_fetch()) {
    clear_payload();
    set_has_groups_fetch();
    payload_.groups_fetch_ = new ::server::TGroupsFetch;
  }
  // @@protoc_insertion_point(field_mutable:server.Envelope.groups_fetch)
  return payload_.groups_fetch_;
}
::server::TGroupsFetch* Envelope::release_groups_fetch() {
  // @@protoc_insertion_point(field_release:server.Envelope.groups_fetch)
  if (has_groups_fetch()) {
    clear_has_payload();
    ::server::TGroupsFetch* temp = payload_.groups_fetch_;
    payload_.groups_fetch_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void Envelope::set_allocated_groups_fetch(::server::TGroupsFetch* groups_fetch) {
  clear_payload();
  if (groups_fetch) {
    set_has_groups_fetch();
    payload_.groups_fetch_ = groups_fetch;
  }
  // @@protoc_insertion_point(field_set_allocated:server.Envelope.groups_fetch)
}

// optional .server.TGroupsList groups_list = 21;
bool Envelope::has_groups_list() const {
  return payload_case() == kGroupsList;
}
void Envelope::set_has_groups_list() {
  _oneof_case_[0] = kGroupsList;
}
void Envelope::clear_groups_list() {
  if (has_groups_list()) {
    delete payload_.groups_list_;
    clear_has_payload();
  }
}
 const ::server::TGroupsList& Envelope::groups_list() const {
  // @@protoc_insertion_point(field_get:server.Envelope.groups_list)
  return has_groups_list()
      ? *payload_.groups_list_
      : ::server::TGroupsList::default_instance();
}
::server::TGroupsList* Envelope::mutable_groups_list() {
  if (!has_groups_list()) {
    clear_payload();
    set_has_groups_list();
    payload_.groups_list_ = new ::server::TGroupsList;
  }
  // @@protoc_insertion_point(field_mutable:server.Envelope.groups_list)
  return payload_.groups_list_;
}
::server::TGroupsList* Envelope::release_groups_list() {
  // @@protoc_insertion_point(field_release:server.Envelope.groups_list)
  if (has_groups_list()) {
    clear_has_payload();
    ::server::TGroupsList* temp = payload_.groups_list_;
    payload_.groups_list_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void Envelope::set_allocated_groups_list(::server::TGroupsList* groups_list) {
  clear_payload();
  if (groups_list) {
    set_has_groups_list();
    payload_.groups_list_ = groups_list;
  }
  // @@protoc_insertion_point(field_set_allocated:server.Envelope.groups_list)
}

// optional .server.TGroupsSelfList groups_self_list = 22;
bool Envelope::has_groups_self_list() const {
  return payload_case() == kGroupsSelfList;
}
void Envelope::set_has_groups_self_list() {
  _oneof_case_[0] = kGroupsSelfList;
}
void Envelope::clear_groups_self_list() {
  if (has_groups_self_list()) {
    delete payload_.groups_self_list_;
    clear_has_payload();
  }
}
 const ::server::TGroupsSelfList& Envelope::groups_self_list() const {
  // @@protoc_insertion_point(field_get:server.Envelope.groups_self_list)
  return has_groups_self_list()
      ? *payload_.groups_self_list_
      : ::server::TGroupsSelfList::default_instance();
}
::server::TGroupsSelfList* Envelope::mutable_groups_self_list() {
  if (!has_groups_self_list()) {
    clear_payload();
    set_has_groups_self_list();
    payload_.groups_self_list_ = new ::server::TGroupsSelfList;
  }
  // @@protoc_insertion_point(field_mutable:server.Envelope.groups_self_list)
  return payload_.groups_self_list_;
}
::server::TGroupsSelfList* Envelope::release_groups_self_list() {
  // @@protoc_insertion_point(field_release:server.Envelope.groups_self_list)
  if (has_groups_self_list()) {
    clear_has_payload();
    ::server::TGroupsSelfList* temp = payload_.groups_self_list_;
    payload_.groups_self_list_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void Envelope::set_allocated_groups_self_list(::server::TGroupsSelfList* groups_self_list) {
  clear_payload();
  if (groups_self_list) {
    set_has_groups_self_list();
    payload_.groups_self_list_ = groups_self_list;
  }
  // @@protoc_insertion_point(field_set_allocated:server.Envelope.groups_self_list)
}

// optional .server.TGroupUsersList group_users_list = 23;
bool Envelope::has_group_users_list() const {
  return payload_case() == kGroupUsersList;
}
void Envelope::set_has_group_users_list() {
  _oneof_case_[0] = kGroupUsersList;
}
void Envelope::clear_group_users_list() {
  if (has_group_users_list()) {
    delete payload_.group_users_list_;
    clear_has_payload();
  }
}
 const ::server::TGroupUsersList& Envelope::group_users_list() const {
  // @@protoc_insertion_point(field_get:server.Envelope.group_users_list)
  return has_group_users_list()
      ? *payload_.group_users_list_
      : ::server::TGroupUsersList::default_instance();
}
::server::TGroupUsersList* Envelope::mutable_group_users_list() {
  if (!has_group_users_list()) {
    clear_payload();
    set_has_group_users_list();
    payload_.group_users_list_ = new ::server::TGroupUsersList;
  }
  // @@protoc_insertion_point(field_mutable:server.Envelope.group_users_list)
  return payload_.group_users_list_;
}
::server::TGroupUsersList* Envelope::release_group_users_list() {
  // @@protoc_insertion_point(field_release:server.Envelope.group_users_list)
  if (has_group_users_list()) {
    clear_has_payload();
    ::server::TGroupUsersList* temp = payload_.group_users_list_;
    payload_.group_users_list_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void Envelope::set_allocated_group_users_list(::server::TGroupUsersList* group_users_list) {
  clear_payload();
  if (group_users_list) {
    set_has_group_users_list();
    payload_.group_users_list_ = group_users_list;
  }
  // @@protoc_insertion_point(field_set_allocated:server.Envelope.group_users_list)
}

// optional .server.TGroupJoin group_join = 24;
bool Envelope::has_group_join() const {
  return payload_case() == kGroupJoin;
}
void Envelope::set_has_group_join() {
  _oneof_case_[0] = kGroupJoin;
}
void Envelope::clear_group_join() {
  if (has_group_join()) {
    delete payload_.group_join_;
    clear_has_payload();
  }
}
 const ::server::TGroupJoin& Envelope::group_join() const {
  // @@protoc_insertion_point(field_get:server.Envelope.group_join)
  return has_group_join()
      ? *payload_.group_join_
      : ::server::TGroupJoin::default_instance();
}
::server::TGroupJoin* Envelope::mutable_group_join() {
  if (!has_group_join()) {
    clear_payload();
    set_has_group_join();
    payload_.group_join_ = new ::server::TGroupJoin;
  }
  // @@protoc_insertion_point(field_mutable:server.Envelope.group_join)
  return payload_.group_join_;
}
::server::TGroupJoin* Envelope::release_group_join() {
  // @@protoc_insertion_point(field_release:server.Envelope.group_join)
  if (has_group_join()) {
    clear_has_payload();
    ::server::TGroupJoin* temp = payload_.group_join_;
    payload_.group_join_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void Envelope::set_allocated_group_join(::server::TGroupJoin* group_join) {
  clear_payload();
  if (group_join) {
    set_has_group_join();
    payload_.group_join_ = group_join;
  }
  // @@protoc_insertion_point(field_set_allocated:server.Envelope.group_join)
}

// optional .server.TGroupLeave group_leave = 25;
bool Envelope::has_group_leave() const {
  return payload_case() == kGroupLeave;
}
void Envelope::set_has_group_leave() {
  _oneof_case_[0] = kGroupLeave;
}
void Envelope::clear_group_leave() {
  if (has_group_leave()) {
    delete payload_.group_leave_;
    clear_has_payload();
  }
}
 const ::server::TGroupLeave& Envelope::group_leave() const {
  // @@protoc_insertion_point(field_get:server.Envelope.group_leave)
  return has_group_leave()
      ? *payload_.group_leave_
      : ::server::TGroupLeave::default_instance();
}
::server::TGroupLeave* Envelope::mutable_group_leave() {
  if (!has_group_leave()) {
    clear_payload();
    set_has_group_leave();
    payload_.group_leave_ = new ::server::TGroupLeave;
  }
  // @@protoc_insertion_point(field_mutable:server.Envelope.group_leave)
  return payload_.group_leave_;
}
::server::TGroupLeave* Envelope::release_group_leave() {
  // @@protoc_insertion_point(field_release:server.Envelope.group_leave)
  if (has_group_leave()) {
    clear_has_payload();
    ::server::TGroupLeave* temp = payload_.group_leave_;
    payload_.group_leave_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void Envelope::set_allocated_group_leave(::server::TGroupLeave* group_leave) {
  clear_payload();
  if (group_leave) {
    set_has_group_leave();
    payload_.group_leave_ = group_leave;
  }
  // @@protoc_insertion_point(field_set_allocated:server.Envelope.group_leave)
}

// optional .server.TGroupUserAdd group_user_add = 26;
bool Envelope::has_group_user_add() const {
  return payload_case() == kGroupUserAdd;
}
void Envelope::set_has_group_user_add() {
  _oneof_case_[0] = kGroupUserAdd;
}
void Envelope::clear_group_user_add() {
  if (has_group_user_add()) {
    delete payload_.group_user_add_;
    clear_has_payload();
  }
}
 const ::server::TGroupUserAdd& Envelope::group_user_add() const {
  // @@protoc_insertion_point(field_get:server.Envelope.group_user_add)
  return has_group_user_add()
      ? *payload_.group_user_add_
      : ::server::TGroupUserAdd::default_instance();
}
::server::TGroupUserAdd* Envelope::mutable_group_user_add() {
  if (!has_group_user_add()) {
    clear_payload();
    set_has_group_user_add();
    payload_.group_user_add_ = new ::server::TGroupUserAdd;
  }
  // @@protoc_insertion_point(field_mutable:server.Envelope.group_user_add)
  return payload_.group_user_add_;
}
::server::TGroupUserAdd* Envelope::release_group_user_add() {
  // @@protoc_insertion_point(field_release:server.Envelope.group_user_add)
  if (has_group_user_add()) {
    clear_has_payload();
    ::server::TGroupUserAdd* temp = payload_.group_user_add_;
    payload_.group_user_add_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void Envelope::set_allocated_group_user_add(::server::TGroupUserAdd* group_user_add) {
  clear_payload();
  if (group_user_add) {
    set_has_group_user_add();
    payload_.group_user_add_ = group_user_add;
  }
  // @@protoc_insertion_point(field_set_allocated:server.Envelope.group_user_add)
}

// optional .server.TGroupUserKick group_user_kick = 27;
bool Envelope::has_group_user_kick() const {
  return payload_case() == kGroupUserKick;
}
void Envelope::set_has_group_user_kick() {
  _oneof_case_[0] = kGroupUserKick;
}
void Envelope::clear_group_user_kick() {
  if (has_group_user_kick()) {
    delete payload_.group_user_kick_;
    clear_has_payload();
  }
}
 const ::server::TGroupUserKick& Envelope::group_user_kick() const {
  // @@protoc_insertion_point(field_get:server.Envelope.group_user_kick)
  return has_group_user_kick()
      ? *payload_.group_user_kick_
      : ::server::TGroupUserKick::default_instance();
}
::server::TGroupUserKick* Envelope::mutable_group_user_kick() {
  if (!has_group_user_kick()) {
    clear_payload();
    set_has_group_user_kick();
    payload_.group_user_kick_ = new ::server::TGroupUserKick;
  }
  // @@protoc_insertion_point(field_mutable:server.Envelope.group_user_kick)
  return payload_.group_user_kick_;
}
::server::TGroupUserKick* Envelope::release_group_user_kick() {
  // @@protoc_insertion_point(field_release:server.Envelope.group_user_kick)
  if (has_group_user_kick()) {
    clear_has_payload();
    ::server::TGroupUserKick* temp = payload_.group_user_kick_;
    payload_.group_user_kick_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void Envelope::set_allocated_group_user_kick(::server::TGroupUserKick* group_user_kick) {
  clear_payload();
  if (group_user_kick) {
    set_has_group_user_kick();
    payload_.group_user_kick_ = group_user_kick;
  }
  // @@protoc_insertion_point(field_set_allocated:server.Envelope.group_user_kick)
}

// optional .server.TGroupUserPromote group_user_promote = 28;
bool Envelope::has_group_user_promote() const {
  return payload_case() == kGroupUserPromote;
}
void Envelope::set_has_group_user_promote() {
  _oneof_case_[0] = kGroupUserPromote;
}
void Envelope::clear_group_user_promote() {
  if (has_group_user_promote()) {
    delete payload_.group_user_promote_;
    clear_has_payload();
  }
}
 const ::server::TGroupUserPromote& Envelope::group_user_promote() const {
  // @@protoc_insertion_point(field_get:server.Envelope.group_user_promote)
  return has_group_user_promote()
      ? *payload_.group_user_promote_
      : ::server::TGroupUserPromote::default_instance();
}
::server::TGroupUserPromote* Envelope::mutable_group_user_promote() {
  if (!has_group_user_promote()) {
    clear_payload();
    set_has_group_user_promote();
    payload_.group_user_promote_ = new ::server::TGroupUserPromote;
  }
  // @@protoc_insertion_point(field_mutable:server.Envelope.group_user_promote)
  return payload_.group_user_promote_;
}
::server::TGroupUserPromote* Envelope::release_group_user_promote() {
  // @@protoc_insertion_point(field_release:server.Envelope.group_user_promote)
  if (has_group_user_promote()) {
    clear_has_payload();
    ::server::TGroupUserPromote* temp = payload_.group_user_promote_;
    payload_.group_user_promote_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void Envelope::set_allocated_group_user_promote(::server::TGroupUserPromote* group_user_promote) {
  clear_payload();
  if (group_user_promote) {
    set_has_group_user_promote();
    payload_.group_user_promote_ = group_user_promote;
  }
  // @@protoc_insertion_point(field_set_allocated:server.Envelope.group_user_promote)
}

// optional .server.TGroup group = 29;
bool Envelope::has_group() const {
  return payload_case() == kGroup;
}
void Envelope::set_has_group() {
  _oneof_case_[0] = kGroup;
}
void Envelope::clear_group() {
  if (has_group()) {
    delete payload_.group_;
    clear_has_payload();
  }
}
 const ::server::TGroup& Envelope::group() const {
  // @@protoc_insertion_point(field_get:server.Envelope.group)
  return has_group()
      ? *payload_.group_
      : ::server::TGroup::default_instance();
}
::server::TGroup* Envelope::mutable_group() {
  if (!has_group()) {
    clear_payload();
    set_has_group();
    payload_.group_ = new ::server::TGroup;
  }
  // @@protoc_insertion_point(field_mutable:server.Envelope.group)
  return payload_.group_;
}
::server::TGroup* Envelope::release_group() {
  // @@protoc_insertion_point(field_release:server.Envelope.group)
  if (has_group()) {
    clear_has_payload();
    ::server::TGroup* temp = payload_.group_;
    payload_.group_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void Envelope::set_allocated_group(::server::TGroup* group) {
  clear_payload();
  if (group) {
    set_has_group();
    payload_.group_ = group;
  }
  // @@protoc_insertion_point(field_set_allocated:server.Envelope.group)
}

// optional .server.TGroups groups = 30;
bool Envelope::has_groups() const {
  return payload_case() == kGroups;
}
void Envelope::set_has_groups() {
  _oneof_case_[0] = kGroups;
}
void Envelope::clear_groups() {
  if (has_groups()) {
    delete payload_.groups_;
    clear_has_payload();
  }
}
 const ::server::TGroups& Envelope::groups() const {
  // @@protoc_insertion_point(field_get:server.Envelope.groups)
  return has_groups()
      ? *payload_.groups_
      : ::server::TGroups::default_instance();
}
::server::TGroups* Envelope::mutable_groups() {
  if (!has_groups()) {
    clear_payload();
    set_has_groups();
    payload_.groups_ = new ::server::TGroups;
  }
  // @@protoc_insertion_point(field_mutable:server.Envelope.groups)
  return payload_.groups_;
}
::server::TGroups* Envelope::release_groups() {
  // @@protoc_insertion_point(field_release:server.Envelope.groups)
  if (has_groups()) {
    clear_has_payload();
    ::server::TGroups* temp = payload_.groups_;
    payload_.groups_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void Envelope::set_allocated_groups(::server::TGroups* groups) {
  clear_payload();
  if (groups) {
    set_has_groups();
    payload_.groups_ = groups;
  }
  // @@protoc_insertion_point(field_set_allocated:server.Envelope.groups)
}

// optional .server.TGroupUsers group_users = 31;
bool Envelope::has_group_users() const {
  return payload_case() == kGroupUsers;
}
void Envelope::set_has_group_users() {
  _oneof_case_[0] = kGroupUsers;
}
void Envelope::clear_group_users() {
  if (has_group_users()) {
    delete payload_.group_users_;
    clear_has_payload();
  }
}
 const ::server::TGroupUsers& Envelope::group_users() const {
  // @@protoc_insertion_point(field_get:server.Envelope.group_users)
  return has_group_users()
      ? *payload_.group_users_
      : ::server::TGroupUsers::default_instance();
}
::server::TGroupUsers* Envelope::mutable_group_users() {
  if (!has_group_users()) {
    clear_payload();
    set_has_group_users();
    payload_.group_users_ = new ::server::TGroupUsers;
  }
  // @@protoc_insertion_point(field_mutable:server.Envelope.group_users)
  return payload_.group_users_;
}
::server::TGroupUsers* Envelope::release_group_users() {
  // @@protoc_insertion_point(field_release:server.Envelope.group_users)
  if (has_group_users()) {
    clear_has_payload();
    ::server::TGroupUsers* temp = payload_.group_users_;
    payload_.group_users_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void Envelope::set_allocated_group_users(::server::TGroupUsers* group_users) {
  clear_payload();
  if (group_users) {
    set_has_group_users();
    payload_.group_users_ = group_users;
  }
  // @@protoc_insertion_point(field_set_allocated:server.Envelope.group_users)
}

// optional .server.TTopicJoin topic_join = 32;
bool Envelope::has_topic_join() const {
  return payload_case() == kTopicJoin;
}
void Envelope::set_has_topic_join() {
  _oneof_case_[0] = kTopicJoin;
}
void Envelope::clear_topic_join() {
  if (has_topic_join()) {
    delete payload_.topic_join_;
    clear_has_payload();
  }
}
 const ::server::TTopicJoin& Envelope::topic_join() const {
  // @@protoc_insertion_point(field_get:server.Envelope.topic_join)
  return has_topic_join()
      ? *payload_.topic_join_
      : ::server::TTopicJoin::default_instance();
}
::server::TTopicJoin* Envelope::mutable_topic_join() {
  if (!has_topic_join()) {
    clear_payload();
    set_has_topic_join();
    payload_.topic_join_ = new ::server::TTopicJoin;
  }
  // @@protoc_insertion_point(field_mutable:server.Envelope.topic_join)
  return payload_.topic_join_;
}
::server::TTopicJoin* Envelope::release_topic_join() {
  // @@protoc_insertion_point(field_release:server.Envelope.topic_join)
  if (has_topic_join()) {
    clear_has_payload();
    ::server::TTopicJoin* temp = payload_.topic_join_;
    payload_.topic_join_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void Envelope::set_allocated_topic_join(::server::TTopicJoin* topic_join) {
  clear_payload();
  if (topic_join) {
    set_has_topic_join();
    payload_.topic_join_ = topic_join;
  }
  // @@protoc_insertion_point(field_set_allocated:server.Envelope.topic_join)
}

// optional .server.TTopicLeave topic_leave = 33;
bool Envelope::has_topic_leave() const {
  return payload_case() == kTopicLeave;
}
void Envelope::set_has_topic_leave() {
  _oneof_case_[0] = kTopicLeave;
}
void Envelope::clear_topic_leave() {
  if (has_topic_leave()) {
    delete payload_.topic_leave_;
    clear_has_payload();
  }
}
 const ::server::TTopicLeave& Envelope::topic_leave() const {
  // @@protoc_insertion_point(field_get:server.Envelope.topic_leave)
  return has_topic_leave()
      ? *payload_.topic_leave_
      : ::server::TTopicLeave::default_instance();
}
::server::TTopicLeave* Envelope::mutable_topic_leave() {
  if (!has_topic_leave()) {
    clear_payload();
    set_has_topic_leave();
    payload_.topic_leave_ = new ::server::TTopicLeave;
  }
  // @@protoc_insertion_point(field_mutable:server.Envelope.topic_leave)
  return payload_.topic_leave_;
}
::server::TTopicLeave* Envelope::release_topic_leave() {
  // @@protoc_insertion_point(field_release:server.Envelope.topic_leave)
  if (has_topic_leave()) {
    clear_has_payload();
    ::server::TTopicLeave* temp = payload_.topic_leave_;
    payload_.topic_leave_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void Envelope::set_allocated_topic_leave(::server::TTopicLeave* topic_leave) {
  clear_payload();
  if (topic_leave) {
    set_has_topic_leave();
    payload_.topic_leave_ = topic_leave;
  }
  // @@protoc_insertion_point(field_set_allocated:server.Envelope.topic_leave)
}

// optional .server.TTopicMessageSend topic_message_send = 34;
bool Envelope::has_topic_message_send() const {
  return payload_case() == kTopicMessageSend;
}
void Envelope::set_has_topic_message_send() {
  _oneof_case_[0] = kTopicMessageSend;
}
void Envelope::clear_topic_message_send() {
  if (has_topic_message_send()) {
    delete payload_.topic_message_send_;
    clear_has_payload();
  }
}
 const ::server::TTopicMessageSend& Envelope::topic_message_send() const {
  // @@protoc_insertion_point(field_get:server.Envelope.topic_message_send)
  return has_topic_message_send()
      ? *payload_.topic_message_send_
      : ::server::TTopicMessageSend::default_instance();
}
::server::TTopicMessageSend* Envelope::mutable_topic_message_send() {
  if (!has_topic_message_send()) {
    clear_payload();
    set_has_topic_message_send();
    payload_.topic_message_send_ = new ::server::TTopicMessageSend;
  }
  // @@protoc_insertion_point(field_mutable:server.Envelope.topic_message_send)
  return payload_.topic_message_send_;
}
::server::TTopicMessageSend* Envelope::release_topic_message_send() {
  // @@protoc_insertion_point(field_release:server.Envelope.topic_message_send)
  if (has_topic_message_send()) {
    clear_has_payload();
    ::server::TTopicMessageSend* temp = payload_.topic_message_send_;
    payload_.topic_message_send_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void Envelope::set_allocated_topic_message_send(::server::TTopicMessageSend* topic_message_send) {
  clear_payload();
  if (topic_message_send) {
    set_has_topic_message_send();
    payload_.topic_message_send_ = topic_message_send;
  }
  // @@protoc_insertion_point(field_set_allocated:server.Envelope.topic_message_send)
}

// optional .server.TTopicMessagesList topic_messages_list = 35;
bool Envelope::has_topic_messages_list() const {
  return payload_case() == kTopicMessagesList;
}
void Envelope::set_has_topic_messages_list() {
  _oneof_case_[0] = kTopicMessagesList;
}
void Envelope::clear_topic_messages_list() {
  if (has_topic_messages_list()) {
    delete payload_.topic_messages_list_;
    clear_has_payload();
  }
}
 const ::server::TTopicMessagesList& Envelope::topic_messages_list() const {
  // @@protoc_insertion_point(field_get:server.Envelope.topic_messages_list)
  return has_topic_messages_list()
      ? *payload_.topic_messages_list_
      : ::server::TTopicMessagesList::default_instance();
}
::server::TTopicMessagesList* Envelope::mutable_topic_messages_list() {
  if (!has_topic_messages_list()) {
    clear_payload();
    set_has_topic_messages_list();
    payload_.topic_messages_list_ = new ::server::TTopicMessagesList;
  }
  // @@protoc_insertion_point(field_mutable:server.Envelope.topic_messages_list)
  return payload_.topic_messages_list_;
}
::server::TTopicMessagesList* Envelope::release_topic_messages_list() {
  // @@protoc_insertion_point(field_release:server.Envelope.topic_messages_list)
  if (has_topic_messages_list()) {
    clear_has_payload();
    ::server::TTopicMessagesList* temp = payload_.topic_messages_list_;
    payload_.topic_messages_list_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void Envelope::set_allocated_topic_messages_list(::server::TTopicMessagesList* topic_messages_list) {
  clear_payload();
  if (topic_messages_list) {
    set_has_topic_messages_list();
    payload_.topic_messages_list_ = topic_messages_list;
  }
  // @@protoc_insertion_point(field_set_allocated:server.Envelope.topic_messages_list)
}

// optional .server.TTopic topic = 36;
bool Envelope::has_topic() const {
  return payload_case() == kTopic;
}
void Envelope::set_has_topic() {
  _oneof_case_[0] = kTopic;
}
void Envelope::clear_topic() {
  if (has_topic()) {
    delete payload_.topic_;
    clear_has_payload();
  }
}
 const ::server::TTopic& Envelope::topic() const {
  // @@protoc_insertion_point(field_get:server.Envelope.topic)
  return has_topic()
      ? *payload_.topic_
      : ::server::TTopic::default_instance();
}
::server::TTopic* Envelope::mutable_topic() {
  if (!has_topic()) {
    clear_payload();
    set_has_topic();
    payload_.topic_ = new ::server::TTopic;
  }
  // @@protoc_insertion_point(field_mutable:server.Envelope.topic)
  return payload_.topic_;
}
::server::TTopic* Envelope::release_topic() {
  // @@protoc_insertion_point(field_release:server.Envelope.topic)
  if (has_topic()) {
    clear_has_payload();
    ::server::TTopic* temp = payload_.topic_;
    payload_.topic_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void Envelope::set_allocated_topic(::server::TTopic* topic) {
  clear_payload();
  if (topic) {
    set_has_topic();
    payload_.topic_ = topic;
  }
  // @@protoc_insertion_point(field_set_allocated:server.Envelope.topic)
}

// optional .server.TTopicMessageAck topic_message_ack = 37;
bool Envelope::has_topic_message_ack() const {
  return payload_case() == kTopicMessageAck;
}
void Envelope::set_has_topic_message_ack() {
  _oneof_case_[0] = kTopicMessageAck;
}
void Envelope::clear_topic_message_ack() {
  if (has_topic_message_ack()) {
    delete payload_.topic_message_ack_;
    clear_has_payload();
  }
}
 const ::server::TTopicMessageAck& Envelope::topic_message_ack() const {
  // @@protoc_insertion_point(field_get:server.Envelope.topic_message_ack)
  return has_topic_message_ack()
      ? *payload_.topic_message_ack_
      : ::server::TTopicMessageAck::default_instance();
}
::server::TTopicMessageAck* Envelope::mutable_topic_message_ack() {
  if (!has_topic_message_ack()) {
    clear_payload();
    set_has_topic_message_ack();
    payload_.topic_message_ack_ = new ::server::TTopicMessageAck;
  }
  // @@protoc_insertion_point(field_mutable:server.Envelope.topic_message_ack)
  return payload_.topic_message_ack_;
}
::server::TTopicMessageAck* Envelope::release_topic_message_ack() {
  // @@protoc_insertion_point(field_release:server.Envelope.topic_message_ack)
  if (has_topic_message_ack()) {
    clear_has_payload();
    ::server::TTopicMessageAck* temp = payload_.topic_message_ack_;
    payload_.topic_message_ack_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void Envelope::set_allocated_topic_message_ack(::server::TTopicMessageAck* topic_message_ack) {
  clear_payload();
  if (topic_message_ack) {
    set_has_topic_message_ack();
    payload_.topic_message_ack_ = topic_message_ack;
  }
  // @@protoc_insertion_point(field_set_allocated:server.Envelope.topic_message_ack)
}

// optional .server.TopicMessage topic_message = 38;
bool Envelope::has_topic_message() const {
  return payload_case() == kTopicMessage;
}
void Envelope::set_has_topic_message() {
  _oneof_case_[0] = kTopicMessage;
}
void Envelope::clear_topic_message() {
  if (has_topic_message()) {
    delete payload_.topic_message_;
    clear_has_payload();
  }
}
 const ::server::TopicMessage& Envelope::topic_message() const {
  // @@protoc_insertion_point(field_get:server.Envelope.topic_message)
  return has_topic_message()
      ? *payload_.topic_message_
      : ::server::TopicMessage::default_instance();
}
::server::TopicMessage* Envelope::mutable_topic_message() {
  if (!has_topic_message()) {
    clear_payload();
    set_has_topic_message();
    payload_.topic_message_ = new ::server::TopicMessage;
  }
  // @@protoc_insertion_point(field_mutable:server.Envelope.topic_message)
  return payload_.topic_message_;
}
::server::TopicMessage* Envelope::release_topic_message() {
  // @@protoc_insertion_point(field_release:server.Envelope.topic_message)
  if (has_topic_message()) {
    clear_has_payload();
    ::server::TopicMessage* temp = payload_.topic_message_;
    payload_.topic_message_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void Envelope::set_allocated_topic_message(::server::TopicMessage* topic_message) {
  clear_payload();
  if (topic_message) {
    set_has_topic_message();
    payload_.topic_message_ = topic_message;
  }
  // @@protoc_insertion_point(field_set_allocated:server.Envelope.topic_message)
}

// optional .server.TTopicMessages topic_messages = 39;
bool Envelope::has_topic_messages() const {
  return payload_case() == kTopicMessages;
}
void Envelope::set_has_topic_messages() {
  _oneof_case_[0] = kTopicMessages;
}
void Envelope::clear_topic_messages() {
  if (has_topic_messages()) {
    delete payload_.topic_messages_;
    clear_has_payload();
  }
}
 const ::server::TTopicMessages& Envelope::topic_messages() const {
  // @@protoc_insertion_point(field_get:server.Envelope.topic_messages)
  return has_topic_messages()
      ? *payload_.topic_messages_
      : ::server::TTopicMessages::default_instance();
}
::server::TTopicMessages* Envelope::mutable_topic_messages() {
  if (!has_topic_messages()) {
    clear_payload();
    set_has_topic_messages();
    payload_.topic_messages_ = new ::server::TTopicMessages;
  }
  // @@protoc_insertion_point(field_mutable:server.Envelope.topic_messages)
  return payload_.topic_messages_;
}
::server::TTopicMessages* Envelope::release_topic_messages() {
  // @@protoc_insertion_point(field_release:server.Envelope.topic_messages)
  if (has_topic_messages()) {
    clear_has_payload();
    ::server::TTopicMessages* temp = payload_.topic_messages_;
    payload_.topic_messages_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void Envelope::set_allocated_topic_messages(::server::TTopicMessages* topic_messages) {
  clear_payload();
  if (topic_messages) {
    set_has_topic_messages();
    payload_.topic_messages_ = topic_messages;
  }
  // @@protoc_insertion_point(field_set_allocated:server.Envelope.topic_messages)
}

// optional .server.TopicPresence topic_presence = 40;
bool Envelope::has_topic_presence() const {
  return payload_case() == kTopicPresence;
}
void Envelope::set_has_topic_presence() {
  _oneof_case_[0] = kTopicPresence;
}
void Envelope::clear_topic_presence() {
  if (has_topic_presence()) {
    delete payload_.topic_presence_;
    clear_has_payload();
  }
}
 const ::server::TopicPresence& Envelope::topic_presence() const {
  // @@protoc_insertion_point(field_get:server.Envelope.topic_presence)
  return has_topic_presence()
      ? *payload_.topic_presence_
      : ::server::TopicPresence::default_instance();
}
::server::TopicPresence* Envelope::mutable_topic_presence() {
  if (!has_topic_presence()) {
    clear_payload();
    set_has_topic_presence();
    payload_.topic_presence_ = new ::server::TopicPresence;
  }
  // @@protoc_insertion_point(field_mutable:server.Envelope.topic_presence)
  return payload_.topic_presence_;
}
::server::TopicPresence* Envelope::release_topic_presence() {
  // @@protoc_insertion_point(field_release:server.Envelope.topic_presence)
  if (has_topic_presence()) {
    clear_has_payload();
    ::server::TopicPresence* temp = payload_.topic_presence_;
    payload_.topic_presence_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void Envelope::set_allocated_topic_presence(::server::TopicPresence* topic_presence) {
  clear_payload();
  if (topic_presence) {
    set_has_topic_presence();
    payload_.topic_presence_ = topic_presence;
  }
  // @@protoc_insertion_point(field_set_allocated:server.Envelope.topic_presence)
}

// optional .server.TMatchCreate match_create = 41;
bool Envelope::has_match_create() const {
  return payload_case() == kMatchCreate;
}
void Envelope::set_has_match_create() {
  _oneof_case_[0] = kMatchCreate;
}
void Envelope::clear_match_create() {
  if (has_match_create()) {
    delete payload_.match_create_;
    clear_has_payload();
  }
}
 const ::server::TMatchCreate& Envelope::match_create() const {
  // @@protoc_insertion_point(field_get:server.Envelope.match_create)
  return has_match_create()
      ? *payload_.match_create_
      : ::server::TMatchCreate::default_instance();
}
::server::TMatchCreate* Envelope::mutable_match_create() {
  if (!has_match_create()) {
    clear_payload();
    set_has_match_create();
    payload_.match_create_ = new ::server::TMatchCreate;
  }
  // @@protoc_insertion_point(field_mutable:server.Envelope.match_create)
  return payload_.match_create_;
}
::server::TMatchCreate* Envelope::release_match_create() {
  // @@protoc_insertion_point(field_release:server.Envelope.match_create)
  if (has_match_create()) {
    clear_has_payload();
    ::server::TMatchCreate* temp = payload_.match_create_;
    payload_.match_create_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void Envelope::set_allocated_match_create(::server::TMatchCreate* match_create) {
  clear_payload();
  if (match_create) {
    set_has_match_create();
    payload_.match_create_ = match_create;
  }
  // @@protoc_insertion_point(field_set_allocated:server.Envelope.match_create)
}

// optional .server.TMatchJoin match_join = 42;
bool Envelope::has_match_join() const {
  return payload_case() == kMatchJoin;
}
void Envelope::set_has_match_join() {
  _oneof_case_[0] = kMatchJoin;
}
void Envelope::clear_match_join() {
  if (has_match_join()) {
    delete payload_.match_join_;
    clear_has_payload();
  }
}
 const ::server::TMatchJoin& Envelope::match_join() const {
  // @@protoc_insertion_point(field_get:server.Envelope.match_join)
  return has_match_join()
      ? *payload_.match_join_
      : ::server::TMatchJoin::default_instance();
}
::server::TMatchJoin* Envelope::mutable_match_join() {
  if (!has_match_join()) {
    clear_payload();
    set_has_match_join();
    payload_.match_join_ = new ::server::TMatchJoin;
  }
  // @@protoc_insertion_point(field_mutable:server.Envelope.match_join)
  return payload_.match_join_;
}
::server::TMatchJoin* Envelope::release_match_join() {
  // @@protoc_insertion_point(field_release:server.Envelope.match_join)
  if (has_match_join()) {
    clear_has_payload();
    ::server::TMatchJoin* temp = payload_.match_join_;
    payload_.match_join_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void Envelope::set_allocated_match_join(::server::TMatchJoin* match_join) {
  clear_payload();
  if (match_join) {
    set_has_match_join();
    payload_.match_join_ = match_join;
  }
  // @@protoc_insertion_point(field_set_allocated:server.Envelope.match_join)
}

// optional .server.TMatchLeave match_leave = 43;
bool Envelope::has_match_leave() const {
  return payload_case() == kMatchLeave;
}
void Envelope::set_has_match_leave() {
  _oneof_case_[0] = kMatchLeave;
}
void Envelope::clear_match_leave() {
  if (has_match_leave()) {
    delete payload_.match_leave_;
    clear_has_payload();
  }
}
 const ::server::TMatchLeave& Envelope::match_leave() const {
  // @@protoc_insertion_point(field_get:server.Envelope.match_leave)
  return has_match_leave()
      ? *payload_.match_leave_
      : ::server::TMatchLeave::default_instance();
}
::server::TMatchLeave* Envelope::mutable_match_leave() {
  if (!has_match_leave()) {
    clear_payload();
    set_has_match_leave();
    payload_.match_leave_ = new ::server::TMatchLeave;
  }
  // @@protoc_insertion_point(field_mutable:server.Envelope.match_leave)
  return payload_.match_leave_;
}
::server::TMatchLeave* Envelope::release_match_leave() {
  // @@protoc_insertion_point(field_release:server.Envelope.match_leave)
  if (has_match_leave()) {
    clear_has_payload();
    ::server::TMatchLeave* temp = payload_.match_leave_;
    payload_.match_leave_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void Envelope::set_allocated_match_leave(::server::TMatchLeave* match_leave) {
  clear_payload();
  if (match_leave) {
    set_has_match_leave();
    payload_.match_leave_ = match_leave;
  }
  // @@protoc_insertion_point(field_set_allocated:server.Envelope.match_leave)
}

// optional .server.TMatchDataSend match_data_send = 44;
bool Envelope::has_match_data_send() const {
  return payload_case() == kMatchDataSend;
}
void Envelope::set_has_match_data_send() {
  _oneof_case_[0] = kMatchDataSend;
}
void Envelope::clear_match_data_send() {
  if (has_match_data_send()) {
    delete payload_.match_data_send_;
    clear_has_payload();
  }
}
 const ::server::TMatchDataSend& Envelope::match_data_send() const {
  // @@protoc_insertion_point(field_get:server.Envelope.match_data_send)
  return has_match_data_send()
      ? *payload_.match_data_send_
      : ::server::TMatchDataSend::default_instance();
}
::server::TMatchDataSend* Envelope::mutable_match_data_send() {
  if (!has_match_data_send()) {
    clear_payload();
    set_has_match_data_send();
    payload_.match_data_send_ = new ::server::TMatchDataSend;
  }
  // @@protoc_insertion_point(field_mutable:server.Envelope.match_data_send)
  return payload_.match_data_send_;
}
::server::TMatchDataSend* Envelope::release_match_data_send() {
  // @@protoc_insertion_point(field_release:server.Envelope.match_data_send)
  if (has_match_data_send()) {
    clear_has_payload();
    ::server::TMatchDataSend* temp = payload_.match_data_send_;
    payload_.match_data_send_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void Envelope::set_allocated_match_data_send(::server::TMatchDataSend* match_data_send) {
  clear_payload();
  if (match_data_send) {
    set_has_match_data_send();
    payload_.match_data_send_ = match_data_send;
  }
  // @@protoc_insertion_point(field_set_allocated:server.Envelope.match_data_send)
}

// optional .server.TMatch match = 45;
bool Envelope::has_match() const {
  return payload_case() == kMatch;
}
void Envelope::set_has_match() {
  _oneof_case_[0] = kMatch;
}
void Envelope::clear_match() {
  if (has_match()) {
    delete payload_.match_;
    clear_has_payload();
  }
}
 const ::server::TMatch& Envelope::match() const {
  // @@protoc_insertion_point(field_get:server.Envelope.match)
  return has_match()
      ? *payload_.match_
      : ::server::TMatch::default_instance();
}
::server::TMatch* Envelope::mutable_match() {
  if (!has_match()) {
    clear_payload();
    set_has_match();
    payload_.match_ = new ::server::TMatch;
  }
  // @@protoc_insertion_point(field_mutable:server.Envelope.match)
  return payload_.match_;
}
::server::TMatch* Envelope::release_match() {
  // @@protoc_insertion_point(field_release:server.Envelope.match)
  if (has_match()) {
    clear_has_payload();
    ::server::TMatch* temp = payload_.match_;
    payload_.match_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void Envelope::set_allocated_match(::server::TMatch* match) {
  clear_payload();
  if (match) {
    set_has_match();
    payload_.match_ = match;
  }
  // @@protoc_insertion_point(field_set_allocated:server.Envelope.match)
}

// optional .server.MatchData match_data = 46;
bool Envelope::has_match_data() const {
  return payload_case() == kMatchData;
}
void Envelope::set_has_match_data() {
  _oneof_case_[0] = kMatchData;
}
void Envelope::clear_match_data() {
  if (has_match_data()) {
    delete payload_.match_data_;
    clear_has_payload();
  }
}
 const ::server::MatchData& Envelope::match_data() const {
  // @@protoc_insertion_point(field_get:server.Envelope.match_data)
  return has_match_data()
      ? *payload_.match_data_
      : ::server::MatchData::default_instance();
}
::server::MatchData* Envelope::mutable_match_data() {
  if (!has_match_data()) {
    clear_payload();
    set_has_match_data();
    payload_.match_data_ = new ::server::MatchData;
  }
  // @@protoc_insertion_point(field_mutable:server.Envelope.match_data)
  return payload_.match_data_;
}
::server::MatchData* Envelope::release_match_data() {
  // @@protoc_insertion_point(field_release:server.Envelope.match_data)
  if (has_match_data()) {
    clear_has_payload();
    ::server::MatchData* temp = payload_.match_data_;
    payload_.match_data_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void Envelope::set_allocated_match_data(::server::MatchData* match_data) {
  clear_payload();
  if (match_data) {
    set_has_match_data();
    payload_.match_data_ = match_data;
  }
  // @@protoc_insertion_point(field_set_allocated:server.Envelope.match_data)
}

// optional .server.MatchPresence match_presence = 47;
bool Envelope::has_match_presence() const {
  return payload_case() == kMatchPresence;
}
void Envelope::set_has_match_presence() {
  _oneof_case_[0] = kMatchPresence;
}
void Envelope::clear_match_presence() {
  if (has_match_presence()) {
    delete payload_.match_presence_;
    clear_has_payload();
  }
}
 const ::server::MatchPresence& Envelope::match_presence() const {
  // @@protoc_insertion_point(field_get:server.Envelope.match_presence)
  return has_match_presence()
      ? *payload_.match_presence_
      : ::server::MatchPresence::default_instance();
}
::server::MatchPresence* Envelope::mutable_match_presence() {
  if (!has_match_presence()) {
    clear_payload();
    set_has_match_presence();
    payload_.match_presence_ = new ::server::MatchPresence;
  }
  // @@protoc_insertion_point(field_mutable:server.Envelope.match_presence)
  return payload_.match_presence_;
}
::server::MatchPresence* Envelope::release_match_presence() {
  // @@protoc_insertion_point(field_release:server.Envelope.match_presence)
  if (has_match_presence()) {
    clear_has_payload();
    ::server::MatchPresence* temp = payload_.match_presence_;
    payload_.match_presence_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void Envelope::set_allocated_match_presence(::server::MatchPresence* match_presence) {
  clear_payload();
  if (match_presence) {
    set_has_match_presence();
    payload_.match_presence_ = match_presence;
  }
  // @@protoc_insertion_point(field_set_allocated:server.Envelope.match_presence)
}

// optional .server.TStorageFetch storage_fetch = 48;
bool Envelope::has_storage_fetch() const {
  return payload_case() == kStorageFetch;
}
void Envelope::set_has_storage_fetch() {
  _oneof_case_[0] = kStorageFetch;
}
void Envelope::clear_storage_fetch() {
  if (has_storage_fetch()) {
    delete payload_.storage_fetch_;
    clear_has_payload();
  }
}
 const ::server::TStorageFetch& Envelope::storage_fetch() const {
  // @@protoc_insertion_point(field_get:server.Envelope.storage_fetch)
  return has_storage_fetch()
      ? *payload_.storage_fetch_
      : ::server::TStorageFetch::default_instance();
}
::server::TStorageFetch* Envelope::mutable_storage_fetch() {
  if (!has_storage_fetch()) {
    clear_payload();
    set_has_storage_fetch();
    payload_.storage_fetch_ = new ::server::TStorageFetch;
  }
  // @@protoc_insertion_point(field_mutable:server.Envelope.storage_fetch)
  return payload_.storage_fetch_;
}
::server::TStorageFetch* Envelope::release_storage_fetch() {
  // @@protoc_insertion_point(field_release:server.Envelope.storage_fetch)
  if (has_storage_fetch()) {
    clear_has_payload();
    ::server::TStorageFetch* temp = payload_.storage_fetch_;
    payload_.storage_fetch_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void Envelope::set_allocated_storage_fetch(::server::TStorageFetch* storage_fetch) {
  clear_payload();
  if (storage_fetch) {
    set_has_storage_fetch();
    payload_.storage_fetch_ = storage_fetch;
  }
  // @@protoc_insertion_point(field_set_allocated:server.Envelope.storage_fetch)
}

// optional .server.TStorageWrite storage_write = 49;
bool Envelope::has_storage_write() const {
  return payload_case() == kStorageWrite;
}
void Envelope::set_has_storage_write() {
  _oneof_case_[0] = kStorageWrite;
}
void Envelope::clear_storage_write() {
  if (has_storage_write()) {
    delete payload_.storage_write_;
    clear_has_payload();
  }
}
 const ::server::TStorageWrite& Envelope::storage_write() const {
  // @@protoc_insertion_point(field_get:server.Envelope.storage_write)
  return has_storage_write()
      ? *payload_.storage_write_
      : ::server::TStorageWrite::default_instance();
}
::server::TStorageWrite* Envelope::mutable_storage_write() {
  if (!has_storage_write()) {
    clear_payload();
    set_has_storage_write();
    payload_.storage_write_ = new ::server::TStorageWrite;
  }
  // @@protoc_insertion_point(field_mutable:server.Envelope.storage_write)
  return payload_.storage_write_;
}
::server::TStorageWrite* Envelope::release_storage_write() {
  // @@protoc_insertion_point(field_release:server.Envelope.storage_write)
  if (has_storage_write()) {
    clear_has_payload();
    ::server::TStorageWrite* temp = payload_.storage_write_;
    payload_.storage_write_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void Envelope::set_allocated_storage_write(::server::TStorageWrite* storage_write) {
  clear_payload();
  if (storage_write) {
    set_has_storage_write();
    payload_.storage_write_ = storage_write;
  }
  // @@protoc_insertion_point(field_set_allocated:server.Envelope.storage_write)
}

// optional .server.TStorageRemove storage_remove = 50;
bool Envelope::has_storage_remove() const {
  return payload_case() == kStorageRemove;
}
void Envelope::set_has_storage_remove() {
  _oneof_case_[0] = kStorageRemove;
}
void Envelope::clear_storage_remove() {
  if (has_storage_remove()) {
    delete payload_.storage_remove_;
    clear_has_payload();
  }
}
 const ::server::TStorageRemove& Envelope::storage_remove() const {
  // @@protoc_insertion_point(field_get:server.Envelope.storage_remove)
  return has_storage_remove()
      ? *payload_.storage_remove_
      : ::server::TStorageRemove::default_instance();
}
::server::TStorageRemove* Envelope::mutable_storage_remove() {
  if (!has_storage_remove()) {
    clear_payload();
    set_has_storage_remove();
    payload_.storage_remove_ = new ::server::TStorageRemove;
  }
  // @@protoc_insertion_point(field_mutable:server.Envelope.storage_remove)
  return payload_.storage_remove_;
}
::server::TStorageRemove* Envelope::release_storage_remove() {
  // @@protoc_insertion_point(field_release:server.Envelope.storage_remove)
  if (has_storage_remove()) {
    clear_has_payload();
    ::server::TStorageRemove* temp = payload_.storage_remove_;
    payload_.storage_remove_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void Envelope::set_allocated_storage_remove(::server::TStorageRemove* storage_remove) {
  clear_payload();
  if (storage_remove) {
    set_has_storage_remove();
    payload_.storage_remove_ = storage_remove;
  }
  // @@protoc_insertion_point(field_set_allocated:server.Envelope.storage_remove)
}

// optional .server.TStorageData storage_data = 51;
bool Envelope::has_storage_data() const {
  return payload_case() == kStorageData;
}
void Envelope::set_has_storage_data() {
  _oneof_case_[0] = kStorageData;
}
void Envelope::clear_storage_data() {
  if (has_storage_data()) {
    delete payload_.storage_data_;
    clear_has_payload();
  }
}
 const ::server::TStorageData& Envelope::storage_data() const {
  // @@protoc_insertion_point(field_get:server.Envelope.storage_data)
  return has_storage_data()
      ? *payload_.storage_data_
      : ::server::TStorageData::default_instance();
}
::server::TStorageData* Envelope::mutable_storage_data() {
  if (!has_storage_data()) {
    clear_payload();
    set_has_storage_data();
    payload_.storage_data_ = new ::server::TStorageData;
  }
  // @@protoc_insertion_point(field_mutable:server.Envelope.storage_data)
  return payload_.storage_data_;
}
::server::TStorageData* Envelope::release_storage_data() {
  // @@protoc_insertion_point(field_release:server.Envelope.storage_data)
  if (has_storage_data()) {
    clear_has_payload();
    ::server::TStorageData* temp = payload_.storage_data_;
    payload_.storage_data_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void Envelope::set_allocated_storage_data(::server::TStorageData* storage_data) {
  clear_payload();
  if (storage_data) {
    set_has_storage_data();
    payload_.storage_data_ = storage_data;
  }
  // @@protoc_insertion_point(field_set_allocated:server.Envelope.storage_data)
}

// optional .server.TStorageKey storage_key = 52;
bool Envelope::has_storage_key() const {
  return payload_case() == kStorageKey;
}
void Envelope::set_has_storage_key() {
  _oneof_case_[0] = kStorageKey;
}
void Envelope::clear_storage_key() {
  if (has_storage_key()) {
    delete payload_.storage_key_;
    clear_has_payload();
  }
}
 const ::server::TStorageKey& Envelope::storage_key() const {
  // @@protoc_insertion_point(field_get:server.Envelope.storage_key)
  return has_storage_key()
      ? *payload_.storage_key_
      : ::server::TStorageKey::default_instance();
}
::server::TStorageKey* Envelope::mutable_storage_key() {
  if (!has_storage_key()) {
    clear_payload();
    set_has_storage_key();
    payload_.storage_key_ = new ::server::TStorageKey;
  }
  // @@protoc_insertion_point(field_mutable:server.Envelope.storage_key)
  return payload_.storage_key_;
}
::server::TStorageKey* Envelope::release_storage_key() {
  // @@protoc_insertion_point(field_release:server.Envelope.storage_key)
  if (has_storage_key()) {
    clear_has_payload();
    ::server::TStorageKey* temp = payload_.storage_key_;
    payload_.storage_key_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void Envelope::set_allocated_storage_key(::server::TStorageKey* storage_key) {
  clear_payload();
  if (storage_key) {
    set_has_storage_key();
    payload_.storage_key_ = storage_key;
  }
  // @@protoc_insertion_point(field_set_allocated:server.Envelope.storage_key)
}

bool Envelope::has_payload() const {
  return payload_case() != PAYLOAD_NOT_SET;
}
void Envelope::clear_has_payload() {
  _oneof_case_[0] = PAYLOAD_NOT_SET;
}
Envelope::PayloadCase Envelope::payload_case() const {
  return Envelope::PayloadCase(_oneof_case_[0]);
}
inline const Envelope* Envelope::internal_default_instance() {
  return &Envelope_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Logout::Logout()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_api_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:server.Logout)
}

void Logout::InitAsDefaultInstance() {
}

Logout::Logout(const Logout& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:server.Logout)
}

void Logout::SharedCtor() {
  _cached_size_ = 0;
}

Logout::~Logout() {
  // @@protoc_insertion_point(destructor:server.Logout)
  SharedDtor();
}

void Logout::SharedDtor() {
}

void Logout::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Logout::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Logout_descriptor_;
}

const Logout& Logout::default_instance() {
  protobuf_InitDefaults_api_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<Logout> Logout_default_instance_;

Logout* Logout::New(::google::protobuf::Arena* arena) const {
  Logout* n = new Logout;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Logout::Clear() {
// @@protoc_insertion_point(message_clear_start:server.Logout)
}

bool Logout::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:server.Logout)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
  }
success:
  // @@protoc_insertion_point(parse_success:server.Logout)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:server.Logout)
  return false;
#undef DO_
}

void Logout::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:server.Logout)
  // @@protoc_insertion_point(serialize_end:server.Logout)
}

::google::protobuf::uint8* Logout::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:server.Logout)
  // @@protoc_insertion_point(serialize_to_array_end:server.Logout)
  return target;
}

size_t Logout::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:server.Logout)
  size_t total_size = 0;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Logout::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:server.Logout)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Logout* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Logout>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:server.Logout)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:server.Logout)
    UnsafeMergeFrom(*source);
  }
}

void Logout::MergeFrom(const Logout& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:server.Logout)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void Logout::UnsafeMergeFrom(const Logout& from) {
  GOOGLE_DCHECK(&from != this);
}

void Logout::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:server.Logout)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Logout::CopyFrom(const Logout& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:server.Logout)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool Logout::IsInitialized() const {

  return true;
}

void Logout::Swap(Logout* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Logout::InternalSwap(Logout* other) {
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Logout::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Logout_descriptor_;
  metadata.reflection = Logout_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Logout

inline const Logout* Logout::internal_default_instance() {
  return &Logout_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TLink::kEmailFieldNumber;
const int TLink::kFacebookFieldNumber;
const int TLink::kGoogleFieldNumber;
const int TLink::kGameCenterFieldNumber;
const int TLink::kSteamFieldNumber;
const int TLink::kDeviceFieldNumber;
const int TLink::kCustomFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TLink::TLink()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_api_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:server.TLink)
}

void TLink::InitAsDefaultInstance() {
  TLink_default_oneof_instance_->email_ = const_cast< ::server::AuthenticateRequest_Email*>(
      ::server::AuthenticateRequest_Email::internal_default_instance());
  TLink_default_oneof_instance_->facebook_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  TLink_default_oneof_instance_->google_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  TLink_default_oneof_instance_->game_center_ = const_cast< ::server::AuthenticateRequest_GameCenter*>(
      ::server::AuthenticateRequest_GameCenter::internal_default_instance());
  TLink_default_oneof_instance_->steam_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  TLink_default_oneof_instance_->device_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  TLink_default_oneof_instance_->custom_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

TLink::TLink(const TLink& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:server.TLink)
}

void TLink::SharedCtor() {
  clear_has_payload();
  _cached_size_ = 0;
}

TLink::~TLink() {
  // @@protoc_insertion_point(destructor:server.TLink)
  SharedDtor();
}

void TLink::SharedDtor() {
  if (has_payload()) {
    clear_payload();
  }
}

void TLink::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TLink::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TLink_descriptor_;
}

const TLink& TLink::default_instance() {
  protobuf_InitDefaults_api_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<TLink> TLink_default_instance_;

TLink* TLink::New(::google::protobuf::Arena* arena) const {
  TLink* n = new TLink;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TLink::clear_payload() {
// @@protoc_insertion_point(one_of_clear_start:server.TLink)
  switch (payload_case()) {
    case kEmail: {
      delete payload_.email_;
      break;
    }
    case kFacebook: {
      payload_.facebook_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
      break;
    }
    case kGoogle: {
      payload_.google_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
      break;
    }
    case kGameCenter: {
      delete payload_.game_center_;
      break;
    }
    case kSteam: {
      payload_.steam_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
      break;
    }
    case kDevice: {
      payload_.device_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
      break;
    }
    case kCustom: {
      payload_.custom_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
      break;
    }
    case PAYLOAD_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = PAYLOAD_NOT_SET;
}


void TLink::Clear() {
// @@protoc_insertion_point(message_clear_start:server.TLink)
  clear_payload();
}

bool TLink::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:server.TLink)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .server.AuthenticateRequest.Email email = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_email()));
        } else {
          goto handle_unusual;
        }
        goto after_custom;
        break;
      }

      // optional string facebook = 2;
      case 2: {
        if (tag == 18) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_facebook()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->facebook().data(), this->facebook().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "server.TLink.facebook"));
        } else {
          goto handle_unusual;
        }
        goto after_custom;
        break;
      }

      // optional string google = 3;
      case 3: {
        if (tag == 26) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_google()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->google().data(), this->google().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "server.TLink.google"));
        } else {
          goto handle_unusual;
        }
        goto after_custom;
        break;
      }

      // optional .server.AuthenticateRequest.GameCenter game_center = 4;
      case 4: {
        if (tag == 34) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_game_center()));
        } else {
          goto handle_unusual;
        }
        goto after_custom;
        break;
      }

      // optional string steam = 5;
      case 5: {
        if (tag == 42) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_steam()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->steam().data(), this->steam().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "server.TLink.steam"));
        } else {
          goto handle_unusual;
        }
        goto after_custom;
        break;
      }

      // optional string device = 6;
      case 6: {
        if (tag == 50) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_device()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->device().data(), this->device().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "server.TLink.device"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_custom;
        break;
      }

      // optional string custom = 7;
      case 7: {
        if (tag == 58) {
         parse_custom:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_custom()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->custom().data(), this->custom().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "server.TLink.custom"));
        } else {
          goto handle_unusual;
        }
       after_custom:
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:server.TLink)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:server.TLink)
  return false;
#undef DO_
}

void TLink::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:server.TLink)
  // optional .server.AuthenticateRequest.Email email = 1;
  if (has_email()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *payload_.email_, output);
  }

  // optional string facebook = 2;
  if (has_facebook()) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->facebook().data(), this->facebook().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server.TLink.facebook");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->facebook(), output);
  }

  // optional string google = 3;
  if (has_google()) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->google().data(), this->google().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server.TLink.google");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->google(), output);
  }

  // optional .server.AuthenticateRequest.GameCenter game_center = 4;
  if (has_game_center()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *payload_.game_center_, output);
  }

  // optional string steam = 5;
  if (has_steam()) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->steam().data(), this->steam().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server.TLink.steam");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->steam(), output);
  }

  // optional string device = 6;
  if (has_device()) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->device().data(), this->device().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server.TLink.device");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->device(), output);
  }

  // optional string custom = 7;
  if (has_custom()) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->custom().data(), this->custom().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server.TLink.custom");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->custom(), output);
  }

  // @@protoc_insertion_point(serialize_end:server.TLink)
}

::google::protobuf::uint8* TLink::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:server.TLink)
  // optional .server.AuthenticateRequest.Email email = 1;
  if (has_email()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *payload_.email_, false, target);
  }

  // optional string facebook = 2;
  if (has_facebook()) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->facebook().data(), this->facebook().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server.TLink.facebook");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->facebook(), target);
  }

  // optional string google = 3;
  if (has_google()) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->google().data(), this->google().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server.TLink.google");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->google(), target);
  }

  // optional .server.AuthenticateRequest.GameCenter game_center = 4;
  if (has_game_center()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *payload_.game_center_, false, target);
  }

  // optional string steam = 5;
  if (has_steam()) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->steam().data(), this->steam().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server.TLink.steam");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->steam(), target);
  }

  // optional string device = 6;
  if (has_device()) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->device().data(), this->device().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server.TLink.device");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->device(), target);
  }

  // optional string custom = 7;
  if (has_custom()) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->custom().data(), this->custom().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server.TLink.custom");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->custom(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:server.TLink)
  return target;
}

size_t TLink::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:server.TLink)
  size_t total_size = 0;

  switch (payload_case()) {
    // optional .server.AuthenticateRequest.Email email = 1;
    case kEmail: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *payload_.email_);
      break;
    }
    // optional string facebook = 2;
    case kFacebook: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->facebook());
      break;
    }
    // optional string google = 3;
    case kGoogle: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->google());
      break;
    }
    // optional .server.AuthenticateRequest.GameCenter game_center = 4;
    case kGameCenter: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *payload_.game_center_);
      break;
    }
    // optional string steam = 5;
    case kSteam: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->steam());
      break;
    }
    // optional string device = 6;
    case kDevice: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->device());
      break;
    }
    // optional string custom = 7;
    case kCustom: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->custom());
      break;
    }
    case PAYLOAD_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TLink::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:server.TLink)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const TLink* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TLink>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:server.TLink)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:server.TLink)
    UnsafeMergeFrom(*source);
  }
}

void TLink::MergeFrom(const TLink& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:server.TLink)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void TLink::UnsafeMergeFrom(const TLink& from) {
  GOOGLE_DCHECK(&from != this);
  switch (from.payload_case()) {
    case kEmail: {
      mutable_email()->::server::AuthenticateRequest_Email::MergeFrom(from.email());
      break;
    }
    case kFacebook: {
      set_facebook(from.facebook());
      break;
    }
    case kGoogle: {
      set_google(from.google());
      break;
    }
    case kGameCenter: {
      mutable_game_center()->::server::AuthenticateRequest_GameCenter::MergeFrom(from.game_center());
      break;
    }
    case kSteam: {
      set_steam(from.steam());
      break;
    }
    case kDevice: {
      set_device(from.device());
      break;
    }
    case kCustom: {
      set_custom(from.custom());
      break;
    }
    case PAYLOAD_NOT_SET: {
      break;
    }
  }
}

void TLink::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:server.TLink)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TLink::CopyFrom(const TLink& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:server.TLink)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool TLink::IsInitialized() const {

  return true;
}

void TLink::Swap(TLink* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TLink::InternalSwap(TLink* other) {
  std::swap(payload_, other->payload_);
  std::swap(_oneof_case_[0], other->_oneof_case_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TLink::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TLink_descriptor_;
  metadata.reflection = TLink_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TLink

// optional .server.AuthenticateRequest.Email email = 1;
bool TLink::has_email() const {
  return payload_case() == kEmail;
}
void TLink::set_has_email() {
  _oneof_case_[0] = kEmail;
}
void TLink::clear_email() {
  if (has_email()) {
    delete payload_.email_;
    clear_has_payload();
  }
}
 const ::server::AuthenticateRequest_Email& TLink::email() const {
  // @@protoc_insertion_point(field_get:server.TLink.email)
  return has_email()
      ? *payload_.email_
      : ::server::AuthenticateRequest_Email::default_instance();
}
::server::AuthenticateRequest_Email* TLink::mutable_email() {
  if (!has_email()) {
    clear_payload();
    set_has_email();
    payload_.email_ = new ::server::AuthenticateRequest_Email;
  }
  // @@protoc_insertion_point(field_mutable:server.TLink.email)
  return payload_.email_;
}
::server::AuthenticateRequest_Email* TLink::release_email() {
  // @@protoc_insertion_point(field_release:server.TLink.email)
  if (has_email()) {
    clear_has_payload();
    ::server::AuthenticateRequest_Email* temp = payload_.email_;
    payload_.email_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void TLink::set_allocated_email(::server::AuthenticateRequest_Email* email) {
  clear_payload();
  if (email) {
    set_has_email();
    payload_.email_ = email;
  }
  // @@protoc_insertion_point(field_set_allocated:server.TLink.email)
}

// optional string facebook = 2;
bool TLink::has_facebook() const {
  return payload_case() == kFacebook;
}
void TLink::set_has_facebook() {
  _oneof_case_[0] = kFacebook;
}
void TLink::clear_facebook() {
  if (has_facebook()) {
    payload_.facebook_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_payload();
  }
}
const ::std::string& TLink::facebook() const {
  // @@protoc_insertion_point(field_get:server.TLink.facebook)
  if (has_facebook()) {
    return payload_.facebook_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
void TLink::set_facebook(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:server.TLink.facebook)
  if (!has_facebook()) {
    clear_payload();
    set_has_facebook();
    payload_.facebook_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  payload_.facebook_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:server.TLink.facebook)
}
void TLink::set_facebook(const char* value) {
  if (!has_facebook()) {
    clear_payload();
    set_has_facebook();
    payload_.facebook_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  payload_.facebook_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:server.TLink.facebook)
}
void TLink::set_facebook(const char* value, size_t size) {
  if (!has_facebook()) {
    clear_payload();
    set_has_facebook();
    payload_.facebook_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  payload_.facebook_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:server.TLink.facebook)
}
::std::string* TLink::mutable_facebook() {
  if (!has_facebook()) {
    clear_payload();
    set_has_facebook();
    payload_.facebook_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:server.TLink.facebook)
  return payload_.facebook_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* TLink::release_facebook() {
  // @@protoc_insertion_point(field_release:server.TLink.facebook)
  if (has_facebook()) {
    clear_has_payload();
    return payload_.facebook_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return NULL;
  }
}
void TLink::set_allocated_facebook(::std::string* facebook) {
  if (!has_facebook()) {
    payload_.facebook_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_payload();
  if (facebook != NULL) {
    set_has_facebook();
    payload_.facebook_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        facebook);
  }
  // @@protoc_insertion_point(field_set_allocated:server.TLink.facebook)
}

// optional string google = 3;
bool TLink::has_google() const {
  return payload_case() == kGoogle;
}
void TLink::set_has_google() {
  _oneof_case_[0] = kGoogle;
}
void TLink::clear_google() {
  if (has_google()) {
    payload_.google_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_payload();
  }
}
const ::std::string& TLink::google() const {
  // @@protoc_insertion_point(field_get:server.TLink.google)
  if (has_google()) {
    return payload_.google_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
void TLink::set_google(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:server.TLink.google)
  if (!has_google()) {
    clear_payload();
    set_has_google();
    payload_.google_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  payload_.google_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:server.TLink.google)
}
void TLink::set_google(const char* value) {
  if (!has_google()) {
    clear_payload();
    set_has_google();
    payload_.google_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  payload_.google_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:server.TLink.google)
}
void TLink::set_google(const char* value, size_t size) {
  if (!has_google()) {
    clear_payload();
    set_has_google();
    payload_.google_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  payload_.google_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:server.TLink.google)
}
::std::string* TLink::mutable_google() {
  if (!has_google()) {
    clear_payload();
    set_has_google();
    payload_.google_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:server.TLink.google)
  return payload_.google_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* TLink::release_google() {
  // @@protoc_insertion_point(field_release:server.TLink.google)
  if (has_google()) {
    clear_has_payload();
    return payload_.google_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return NULL;
  }
}
void TLink::set_allocated_google(::std::string* google) {
  if (!has_google()) {
    payload_.google_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_payload();
  if (google != NULL) {
    set_has_google();
    payload_.google_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        google);
  }
  // @@protoc_insertion_point(field_set_allocated:server.TLink.google)
}

// optional .server.AuthenticateRequest.GameCenter game_center = 4;
bool TLink::has_game_center() const {
  return payload_case() == kGameCenter;
}
void TLink::set_has_game_center() {
  _oneof_case_[0] = kGameCenter;
}
void TLink::clear_game_center() {
  if (has_game_center()) {
    delete payload_.game_center_;
    clear_has_payload();
  }
}
 const ::server::AuthenticateRequest_GameCenter& TLink::game_center() const {
  // @@protoc_insertion_point(field_get:server.TLink.game_center)
  return has_game_center()
      ? *payload_.game_center_
      : ::server::AuthenticateRequest_GameCenter::default_instance();
}
::server::AuthenticateRequest_GameCenter* TLink::mutable_game_center() {
  if (!has_game_center()) {
    clear_payload();
    set_has_game_center();
    payload_.game_center_ = new ::server::AuthenticateRequest_GameCenter;
  }
  // @@protoc_insertion_point(field_mutable:server.TLink.game_center)
  return payload_.game_center_;
}
::server::AuthenticateRequest_GameCenter* TLink::release_game_center() {
  // @@protoc_insertion_point(field_release:server.TLink.game_center)
  if (has_game_center()) {
    clear_has_payload();
    ::server::AuthenticateRequest_GameCenter* temp = payload_.game_center_;
    payload_.game_center_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void TLink::set_allocated_game_center(::server::AuthenticateRequest_GameCenter* game_center) {
  clear_payload();
  if (game_center) {
    set_has_game_center();
    payload_.game_center_ = game_center;
  }
  // @@protoc_insertion_point(field_set_allocated:server.TLink.game_center)
}

// optional string steam = 5;
bool TLink::has_steam() const {
  return payload_case() == kSteam;
}
void TLink::set_has_steam() {
  _oneof_case_[0] = kSteam;
}
void TLink::clear_steam() {
  if (has_steam()) {
    payload_.steam_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_payload();
  }
}
const ::std::string& TLink::steam() const {
  // @@protoc_insertion_point(field_get:server.TLink.steam)
  if (has_steam()) {
    return payload_.steam_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
void TLink::set_steam(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:server.TLink.steam)
  if (!has_steam()) {
    clear_payload();
    set_has_steam();
    payload_.steam_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  payload_.steam_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:server.TLink.steam)
}
void TLink::set_steam(const char* value) {
  if (!has_steam()) {
    clear_payload();
    set_has_steam();
    payload_.steam_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  payload_.steam_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:server.TLink.steam)
}
void TLink::set_steam(const char* value, size_t size) {
  if (!has_steam()) {
    clear_payload();
    set_has_steam();
    payload_.steam_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  payload_.steam_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:server.TLink.steam)
}
::std::string* TLink::mutable_steam() {
  if (!has_steam()) {
    clear_payload();
    set_has_steam();
    payload_.steam_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:server.TLink.steam)
  return payload_.steam_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* TLink::release_steam() {
  // @@protoc_insertion_point(field_release:server.TLink.steam)
  if (has_steam()) {
    clear_has_payload();
    return payload_.steam_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return NULL;
  }
}
void TLink::set_allocated_steam(::std::string* steam) {
  if (!has_steam()) {
    payload_.steam_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_payload();
  if (steam != NULL) {
    set_has_steam();
    payload_.steam_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        steam);
  }
  // @@protoc_insertion_point(field_set_allocated:server.TLink.steam)
}

// optional string device = 6;
bool TLink::has_device() const {
  return payload_case() == kDevice;
}
void TLink::set_has_device() {
  _oneof_case_[0] = kDevice;
}
void TLink::clear_device() {
  if (has_device()) {
    payload_.device_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_payload();
  }
}
const ::std::string& TLink::device() const {
  // @@protoc_insertion_point(field_get:server.TLink.device)
  if (has_device()) {
    return payload_.device_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
void TLink::set_device(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:server.TLink.device)
  if (!has_device()) {
    clear_payload();
    set_has_device();
    payload_.device_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  payload_.device_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:server.TLink.device)
}
void TLink::set_device(const char* value) {
  if (!has_device()) {
    clear_payload();
    set_has_device();
    payload_.device_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  payload_.device_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:server.TLink.device)
}
void TLink::set_device(const char* value, size_t size) {
  if (!has_device()) {
    clear_payload();
    set_has_device();
    payload_.device_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  payload_.device_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:server.TLink.device)
}
::std::string* TLink::mutable_device() {
  if (!has_device()) {
    clear_payload();
    set_has_device();
    payload_.device_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:server.TLink.device)
  return payload_.device_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* TLink::release_device() {
  // @@protoc_insertion_point(field_release:server.TLink.device)
  if (has_device()) {
    clear_has_payload();
    return payload_.device_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return NULL;
  }
}
void TLink::set_allocated_device(::std::string* device) {
  if (!has_device()) {
    payload_.device_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_payload();
  if (device != NULL) {
    set_has_device();
    payload_.device_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        device);
  }
  // @@protoc_insertion_point(field_set_allocated:server.TLink.device)
}

// optional string custom = 7;
bool TLink::has_custom() const {
  return payload_case() == kCustom;
}
void TLink::set_has_custom() {
  _oneof_case_[0] = kCustom;
}
void TLink::clear_custom() {
  if (has_custom()) {
    payload_.custom_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_payload();
  }
}
const ::std::string& TLink::custom() const {
  // @@protoc_insertion_point(field_get:server.TLink.custom)
  if (has_custom()) {
    return payload_.custom_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
void TLink::set_custom(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:server.TLink.custom)
  if (!has_custom()) {
    clear_payload();
    set_has_custom();
    payload_.custom_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  payload_.custom_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:server.TLink.custom)
}
void TLink::set_custom(const char* value) {
  if (!has_custom()) {
    clear_payload();
    set_has_custom();
    payload_.custom_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  payload_.custom_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:server.TLink.custom)
}
void TLink::set_custom(const char* value, size_t size) {
  if (!has_custom()) {
    clear_payload();
    set_has_custom();
    payload_.custom_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  payload_.custom_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:server.TLink.custom)
}
::std::string* TLink::mutable_custom() {
  if (!has_custom()) {
    clear_payload();
    set_has_custom();
    payload_.custom_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:server.TLink.custom)
  return payload_.custom_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* TLink::release_custom() {
  // @@protoc_insertion_point(field_release:server.TLink.custom)
  if (has_custom()) {
    clear_has_payload();
    return payload_.custom_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return NULL;
  }
}
void TLink::set_allocated_custom(::std::string* custom) {
  if (!has_custom()) {
    payload_.custom_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_payload();
  if (custom != NULL) {
    set_has_custom();
    payload_.custom_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        custom);
  }
  // @@protoc_insertion_point(field_set_allocated:server.TLink.custom)
}

bool TLink::has_payload() const {
  return payload_case() != PAYLOAD_NOT_SET;
}
void TLink::clear_has_payload() {
  _oneof_case_[0] = PAYLOAD_NOT_SET;
}
TLink::PayloadCase TLink::payload_case() const {
  return TLink::PayloadCase(_oneof_case_[0]);
}
inline const TLink* TLink::internal_default_instance() {
  return &TLink_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TUnlink::kEmailFieldNumber;
const int TUnlink::kFacebookFieldNumber;
const int TUnlink::kGoogleFieldNumber;
const int TUnlink::kGameCenterFieldNumber;
const int TUnlink::kSteamFieldNumber;
const int TUnlink::kDeviceFieldNumber;
const int TUnlink::kCustomFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TUnlink::TUnlink()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_api_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:server.TUnlink)
}

void TUnlink::InitAsDefaultInstance() {
  TUnlink_default_oneof_instance_->email_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  TUnlink_default_oneof_instance_->facebook_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  TUnlink_default_oneof_instance_->google_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  TUnlink_default_oneof_instance_->game_center_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  TUnlink_default_oneof_instance_->steam_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  TUnlink_default_oneof_instance_->device_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  TUnlink_default_oneof_instance_->custom_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

TUnlink::TUnlink(const TUnlink& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:server.TUnlink)
}

void TUnlink::SharedCtor() {
  clear_has_payload();
  _cached_size_ = 0;
}

TUnlink::~TUnlink() {
  // @@protoc_insertion_point(destructor:server.TUnlink)
  SharedDtor();
}

void TUnlink::SharedDtor() {
  if (has_payload()) {
    clear_payload();
  }
}

void TUnlink::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TUnlink::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TUnlink_descriptor_;
}

const TUnlink& TUnlink::default_instance() {
  protobuf_InitDefaults_api_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<TUnlink> TUnlink_default_instance_;

TUnlink* TUnlink::New(::google::protobuf::Arena* arena) const {
  TUnlink* n = new TUnlink;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TUnlink::clear_payload() {
// @@protoc_insertion_point(one_of_clear_start:server.TUnlink)
  switch (payload_case()) {
    case kEmail: {
      payload_.email_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
      break;
    }
    case kFacebook: {
      payload_.facebook_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
      break;
    }
    case kGoogle: {
      payload_.google_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
      break;
    }
    case kGameCenter: {
      payload_.game_center_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
      break;
    }
    case kSteam: {
      payload_.steam_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
      break;
    }
    case kDevice: {
      payload_.device_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
      break;
    }
    case kCustom: {
      payload_.custom_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
      break;
    }
    case PAYLOAD_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = PAYLOAD_NOT_SET;
}


void TUnlink::Clear() {
// @@protoc_insertion_point(message_clear_start:server.TUnlink)
  clear_payload();
}

bool TUnlink::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:server.TUnlink)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string email = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_email()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->email().data(), this->email().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "server.TUnlink.email"));
        } else {
          goto handle_unusual;
        }
        goto after_custom;
        break;
      }

      // optional string facebook = 2;
      case 2: {
        if (tag == 18) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_facebook()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->facebook().data(), this->facebook().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "server.TUnlink.facebook"));
        } else {
          goto handle_unusual;
        }
        goto after_custom;
        break;
      }

      // optional string google = 3;
      case 3: {
        if (tag == 26) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_google()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->google().data(), this->google().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "server.TUnlink.google"));
        } else {
          goto handle_unusual;
        }
        goto after_custom;
        break;
      }

      // optional string game_center = 4;
      case 4: {
        if (tag == 34) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_game_center()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->game_center().data(), this->game_center().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "server.TUnlink.game_center"));
        } else {
          goto handle_unusual;
        }
        goto after_custom;
        break;
      }

      // optional string steam = 5;
      case 5: {
        if (tag == 42) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_steam()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->steam().data(), this->steam().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "server.TUnlink.steam"));
        } else {
          goto handle_unusual;
        }
        goto after_custom;
        break;
      }

      // optional string device = 6;
      case 6: {
        if (tag == 50) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_device()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->device().data(), this->device().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "server.TUnlink.device"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_custom;
        break;
      }

      // optional string custom = 7;
      case 7: {
        if (tag == 58) {
         parse_custom:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_custom()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->custom().data(), this->custom().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "server.TUnlink.custom"));
        } else {
          goto handle_unusual;
        }
       after_custom:
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:server.TUnlink)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:server.TUnlink)
  return false;
#undef DO_
}

void TUnlink::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:server.TUnlink)
  // optional string email = 1;
  if (has_email()) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->email().data(), this->email().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server.TUnlink.email");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->email(), output);
  }

  // optional string facebook = 2;
  if (has_facebook()) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->facebook().data(), this->facebook().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server.TUnlink.facebook");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->facebook(), output);
  }

  // optional string google = 3;
  if (has_google()) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->google().data(), this->google().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server.TUnlink.google");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->google(), output);
  }

  // optional string game_center = 4;
  if (has_game_center()) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->game_center().data(), this->game_center().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server.TUnlink.game_center");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->game_center(), output);
  }

  // optional string steam = 5;
  if (has_steam()) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->steam().data(), this->steam().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server.TUnlink.steam");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->steam(), output);
  }

  // optional string device = 6;
  if (has_device()) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->device().data(), this->device().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server.TUnlink.device");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->device(), output);
  }

  // optional string custom = 7;
  if (has_custom()) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->custom().data(), this->custom().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server.TUnlink.custom");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->custom(), output);
  }

  // @@protoc_insertion_point(serialize_end:server.TUnlink)
}

::google::protobuf::uint8* TUnlink::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:server.TUnlink)
  // optional string email = 1;
  if (has_email()) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->email().data(), this->email().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server.TUnlink.email");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->email(), target);
  }

  // optional string facebook = 2;
  if (has_facebook()) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->facebook().data(), this->facebook().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server.TUnlink.facebook");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->facebook(), target);
  }

  // optional string google = 3;
  if (has_google()) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->google().data(), this->google().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server.TUnlink.google");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->google(), target);
  }

  // optional string game_center = 4;
  if (has_game_center()) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->game_center().data(), this->game_center().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server.TUnlink.game_center");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->game_center(), target);
  }

  // optional string steam = 5;
  if (has_steam()) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->steam().data(), this->steam().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server.TUnlink.steam");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->steam(), target);
  }

  // optional string device = 6;
  if (has_device()) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->device().data(), this->device().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server.TUnlink.device");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->device(), target);
  }

  // optional string custom = 7;
  if (has_custom()) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->custom().data(), this->custom().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server.TUnlink.custom");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->custom(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:server.TUnlink)
  return target;
}

size_t TUnlink::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:server.TUnlink)
  size_t total_size = 0;

  switch (payload_case()) {
    // optional string email = 1;
    case kEmail: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->email());
      break;
    }
    // optional string facebook = 2;
    case kFacebook: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->facebook());
      break;
    }
    // optional string google = 3;
    case kGoogle: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->google());
      break;
    }
    // optional string game_center = 4;
    case kGameCenter: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->game_center());
      break;
    }
    // optional string steam = 5;
    case kSteam: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->steam());
      break;
    }
    // optional string device = 6;
    case kDevice: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->device());
      break;
    }
    // optional string custom = 7;
    case kCustom: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->custom());
      break;
    }
    case PAYLOAD_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TUnlink::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:server.TUnlink)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const TUnlink* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TUnlink>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:server.TUnlink)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:server.TUnlink)
    UnsafeMergeFrom(*source);
  }
}

void TUnlink::MergeFrom(const TUnlink& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:server.TUnlink)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void TUnlink::UnsafeMergeFrom(const TUnlink& from) {
  GOOGLE_DCHECK(&from != this);
  switch (from.payload_case()) {
    case kEmail: {
      set_email(from.email());
      break;
    }
    case kFacebook: {
      set_facebook(from.facebook());
      break;
    }
    case kGoogle: {
      set_google(from.google());
      break;
    }
    case kGameCenter: {
      set_game_center(from.game_center());
      break;
    }
    case kSteam: {
      set_steam(from.steam());
      break;
    }
    case kDevice: {
      set_device(from.device());
      break;
    }
    case kCustom: {
      set_custom(from.custom());
      break;
    }
    case PAYLOAD_NOT_SET: {
      break;
    }
  }
}

void TUnlink::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:server.TUnlink)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TUnlink::CopyFrom(const TUnlink& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:server.TUnlink)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool TUnlink::IsInitialized() const {

  return true;
}

void TUnlink::Swap(TUnlink* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TUnlink::InternalSwap(TUnlink* other) {
  std::swap(payload_, other->payload_);
  std::swap(_oneof_case_[0], other->_oneof_case_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TUnlink::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TUnlink_descriptor_;
  metadata.reflection = TUnlink_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TUnlink

// optional string email = 1;
bool TUnlink::has_email() const {
  return payload_case() == kEmail;
}
void TUnlink::set_has_email() {
  _oneof_case_[0] = kEmail;
}
void TUnlink::clear_email() {
  if (has_email()) {
    payload_.email_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_payload();
  }
}
const ::std::string& TUnlink::email() const {
  // @@protoc_insertion_point(field_get:server.TUnlink.email)
  if (has_email()) {
    return payload_.email_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
void TUnlink::set_email(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:server.TUnlink.email)
  if (!has_email()) {
    clear_payload();
    set_has_email();
    payload_.email_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  payload_.email_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:server.TUnlink.email)
}
void TUnlink::set_email(const char* value) {
  if (!has_email()) {
    clear_payload();
    set_has_email();
    payload_.email_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  payload_.email_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:server.TUnlink.email)
}
void TUnlink::set_email(const char* value, size_t size) {
  if (!has_email()) {
    clear_payload();
    set_has_email();
    payload_.email_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  payload_.email_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:server.TUnlink.email)
}
::std::string* TUnlink::mutable_email() {
  if (!has_email()) {
    clear_payload();
    set_has_email();
    payload_.email_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:server.TUnlink.email)
  return payload_.email_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* TUnlink::release_email() {
  // @@protoc_insertion_point(field_release:server.TUnlink.email)
  if (has_email()) {
    clear_has_payload();
    return payload_.email_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return NULL;
  }
}
void TUnlink::set_allocated_email(::std::string* email) {
  if (!has_email()) {
    payload_.email_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_payload();
  if (email != NULL) {
    set_has_email();
    payload_.email_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        email);
  }
  // @@protoc_insertion_point(field_set_allocated:server.TUnlink.email)
}

// optional string facebook = 2;
bool TUnlink::has_facebook() const {
  return payload_case() == kFacebook;
}
void TUnlink::set_has_facebook() {
  _oneof_case_[0] = kFacebook;
}
void TUnlink::clear_facebook() {
  if (has_facebook()) {
    payload_.facebook_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_payload();
  }
}
const ::std::string& TUnlink::facebook() const {
  // @@protoc_insertion_point(field_get:server.TUnlink.facebook)
  if (has_facebook()) {
    return payload_.facebook_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
void TUnlink::set_facebook(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:server.TUnlink.facebook)
  if (!has_facebook()) {
    clear_payload();
    set_has_facebook();
    payload_.facebook_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  payload_.facebook_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:server.TUnlink.facebook)
}
void TUnlink::set_facebook(const char* value) {
  if (!has_facebook()) {
    clear_payload();
    set_has_facebook();
    payload_.facebook_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  payload_.facebook_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:server.TUnlink.facebook)
}
void TUnlink::set_facebook(const char* value, size_t size) {
  if (!has_facebook()) {
    clear_payload();
    set_has_facebook();
    payload_.facebook_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  payload_.facebook_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:server.TUnlink.facebook)
}
::std::string* TUnlink::mutable_facebook() {
  if (!has_facebook()) {
    clear_payload();
    set_has_facebook();
    payload_.facebook_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:server.TUnlink.facebook)
  return payload_.facebook_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* TUnlink::release_facebook() {
  // @@protoc_insertion_point(field_release:server.TUnlink.facebook)
  if (has_facebook()) {
    clear_has_payload();
    return payload_.facebook_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return NULL;
  }
}
void TUnlink::set_allocated_facebook(::std::string* facebook) {
  if (!has_facebook()) {
    payload_.facebook_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_payload();
  if (facebook != NULL) {
    set_has_facebook();
    payload_.facebook_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        facebook);
  }
  // @@protoc_insertion_point(field_set_allocated:server.TUnlink.facebook)
}

// optional string google = 3;
bool TUnlink::has_google() const {
  return payload_case() == kGoogle;
}
void TUnlink::set_has_google() {
  _oneof_case_[0] = kGoogle;
}
void TUnlink::clear_google() {
  if (has_google()) {
    payload_.google_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_payload();
  }
}
const ::std::string& TUnlink::google() const {
  // @@protoc_insertion_point(field_get:server.TUnlink.google)
  if (has_google()) {
    return payload_.google_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
void TUnlink::set_google(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:server.TUnlink.google)
  if (!has_google()) {
    clear_payload();
    set_has_google();
    payload_.google_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  payload_.google_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:server.TUnlink.google)
}
void TUnlink::set_google(const char* value) {
  if (!has_google()) {
    clear_payload();
    set_has_google();
    payload_.google_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  payload_.google_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:server.TUnlink.google)
}
void TUnlink::set_google(const char* value, size_t size) {
  if (!has_google()) {
    clear_payload();
    set_has_google();
    payload_.google_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  payload_.google_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:server.TUnlink.google)
}
::std::string* TUnlink::mutable_google() {
  if (!has_google()) {
    clear_payload();
    set_has_google();
    payload_.google_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:server.TUnlink.google)
  return payload_.google_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* TUnlink::release_google() {
  // @@protoc_insertion_point(field_release:server.TUnlink.google)
  if (has_google()) {
    clear_has_payload();
    return payload_.google_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return NULL;
  }
}
void TUnlink::set_allocated_google(::std::string* google) {
  if (!has_google()) {
    payload_.google_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_payload();
  if (google != NULL) {
    set_has_google();
    payload_.google_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        google);
  }
  // @@protoc_insertion_point(field_set_allocated:server.TUnlink.google)
}

// optional string game_center = 4;
bool TUnlink::has_game_center() const {
  return payload_case() == kGameCenter;
}
void TUnlink::set_has_game_center() {
  _oneof_case_[0] = kGameCenter;
}
void TUnlink::clear_game_center() {
  if (has_game_center()) {
    payload_.game_center_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_payload();
  }
}
const ::std::string& TUnlink::game_center() const {
  // @@protoc_insertion_point(field_get:server.TUnlink.game_center)
  if (has_game_center()) {
    return payload_.game_center_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
void TUnlink::set_game_center(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:server.TUnlink.game_center)
  if (!has_game_center()) {
    clear_payload();
    set_has_game_center();
    payload_.game_center_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  payload_.game_center_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:server.TUnlink.game_center)
}
void TUnlink::set_game_center(const char* value) {
  if (!has_game_center()) {
    clear_payload();
    set_has_game_center();
    payload_.game_center_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  payload_.game_center_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:server.TUnlink.game_center)
}
void TUnlink::set_game_center(const char* value, size_t size) {
  if (!has_game_center()) {
    clear_payload();
    set_has_game_center();
    payload_.game_center_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  payload_.game_center_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:server.TUnlink.game_center)
}
::std::string* TUnlink::mutable_game_center() {
  if (!has_game_center()) {
    clear_payload();
    set_has_game_center();
    payload_.game_center_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:server.TUnlink.game_center)
  return payload_.game_center_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* TUnlink::release_game_center() {
  // @@protoc_insertion_point(field_release:server.TUnlink.game_center)
  if (has_game_center()) {
    clear_has_payload();
    return payload_.game_center_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return NULL;
  }
}
void TUnlink::set_allocated_game_center(::std::string* game_center) {
  if (!has_game_center()) {
    payload_.game_center_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_payload();
  if (game_center != NULL) {
    set_has_game_center();
    payload_.game_center_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        game_center);
  }
  // @@protoc_insertion_point(field_set_allocated:server.TUnlink.game_center)
}

// optional string steam = 5;
bool TUnlink::has_steam() const {
  return payload_case() == kSteam;
}
void TUnlink::set_has_steam() {
  _oneof_case_[0] = kSteam;
}
void TUnlink::clear_steam() {
  if (has_steam()) {
    payload_.steam_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_payload();
  }
}
const ::std::string& TUnlink::steam() const {
  // @@protoc_insertion_point(field_get:server.TUnlink.steam)
  if (has_steam()) {
    return payload_.steam_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
void TUnlink::set_steam(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:server.TUnlink.steam)
  if (!has_steam()) {
    clear_payload();
    set_has_steam();
    payload_.steam_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  payload_.steam_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:server.TUnlink.steam)
}
void TUnlink::set_steam(const char* value) {
  if (!has_steam()) {
    clear_payload();
    set_has_steam();
    payload_.steam_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  payload_.steam_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:server.TUnlink.steam)
}
void TUnlink::set_steam(const char* value, size_t size) {
  if (!has_steam()) {
    clear_payload();
    set_has_steam();
    payload_.steam_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  payload_.steam_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:server.TUnlink.steam)
}
::std::string* TUnlink::mutable_steam() {
  if (!has_steam()) {
    clear_payload();
    set_has_steam();
    payload_.steam_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:server.TUnlink.steam)
  return payload_.steam_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* TUnlink::release_steam() {
  // @@protoc_insertion_point(field_release:server.TUnlink.steam)
  if (has_steam()) {
    clear_has_payload();
    return payload_.steam_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return NULL;
  }
}
void TUnlink::set_allocated_steam(::std::string* steam) {
  if (!has_steam()) {
    payload_.steam_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_payload();
  if (steam != NULL) {
    set_has_steam();
    payload_.steam_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        steam);
  }
  // @@protoc_insertion_point(field_set_allocated:server.TUnlink.steam)
}

// optional string device = 6;
bool TUnlink::has_device() const {
  return payload_case() == kDevice;
}
void TUnlink::set_has_device() {
  _oneof_case_[0] = kDevice;
}
void TUnlink::clear_device() {
  if (has_device()) {
    payload_.device_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_payload();
  }
}
const ::std::string& TUnlink::device() const {
  // @@protoc_insertion_point(field_get:server.TUnlink.device)
  if (has_device()) {
    return payload_.device_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
void TUnlink::set_device(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:server.TUnlink.device)
  if (!has_device()) {
    clear_payload();
    set_has_device();
    payload_.device_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  payload_.device_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:server.TUnlink.device)
}
void TUnlink::set_device(const char* value) {
  if (!has_device()) {
    clear_payload();
    set_has_device();
    payload_.device_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  payload_.device_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:server.TUnlink.device)
}
void TUnlink::set_device(const char* value, size_t size) {
  if (!has_device()) {
    clear_payload();
    set_has_device();
    payload_.device_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  payload_.device_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:server.TUnlink.device)
}
::std::string* TUnlink::mutable_device() {
  if (!has_device()) {
    clear_payload();
    set_has_device();
    payload_.device_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:server.TUnlink.device)
  return payload_.device_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* TUnlink::release_device() {
  // @@protoc_insertion_point(field_release:server.TUnlink.device)
  if (has_device()) {
    clear_has_payload();
    return payload_.device_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return NULL;
  }
}
void TUnlink::set_allocated_device(::std::string* device) {
  if (!has_device()) {
    payload_.device_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_payload();
  if (device != NULL) {
    set_has_device();
    payload_.device_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        device);
  }
  // @@protoc_insertion_point(field_set_allocated:server.TUnlink.device)
}

// optional string custom = 7;
bool TUnlink::has_custom() const {
  return payload_case() == kCustom;
}
void TUnlink::set_has_custom() {
  _oneof_case_[0] = kCustom;
}
void TUnlink::clear_custom() {
  if (has_custom()) {
    payload_.custom_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_payload();
  }
}
const ::std::string& TUnlink::custom() const {
  // @@protoc_insertion_point(field_get:server.TUnlink.custom)
  if (has_custom()) {
    return payload_.custom_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
void TUnlink::set_custom(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:server.TUnlink.custom)
  if (!has_custom()) {
    clear_payload();
    set_has_custom();
    payload_.custom_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  payload_.custom_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:server.TUnlink.custom)
}
void TUnlink::set_custom(const char* value) {
  if (!has_custom()) {
    clear_payload();
    set_has_custom();
    payload_.custom_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  payload_.custom_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:server.TUnlink.custom)
}
void TUnlink::set_custom(const char* value, size_t size) {
  if (!has_custom()) {
    clear_payload();
    set_has_custom();
    payload_.custom_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  payload_.custom_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:server.TUnlink.custom)
}
::std::string* TUnlink::mutable_custom() {
  if (!has_custom()) {
    clear_payload();
    set_has_custom();
    payload_.custom_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:server.TUnlink.custom)
  return payload_.custom_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* TUnlink::release_custom() {
  // @@protoc_insertion_point(field_release:server.TUnlink.custom)
  if (has_custom()) {
    clear_has_payload();
    return payload_.custom_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return NULL;
  }
}
void TUnlink::set_allocated_custom(::std::string* custom) {
  if (!has_custom()) {
    payload_.custom_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_payload();
  if (custom != NULL) {
    set_has_custom();
    payload_.custom_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        custom);
  }
  // @@protoc_insertion_point(field_set_allocated:server.TUnlink.custom)
}

bool TUnlink::has_payload() const {
  return payload_case() != PAYLOAD_NOT_SET;
}
void TUnlink::clear_has_payload() {
  _oneof_case_[0] = PAYLOAD_NOT_SET;
}
TUnlink::PayloadCase TUnlink::payload_case() const {
  return TUnlink::PayloadCase(_oneof_case_[0]);
}
inline const TUnlink* TUnlink::internal_default_instance() {
  return &TUnlink_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int User::kIdFieldNumber;
const int User::kHandleFieldNumber;
const int User::kFullnameFieldNumber;
const int User::kAvatarUrlFieldNumber;
const int User::kLangFieldNumber;
const int User::kLocationFieldNumber;
const int User::kTimezoneFieldNumber;
const int User::kMetadataFieldNumber;
const int User::kCreatedAtFieldNumber;
const int User::kUpdatedAtFieldNumber;
const int User::kLastOnlineAtFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

User::User()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_api_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:server.User)
}

void User::InitAsDefaultInstance() {
}

User::User(const User& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:server.User)
}

void User::SharedCtor() {
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  handle_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  fullname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  avatar_url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  lang_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  location_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  timezone_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  metadata_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&created_at_, 0, reinterpret_cast<char*>(&last_online_at_) -
    reinterpret_cast<char*>(&created_at_) + sizeof(last_online_at_));
  _cached_size_ = 0;
}

User::~User() {
  // @@protoc_insertion_point(destructor:server.User)
  SharedDtor();
}

void User::SharedDtor() {
  id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  handle_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  fullname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  avatar_url_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  lang_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  location_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  timezone_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  metadata_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void User::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* User::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return User_descriptor_;
}

const User& User::default_instance() {
  protobuf_InitDefaults_api_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<User> User_default_instance_;

User* User::New(::google::protobuf::Arena* arena) const {
  User* n = new User;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void User::Clear() {
// @@protoc_insertion_point(message_clear_start:server.User)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(User, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<User*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  handle_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  fullname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  avatar_url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  lang_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  location_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  timezone_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  metadata_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ZR_(created_at_, last_online_at_);

#undef ZR_HELPER_
#undef ZR_

}

bool User::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:server.User)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_id()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_handle;
        break;
      }

      // optional string handle = 2;
      case 2: {
        if (tag == 18) {
         parse_handle:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_handle()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->handle().data(), this->handle().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "server.User.handle"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_fullname;
        break;
      }

      // optional string fullname = 3;
      case 3: {
        if (tag == 26) {
         parse_fullname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_fullname()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->fullname().data(), this->fullname().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "server.User.fullname"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_avatar_url;
        break;
      }

      // optional string avatar_url = 4;
      case 4: {
        if (tag == 34) {
         parse_avatar_url:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_avatar_url()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->avatar_url().data(), this->avatar_url().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "server.User.avatar_url"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_lang;
        break;
      }

      // optional string lang = 5;
      case 5: {
        if (tag == 42) {
         parse_lang:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_lang()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->lang().data(), this->lang().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "server.User.lang"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_location;
        break;
      }

      // optional string location = 6;
      case 6: {
        if (tag == 50) {
         parse_location:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_location()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->location().data(), this->location().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "server.User.location"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_timezone;
        break;
      }

      // optional string timezone = 7;
      case 7: {
        if (tag == 58) {
         parse_timezone:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_timezone()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->timezone().data(), this->timezone().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "server.User.timezone"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_metadata;
        break;
      }

      // optional bytes metadata = 8;
      case 8: {
        if (tag == 66) {
         parse_metadata:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_metadata()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_created_at;
        break;
      }

      // optional int64 created_at = 9;
      case 9: {
        if (tag == 72) {
         parse_created_at:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &created_at_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_updated_at;
        break;
      }

      // optional int64 updated_at = 10;
      case 10: {
        if (tag == 80) {
         parse_updated_at:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &updated_at_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_last_online_at;
        break;
      }

      // optional int64 last_online_at = 11;
      case 11: {
        if (tag == 88) {
         parse_last_online_at:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &last_online_at_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:server.User)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:server.User)
  return false;
#undef DO_
}

void User::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:server.User)
  // optional bytes id = 1;
  if (this->id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->id(), output);
  }

  // optional string handle = 2;
  if (this->handle().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->handle().data(), this->handle().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server.User.handle");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->handle(), output);
  }

  // optional string fullname = 3;
  if (this->fullname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->fullname().data(), this->fullname().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server.User.fullname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->fullname(), output);
  }

  // optional string avatar_url = 4;
  if (this->avatar_url().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->avatar_url().data(), this->avatar_url().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server.User.avatar_url");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->avatar_url(), output);
  }

  // optional string lang = 5;
  if (this->lang().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->lang().data(), this->lang().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server.User.lang");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->lang(), output);
  }

  // optional string location = 6;
  if (this->location().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->location().data(), this->location().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server.User.location");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->location(), output);
  }

  // optional string timezone = 7;
  if (this->timezone().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->timezone().data(), this->timezone().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server.User.timezone");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->timezone(), output);
  }

  // optional bytes metadata = 8;
  if (this->metadata().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      8, this->metadata(), output);
  }

  // optional int64 created_at = 9;
  if (this->created_at() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(9, this->created_at(), output);
  }

  // optional int64 updated_at = 10;
  if (this->updated_at() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(10, this->updated_at(), output);
  }

  // optional int64 last_online_at = 11;
  if (this->last_online_at() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(11, this->last_online_at(), output);
  }

  // @@protoc_insertion_point(serialize_end:server.User)
}

::google::protobuf::uint8* User::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:server.User)
  // optional bytes id = 1;
  if (this->id().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->id(), target);
  }

  // optional string handle = 2;
  if (this->handle().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->handle().data(), this->handle().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server.User.handle");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->handle(), target);
  }

  // optional string fullname = 3;
  if (this->fullname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->fullname().data(), this->fullname().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server.User.fullname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->fullname(), target);
  }

  // optional string avatar_url = 4;
  if (this->avatar_url().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->avatar_url().data(), this->avatar_url().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server.User.avatar_url");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->avatar_url(), target);
  }

  // optional string lang = 5;
  if (this->lang().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->lang().data(), this->lang().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server.User.lang");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->lang(), target);
  }

  // optional string location = 6;
  if (this->location().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->location().data(), this->location().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server.User.location");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->location(), target);
  }

  // optional string timezone = 7;
  if (this->timezone().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->timezone().data(), this->timezone().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server.User.timezone");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->timezone(), target);
  }

  // optional bytes metadata = 8;
  if (this->metadata().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        8, this->metadata(), target);
  }

  // optional int64 created_at = 9;
  if (this->created_at() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(9, this->created_at(), target);
  }

  // optional int64 updated_at = 10;
  if (this->updated_at() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(10, this->updated_at(), target);
  }

  // optional int64 last_online_at = 11;
  if (this->last_online_at() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(11, this->last_online_at(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:server.User)
  return target;
}

size_t User::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:server.User)
  size_t total_size = 0;

  // optional bytes id = 1;
  if (this->id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->id());
  }

  // optional string handle = 2;
  if (this->handle().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->handle());
  }

  // optional string fullname = 3;
  if (this->fullname().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->fullname());
  }

  // optional string avatar_url = 4;
  if (this->avatar_url().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->avatar_url());
  }

  // optional string lang = 5;
  if (this->lang().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->lang());
  }

  // optional string location = 6;
  if (this->location().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->location());
  }

  // optional string timezone = 7;
  if (this->timezone().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->timezone());
  }

  // optional bytes metadata = 8;
  if (this->metadata().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->metadata());
  }

  // optional int64 created_at = 9;
  if (this->created_at() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->created_at());
  }

  // optional int64 updated_at = 10;
  if (this->updated_at() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->updated_at());
  }

  // optional int64 last_online_at = 11;
  if (this->last_online_at() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->last_online_at());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void User::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:server.User)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const User* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const User>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:server.User)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:server.User)
    UnsafeMergeFrom(*source);
  }
}

void User::MergeFrom(const User& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:server.User)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void User::UnsafeMergeFrom(const User& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.id().size() > 0) {

    id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  if (from.handle().size() > 0) {

    handle_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.handle_);
  }
  if (from.fullname().size() > 0) {

    fullname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.fullname_);
  }
  if (from.avatar_url().size() > 0) {

    avatar_url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.avatar_url_);
  }
  if (from.lang().size() > 0) {

    lang_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.lang_);
  }
  if (from.location().size() > 0) {

    location_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.location_);
  }
  if (from.timezone().size() > 0) {

    timezone_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.timezone_);
  }
  if (from.metadata().size() > 0) {

    metadata_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.metadata_);
  }
  if (from.created_at() != 0) {
    set_created_at(from.created_at());
  }
  if (from.updated_at() != 0) {
    set_updated_at(from.updated_at());
  }
  if (from.last_online_at() != 0) {
    set_last_online_at(from.last_online_at());
  }
}

void User::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:server.User)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void User::CopyFrom(const User& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:server.User)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool User::IsInitialized() const {

  return true;
}

void User::Swap(User* other) {
  if (other == this) return;
  InternalSwap(other);
}
void User::InternalSwap(User* other) {
  id_.Swap(&other->id_);
  handle_.Swap(&other->handle_);
  fullname_.Swap(&other->fullname_);
  avatar_url_.Swap(&other->avatar_url_);
  lang_.Swap(&other->lang_);
  location_.Swap(&other->location_);
  timezone_.Swap(&other->timezone_);
  metadata_.Swap(&other->metadata_);
  std::swap(created_at_, other->created_at_);
  std::swap(updated_at_, other->updated_at_);
  std::swap(last_online_at_, other->last_online_at_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata User::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = User_descriptor_;
  metadata.reflection = User_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// User

// optional bytes id = 1;
void User::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& User::id() const {
  // @@protoc_insertion_point(field_get:server.User.id)
  return id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void User::set_id(const ::std::string& value) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:server.User.id)
}
void User::set_id(const char* value) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:server.User.id)
}
void User::set_id(const void* value, size_t size) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:server.User.id)
}
::std::string* User::mutable_id() {
  
  // @@protoc_insertion_point(field_mutable:server.User.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* User::release_id() {
  // @@protoc_insertion_point(field_release:server.User.id)
  
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void User::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:server.User.id)
}

// optional string handle = 2;
void User::clear_handle() {
  handle_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& User::handle() const {
  // @@protoc_insertion_point(field_get:server.User.handle)
  return handle_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void User::set_handle(const ::std::string& value) {
  
  handle_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:server.User.handle)
}
void User::set_handle(const char* value) {
  
  handle_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:server.User.handle)
}
void User::set_handle(const char* value, size_t size) {
  
  handle_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:server.User.handle)
}
::std::string* User::mutable_handle() {
  
  // @@protoc_insertion_point(field_mutable:server.User.handle)
  return handle_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* User::release_handle() {
  // @@protoc_insertion_point(field_release:server.User.handle)
  
  return handle_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void User::set_allocated_handle(::std::string* handle) {
  if (handle != NULL) {
    
  } else {
    
  }
  handle_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), handle);
  // @@protoc_insertion_point(field_set_allocated:server.User.handle)
}

// optional string fullname = 3;
void User::clear_fullname() {
  fullname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& User::fullname() const {
  // @@protoc_insertion_point(field_get:server.User.fullname)
  return fullname_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void User::set_fullname(const ::std::string& value) {
  
  fullname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:server.User.fullname)
}
void User::set_fullname(const char* value) {
  
  fullname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:server.User.fullname)
}
void User::set_fullname(const char* value, size_t size) {
  
  fullname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:server.User.fullname)
}
::std::string* User::mutable_fullname() {
  
  // @@protoc_insertion_point(field_mutable:server.User.fullname)
  return fullname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* User::release_fullname() {
  // @@protoc_insertion_point(field_release:server.User.fullname)
  
  return fullname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void User::set_allocated_fullname(::std::string* fullname) {
  if (fullname != NULL) {
    
  } else {
    
  }
  fullname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), fullname);
  // @@protoc_insertion_point(field_set_allocated:server.User.fullname)
}

// optional string avatar_url = 4;
void User::clear_avatar_url() {
  avatar_url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& User::avatar_url() const {
  // @@protoc_insertion_point(field_get:server.User.avatar_url)
  return avatar_url_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void User::set_avatar_url(const ::std::string& value) {
  
  avatar_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:server.User.avatar_url)
}
void User::set_avatar_url(const char* value) {
  
  avatar_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:server.User.avatar_url)
}
void User::set_avatar_url(const char* value, size_t size) {
  
  avatar_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:server.User.avatar_url)
}
::std::string* User::mutable_avatar_url() {
  
  // @@protoc_insertion_point(field_mutable:server.User.avatar_url)
  return avatar_url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* User::release_avatar_url() {
  // @@protoc_insertion_point(field_release:server.User.avatar_url)
  
  return avatar_url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void User::set_allocated_avatar_url(::std::string* avatar_url) {
  if (avatar_url != NULL) {
    
  } else {
    
  }
  avatar_url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), avatar_url);
  // @@protoc_insertion_point(field_set_allocated:server.User.avatar_url)
}

// optional string lang = 5;
void User::clear_lang() {
  lang_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& User::lang() const {
  // @@protoc_insertion_point(field_get:server.User.lang)
  return lang_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void User::set_lang(const ::std::string& value) {
  
  lang_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:server.User.lang)
}
void User::set_lang(const char* value) {
  
  lang_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:server.User.lang)
}
void User::set_lang(const char* value, size_t size) {
  
  lang_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:server.User.lang)
}
::std::string* User::mutable_lang() {
  
  // @@protoc_insertion_point(field_mutable:server.User.lang)
  return lang_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* User::release_lang() {
  // @@protoc_insertion_point(field_release:server.User.lang)
  
  return lang_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void User::set_allocated_lang(::std::string* lang) {
  if (lang != NULL) {
    
  } else {
    
  }
  lang_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), lang);
  // @@protoc_insertion_point(field_set_allocated:server.User.lang)
}

// optional string location = 6;
void User::clear_location() {
  location_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& User::location() const {
  // @@protoc_insertion_point(field_get:server.User.location)
  return location_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void User::set_location(const ::std::string& value) {
  
  location_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:server.User.location)
}
void User::set_location(const char* value) {
  
  location_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:server.User.location)
}
void User::set_location(const char* value, size_t size) {
  
  location_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:server.User.location)
}
::std::string* User::mutable_location() {
  
  // @@protoc_insertion_point(field_mutable:server.User.location)
  return location_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* User::release_location() {
  // @@protoc_insertion_point(field_release:server.User.location)
  
  return location_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void User::set_allocated_location(::std::string* location) {
  if (location != NULL) {
    
  } else {
    
  }
  location_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), location);
  // @@protoc_insertion_point(field_set_allocated:server.User.location)
}

// optional string timezone = 7;
void User::clear_timezone() {
  timezone_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& User::timezone() const {
  // @@protoc_insertion_point(field_get:server.User.timezone)
  return timezone_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void User::set_timezone(const ::std::string& value) {
  
  timezone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:server.User.timezone)
}
void User::set_timezone(const char* value) {
  
  timezone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:server.User.timezone)
}
void User::set_timezone(const char* value, size_t size) {
  
  timezone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:server.User.timezone)
}
::std::string* User::mutable_timezone() {
  
  // @@protoc_insertion_point(field_mutable:server.User.timezone)
  return timezone_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* User::release_timezone() {
  // @@protoc_insertion_point(field_release:server.User.timezone)
  
  return timezone_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void User::set_allocated_timezone(::std::string* timezone) {
  if (timezone != NULL) {
    
  } else {
    
  }
  timezone_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), timezone);
  // @@protoc_insertion_point(field_set_allocated:server.User.timezone)
}

// optional bytes metadata = 8;
void User::clear_metadata() {
  metadata_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& User::metadata() const {
  // @@protoc_insertion_point(field_get:server.User.metadata)
  return metadata_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void User::set_metadata(const ::std::string& value) {
  
  metadata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:server.User.metadata)
}
void User::set_metadata(const char* value) {
  
  metadata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:server.User.metadata)
}
void User::set_metadata(const void* value, size_t size) {
  
  metadata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:server.User.metadata)
}
::std::string* User::mutable_metadata() {
  
  // @@protoc_insertion_point(field_mutable:server.User.metadata)
  return metadata_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* User::release_metadata() {
  // @@protoc_insertion_point(field_release:server.User.metadata)
  
  return metadata_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void User::set_allocated_metadata(::std::string* metadata) {
  if (metadata != NULL) {
    
  } else {
    
  }
  metadata_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), metadata);
  // @@protoc_insertion_point(field_set_allocated:server.User.metadata)
}

// optional int64 created_at = 9;
void User::clear_created_at() {
  created_at_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 User::created_at() const {
  // @@protoc_insertion_point(field_get:server.User.created_at)
  return created_at_;
}
void User::set_created_at(::google::protobuf::int64 value) {
  
  created_at_ = value;
  // @@protoc_insertion_point(field_set:server.User.created_at)
}

// optional int64 updated_at = 10;
void User::clear_updated_at() {
  updated_at_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 User::updated_at() const {
  // @@protoc_insertion_point(field_get:server.User.updated_at)
  return updated_at_;
}
void User::set_updated_at(::google::protobuf::int64 value) {
  
  updated_at_ = value;
  // @@protoc_insertion_point(field_set:server.User.updated_at)
}

// optional int64 last_online_at = 11;
void User::clear_last_online_at() {
  last_online_at_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 User::last_online_at() const {
  // @@protoc_insertion_point(field_get:server.User.last_online_at)
  return last_online_at_;
}
void User::set_last_online_at(::google::protobuf::int64 value) {
  
  last_online_at_ = value;
  // @@protoc_insertion_point(field_set:server.User.last_online_at)
}

inline const User* User::internal_default_instance() {
  return &User_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Self::kUserFieldNumber;
const int Self::kVerifiedFieldNumber;
const int Self::kEmailFieldNumber;
const int Self::kDeviceIdFieldNumber;
const int Self::kFacebookIdFieldNumber;
const int Self::kGoogleIdFieldNumber;
const int Self::kGamecenterIdFieldNumber;
const int Self::kSteamIdFieldNumber;
const int Self::kCustomIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Self::Self()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_api_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:server.Self)
}

void Self::InitAsDefaultInstance() {
  user_ = const_cast< ::server::User*>(
      ::server::User::internal_default_instance());
}

Self::Self(const Self& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:server.Self)
}

void Self::SharedCtor() {
  email_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  facebook_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  google_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  gamecenter_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  steam_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  custom_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  user_ = NULL;
  verified_ = false;
  _cached_size_ = 0;
}

Self::~Self() {
  // @@protoc_insertion_point(destructor:server.Self)
  SharedDtor();
}

void Self::SharedDtor() {
  email_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  facebook_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  google_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  gamecenter_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  steam_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  custom_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != &Self_default_instance_.get()) {
    delete user_;
  }
}

void Self::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Self::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Self_descriptor_;
}

const Self& Self::default_instance() {
  protobuf_InitDefaults_api_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<Self> Self_default_instance_;

Self* Self::New(::google::protobuf::Arena* arena) const {
  Self* n = new Self;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Self::Clear() {
// @@protoc_insertion_point(message_clear_start:server.Self)
  if (GetArenaNoVirtual() == NULL && user_ != NULL) delete user_;
  user_ = NULL;
  verified_ = false;
  email_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  facebook_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  google_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  gamecenter_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  steam_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  custom_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  device_id_.Clear();
}

bool Self::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:server.Self)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .server.User user = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_user()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_verified;
        break;
      }

      // optional bool verified = 2;
      case 2: {
        if (tag == 16) {
         parse_verified:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &verified_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_email;
        break;
      }

      // optional string email = 3;
      case 3: {
        if (tag == 26) {
         parse_email:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_email()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->email().data(), this->email().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "server.Self.email"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_device_id;
        break;
      }

      // repeated string device_id = 4;
      case 4: {
        if (tag == 34) {
         parse_device_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_device_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->device_id(this->device_id_size() - 1).data(),
            this->device_id(this->device_id_size() - 1).length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "server.Self.device_id"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_device_id;
        if (input->ExpectTag(42)) goto parse_facebook_id;
        break;
      }

      // optional string facebook_id = 5;
      case 5: {
        if (tag == 42) {
         parse_facebook_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_facebook_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->facebook_id().data(), this->facebook_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "server.Self.facebook_id"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_google_id;
        break;
      }

      // optional string google_id = 6;
      case 6: {
        if (tag == 50) {
         parse_google_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_google_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->google_id().data(), this->google_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "server.Self.google_id"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_gamecenter_id;
        break;
      }

      // optional string gamecenter_id = 7;
      case 7: {
        if (tag == 58) {
         parse_gamecenter_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_gamecenter_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->gamecenter_id().data(), this->gamecenter_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "server.Self.gamecenter_id"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_steam_id;
        break;
      }

      // optional string steam_id = 8;
      case 8: {
        if (tag == 66) {
         parse_steam_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_steam_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->steam_id().data(), this->steam_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "server.Self.steam_id"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_custom_id;
        break;
      }

      // optional string custom_id = 9;
      case 9: {
        if (tag == 74) {
         parse_custom_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_custom_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->custom_id().data(), this->custom_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "server.Self.custom_id"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:server.Self)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:server.Self)
  return false;
#undef DO_
}

void Self::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:server.Self)
  // optional .server.User user = 1;
  if (this->has_user()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->user_, output);
  }

  // optional bool verified = 2;
  if (this->verified() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->verified(), output);
  }

  // optional string email = 3;
  if (this->email().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->email().data(), this->email().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server.Self.email");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->email(), output);
  }

  // repeated string device_id = 4;
  for (int i = 0; i < this->device_id_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->device_id(i).data(), this->device_id(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server.Self.device_id");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->device_id(i), output);
  }

  // optional string facebook_id = 5;
  if (this->facebook_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->facebook_id().data(), this->facebook_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server.Self.facebook_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->facebook_id(), output);
  }

  // optional string google_id = 6;
  if (this->google_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->google_id().data(), this->google_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server.Self.google_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->google_id(), output);
  }

  // optional string gamecenter_id = 7;
  if (this->gamecenter_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->gamecenter_id().data(), this->gamecenter_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server.Self.gamecenter_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->gamecenter_id(), output);
  }

  // optional string steam_id = 8;
  if (this->steam_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->steam_id().data(), this->steam_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server.Self.steam_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->steam_id(), output);
  }

  // optional string custom_id = 9;
  if (this->custom_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->custom_id().data(), this->custom_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server.Self.custom_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->custom_id(), output);
  }

  // @@protoc_insertion_point(serialize_end:server.Self)
}

::google::protobuf::uint8* Self::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:server.Self)
  // optional .server.User user = 1;
  if (this->has_user()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->user_, false, target);
  }

  // optional bool verified = 2;
  if (this->verified() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->verified(), target);
  }

  // optional string email = 3;
  if (this->email().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->email().data(), this->email().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server.Self.email");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->email(), target);
  }

  // repeated string device_id = 4;
  for (int i = 0; i < this->device_id_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->device_id(i).data(), this->device_id(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server.Self.device_id");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(4, this->device_id(i), target);
  }

  // optional string facebook_id = 5;
  if (this->facebook_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->facebook_id().data(), this->facebook_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server.Self.facebook_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->facebook_id(), target);
  }

  // optional string google_id = 6;
  if (this->google_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->google_id().data(), this->google_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server.Self.google_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->google_id(), target);
  }

  // optional string gamecenter_id = 7;
  if (this->gamecenter_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->gamecenter_id().data(), this->gamecenter_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server.Self.gamecenter_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->gamecenter_id(), target);
  }

  // optional string steam_id = 8;
  if (this->steam_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->steam_id().data(), this->steam_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server.Self.steam_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->steam_id(), target);
  }

  // optional string custom_id = 9;
  if (this->custom_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->custom_id().data(), this->custom_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server.Self.custom_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->custom_id(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:server.Self)
  return target;
}

size_t Self::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:server.Self)
  size_t total_size = 0;

  // optional .server.User user = 1;
  if (this->has_user()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->user_);
  }

  // optional bool verified = 2;
  if (this->verified() != 0) {
    total_size += 1 + 1;
  }

  // optional string email = 3;
  if (this->email().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->email());
  }

  // optional string facebook_id = 5;
  if (this->facebook_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->facebook_id());
  }

  // optional string google_id = 6;
  if (this->google_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->google_id());
  }

  // optional string gamecenter_id = 7;
  if (this->gamecenter_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->gamecenter_id());
  }

  // optional string steam_id = 8;
  if (this->steam_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->steam_id());
  }

  // optional string custom_id = 9;
  if (this->custom_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->custom_id());
  }

  // repeated string device_id = 4;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->device_id_size());
  for (int i = 0; i < this->device_id_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->device_id(i));
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Self::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:server.Self)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Self* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Self>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:server.Self)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:server.Self)
    UnsafeMergeFrom(*source);
  }
}

void Self::MergeFrom(const Self& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:server.Self)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void Self::UnsafeMergeFrom(const Self& from) {
  GOOGLE_DCHECK(&from != this);
  device_id_.UnsafeMergeFrom(from.device_id_);
  if (from.has_user()) {
    mutable_user()->::server::User::MergeFrom(from.user());
  }
  if (from.verified() != 0) {
    set_verified(from.verified());
  }
  if (from.email().size() > 0) {

    email_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.email_);
  }
  if (from.facebook_id().size() > 0) {

    facebook_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.facebook_id_);
  }
  if (from.google_id().size() > 0) {

    google_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.google_id_);
  }
  if (from.gamecenter_id().size() > 0) {

    gamecenter_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.gamecenter_id_);
  }
  if (from.steam_id().size() > 0) {

    steam_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.steam_id_);
  }
  if (from.custom_id().size() > 0) {

    custom_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.custom_id_);
  }
}

void Self::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:server.Self)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Self::CopyFrom(const Self& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:server.Self)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool Self::IsInitialized() const {

  return true;
}

void Self::Swap(Self* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Self::InternalSwap(Self* other) {
  std::swap(user_, other->user_);
  std::swap(verified_, other->verified_);
  email_.Swap(&other->email_);
  device_id_.UnsafeArenaSwap(&other->device_id_);
  facebook_id_.Swap(&other->facebook_id_);
  google_id_.Swap(&other->google_id_);
  gamecenter_id_.Swap(&other->gamecenter_id_);
  steam_id_.Swap(&other->steam_id_);
  custom_id_.Swap(&other->custom_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Self::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Self_descriptor_;
  metadata.reflection = Self_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Self

// optional .server.User user = 1;
bool Self::has_user() const {
  return this != internal_default_instance() && user_ != NULL;
}
void Self::clear_user() {
  if (GetArenaNoVirtual() == NULL && user_ != NULL) delete user_;
  user_ = NULL;
}
const ::server::User& Self::user() const {
  // @@protoc_insertion_point(field_get:server.Self.user)
  return user_ != NULL ? *user_
                         : *::server::User::internal_default_instance();
}
::server::User* Self::mutable_user() {
  
  if (user_ == NULL) {
    user_ = new ::server::User;
  }
  // @@protoc_insertion_point(field_mutable:server.Self.user)
  return user_;
}
::server::User* Self::release_user() {
  // @@protoc_insertion_point(field_release:server.Self.user)
  
  ::server::User* temp = user_;
  user_ = NULL;
  return temp;
}
void Self::set_allocated_user(::server::User* user) {
  delete user_;
  user_ = user;
  if (user) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:server.Self.user)
}

// optional bool verified = 2;
void Self::clear_verified() {
  verified_ = false;
}
bool Self::verified() const {
  // @@protoc_insertion_point(field_get:server.Self.verified)
  return verified_;
}
void Self::set_verified(bool value) {
  
  verified_ = value;
  // @@protoc_insertion_point(field_set:server.Self.verified)
}

// optional string email = 3;
void Self::clear_email() {
  email_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Self::email() const {
  // @@protoc_insertion_point(field_get:server.Self.email)
  return email_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Self::set_email(const ::std::string& value) {
  
  email_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:server.Self.email)
}
void Self::set_email(const char* value) {
  
  email_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:server.Self.email)
}
void Self::set_email(const char* value, size_t size) {
  
  email_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:server.Self.email)
}
::std::string* Self::mutable_email() {
  
  // @@protoc_insertion_point(field_mutable:server.Self.email)
  return email_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Self::release_email() {
  // @@protoc_insertion_point(field_release:server.Self.email)
  
  return email_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Self::set_allocated_email(::std::string* email) {
  if (email != NULL) {
    
  } else {
    
  }
  email_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), email);
  // @@protoc_insertion_point(field_set_allocated:server.Self.email)
}

// repeated string device_id = 4;
int Self::device_id_size() const {
  return device_id_.size();
}
void Self::clear_device_id() {
  device_id_.Clear();
}
const ::std::string& Self::device_id(int index) const {
  // @@protoc_insertion_point(field_get:server.Self.device_id)
  return device_id_.Get(index);
}
::std::string* Self::mutable_device_id(int index) {
  // @@protoc_insertion_point(field_mutable:server.Self.device_id)
  return device_id_.Mutable(index);
}
void Self::set_device_id(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:server.Self.device_id)
  device_id_.Mutable(index)->assign(value);
}
void Self::set_device_id(int index, const char* value) {
  device_id_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:server.Self.device_id)
}
void Self::set_device_id(int index, const char* value, size_t size) {
  device_id_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:server.Self.device_id)
}
::std::string* Self::add_device_id() {
  // @@protoc_insertion_point(field_add_mutable:server.Self.device_id)
  return device_id_.Add();
}
void Self::add_device_id(const ::std::string& value) {
  device_id_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:server.Self.device_id)
}
void Self::add_device_id(const char* value) {
  device_id_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:server.Self.device_id)
}
void Self::add_device_id(const char* value, size_t size) {
  device_id_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:server.Self.device_id)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
Self::device_id() const {
  // @@protoc_insertion_point(field_list:server.Self.device_id)
  return device_id_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
Self::mutable_device_id() {
  // @@protoc_insertion_point(field_mutable_list:server.Self.device_id)
  return &device_id_;
}

// optional string facebook_id = 5;
void Self::clear_facebook_id() {
  facebook_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Self::facebook_id() const {
  // @@protoc_insertion_point(field_get:server.Self.facebook_id)
  return facebook_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Self::set_facebook_id(const ::std::string& value) {
  
  facebook_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:server.Self.facebook_id)
}
void Self::set_facebook_id(const char* value) {
  
  facebook_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:server.Self.facebook_id)
}
void Self::set_facebook_id(const char* value, size_t size) {
  
  facebook_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:server.Self.facebook_id)
}
::std::string* Self::mutable_facebook_id() {
  
  // @@protoc_insertion_point(field_mutable:server.Self.facebook_id)
  return facebook_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Self::release_facebook_id() {
  // @@protoc_insertion_point(field_release:server.Self.facebook_id)
  
  return facebook_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Self::set_allocated_facebook_id(::std::string* facebook_id) {
  if (facebook_id != NULL) {
    
  } else {
    
  }
  facebook_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), facebook_id);
  // @@protoc_insertion_point(field_set_allocated:server.Self.facebook_id)
}

// optional string google_id = 6;
void Self::clear_google_id() {
  google_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Self::google_id() const {
  // @@protoc_insertion_point(field_get:server.Self.google_id)
  return google_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Self::set_google_id(const ::std::string& value) {
  
  google_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:server.Self.google_id)
}
void Self::set_google_id(const char* value) {
  
  google_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:server.Self.google_id)
}
void Self::set_google_id(const char* value, size_t size) {
  
  google_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:server.Self.google_id)
}
::std::string* Self::mutable_google_id() {
  
  // @@protoc_insertion_point(field_mutable:server.Self.google_id)
  return google_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Self::release_google_id() {
  // @@protoc_insertion_point(field_release:server.Self.google_id)
  
  return google_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Self::set_allocated_google_id(::std::string* google_id) {
  if (google_id != NULL) {
    
  } else {
    
  }
  google_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), google_id);
  // @@protoc_insertion_point(field_set_allocated:server.Self.google_id)
}

// optional string gamecenter_id = 7;
void Self::clear_gamecenter_id() {
  gamecenter_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Self::gamecenter_id() const {
  // @@protoc_insertion_point(field_get:server.Self.gamecenter_id)
  return gamecenter_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Self::set_gamecenter_id(const ::std::string& value) {
  
  gamecenter_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:server.Self.gamecenter_id)
}
void Self::set_gamecenter_id(const char* value) {
  
  gamecenter_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:server.Self.gamecenter_id)
}
void Self::set_gamecenter_id(const char* value, size_t size) {
  
  gamecenter_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:server.Self.gamecenter_id)
}
::std::string* Self::mutable_gamecenter_id() {
  
  // @@protoc_insertion_point(field_mutable:server.Self.gamecenter_id)
  return gamecenter_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Self::release_gamecenter_id() {
  // @@protoc_insertion_point(field_release:server.Self.gamecenter_id)
  
  return gamecenter_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Self::set_allocated_gamecenter_id(::std::string* gamecenter_id) {
  if (gamecenter_id != NULL) {
    
  } else {
    
  }
  gamecenter_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), gamecenter_id);
  // @@protoc_insertion_point(field_set_allocated:server.Self.gamecenter_id)
}

// optional string steam_id = 8;
void Self::clear_steam_id() {
  steam_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Self::steam_id() const {
  // @@protoc_insertion_point(field_get:server.Self.steam_id)
  return steam_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Self::set_steam_id(const ::std::string& value) {
  
  steam_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:server.Self.steam_id)
}
void Self::set_steam_id(const char* value) {
  
  steam_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:server.Self.steam_id)
}
void Self::set_steam_id(const char* value, size_t size) {
  
  steam_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:server.Self.steam_id)
}
::std::string* Self::mutable_steam_id() {
  
  // @@protoc_insertion_point(field_mutable:server.Self.steam_id)
  return steam_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Self::release_steam_id() {
  // @@protoc_insertion_point(field_release:server.Self.steam_id)
  
  return steam_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Self::set_allocated_steam_id(::std::string* steam_id) {
  if (steam_id != NULL) {
    
  } else {
    
  }
  steam_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), steam_id);
  // @@protoc_insertion_point(field_set_allocated:server.Self.steam_id)
}

// optional string custom_id = 9;
void Self::clear_custom_id() {
  custom_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Self::custom_id() const {
  // @@protoc_insertion_point(field_get:server.Self.custom_id)
  return custom_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Self::set_custom_id(const ::std::string& value) {
  
  custom_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:server.Self.custom_id)
}
void Self::set_custom_id(const char* value) {
  
  custom_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:server.Self.custom_id)
}
void Self::set_custom_id(const char* value, size_t size) {
  
  custom_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:server.Self.custom_id)
}
::std::string* Self::mutable_custom_id() {
  
  // @@protoc_insertion_point(field_mutable:server.Self.custom_id)
  return custom_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Self::release_custom_id() {
  // @@protoc_insertion_point(field_release:server.Self.custom_id)
  
  return custom_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Self::set_allocated_custom_id(::std::string* custom_id) {
  if (custom_id != NULL) {
    
  } else {
    
  }
  custom_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), custom_id);
  // @@protoc_insertion_point(field_set_allocated:server.Self.custom_id)
}

inline const Self* Self::internal_default_instance() {
  return &Self_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TSelfFetch::TSelfFetch()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_api_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:server.TSelfFetch)
}

void TSelfFetch::InitAsDefaultInstance() {
}

TSelfFetch::TSelfFetch(const TSelfFetch& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:server.TSelfFetch)
}

void TSelfFetch::SharedCtor() {
  _cached_size_ = 0;
}

TSelfFetch::~TSelfFetch() {
  // @@protoc_insertion_point(destructor:server.TSelfFetch)
  SharedDtor();
}

void TSelfFetch::SharedDtor() {
}

void TSelfFetch::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TSelfFetch::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TSelfFetch_descriptor_;
}

const TSelfFetch& TSelfFetch::default_instance() {
  protobuf_InitDefaults_api_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<TSelfFetch> TSelfFetch_default_instance_;

TSelfFetch* TSelfFetch::New(::google::protobuf::Arena* arena) const {
  TSelfFetch* n = new TSelfFetch;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TSelfFetch::Clear() {
// @@protoc_insertion_point(message_clear_start:server.TSelfFetch)
}

bool TSelfFetch::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:server.TSelfFetch)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
  }
success:
  // @@protoc_insertion_point(parse_success:server.TSelfFetch)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:server.TSelfFetch)
  return false;
#undef DO_
}

void TSelfFetch::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:server.TSelfFetch)
  // @@protoc_insertion_point(serialize_end:server.TSelfFetch)
}

::google::protobuf::uint8* TSelfFetch::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:server.TSelfFetch)
  // @@protoc_insertion_point(serialize_to_array_end:server.TSelfFetch)
  return target;
}

size_t TSelfFetch::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:server.TSelfFetch)
  size_t total_size = 0;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TSelfFetch::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:server.TSelfFetch)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const TSelfFetch* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TSelfFetch>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:server.TSelfFetch)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:server.TSelfFetch)
    UnsafeMergeFrom(*source);
  }
}

void TSelfFetch::MergeFrom(const TSelfFetch& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:server.TSelfFetch)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void TSelfFetch::UnsafeMergeFrom(const TSelfFetch& from) {
  GOOGLE_DCHECK(&from != this);
}

void TSelfFetch::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:server.TSelfFetch)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TSelfFetch::CopyFrom(const TSelfFetch& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:server.TSelfFetch)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool TSelfFetch::IsInitialized() const {

  return true;
}

void TSelfFetch::Swap(TSelfFetch* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TSelfFetch::InternalSwap(TSelfFetch* other) {
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TSelfFetch::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TSelfFetch_descriptor_;
  metadata.reflection = TSelfFetch_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TSelfFetch

inline const TSelfFetch* TSelfFetch::internal_default_instance() {
  return &TSelfFetch_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TSelf::kSelfFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TSelf::TSelf()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_api_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:server.TSelf)
}

void TSelf::InitAsDefaultInstance() {
  self_ = const_cast< ::server::Self*>(
      ::server::Self::internal_default_instance());
}

TSelf::TSelf(const TSelf& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:server.TSelf)
}

void TSelf::SharedCtor() {
  self_ = NULL;
  _cached_size_ = 0;
}

TSelf::~TSelf() {
  // @@protoc_insertion_point(destructor:server.TSelf)
  SharedDtor();
}

void TSelf::SharedDtor() {
  if (this != &TSelf_default_instance_.get()) {
    delete self_;
  }
}

void TSelf::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TSelf::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TSelf_descriptor_;
}

const TSelf& TSelf::default_instance() {
  protobuf_InitDefaults_api_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<TSelf> TSelf_default_instance_;

TSelf* TSelf::New(::google::protobuf::Arena* arena) const {
  TSelf* n = new TSelf;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TSelf::Clear() {
// @@protoc_insertion_point(message_clear_start:server.TSelf)
  if (GetArenaNoVirtual() == NULL && self_ != NULL) delete self_;
  self_ = NULL;
}

bool TSelf::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:server.TSelf)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .server.Self self = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_self()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:server.TSelf)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:server.TSelf)
  return false;
#undef DO_
}

void TSelf::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:server.TSelf)
  // optional .server.Self self = 1;
  if (this->has_self()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->self_, output);
  }

  // @@protoc_insertion_point(serialize_end:server.TSelf)
}

::google::protobuf::uint8* TSelf::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:server.TSelf)
  // optional .server.Self self = 1;
  if (this->has_self()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->self_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:server.TSelf)
  return target;
}

size_t TSelf::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:server.TSelf)
  size_t total_size = 0;

  // optional .server.Self self = 1;
  if (this->has_self()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->self_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TSelf::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:server.TSelf)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const TSelf* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TSelf>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:server.TSelf)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:server.TSelf)
    UnsafeMergeFrom(*source);
  }
}

void TSelf::MergeFrom(const TSelf& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:server.TSelf)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void TSelf::UnsafeMergeFrom(const TSelf& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.has_self()) {
    mutable_self()->::server::Self::MergeFrom(from.self());
  }
}

void TSelf::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:server.TSelf)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TSelf::CopyFrom(const TSelf& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:server.TSelf)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool TSelf::IsInitialized() const {

  return true;
}

void TSelf::Swap(TSelf* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TSelf::InternalSwap(TSelf* other) {
  std::swap(self_, other->self_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TSelf::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TSelf_descriptor_;
  metadata.reflection = TSelf_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TSelf

// optional .server.Self self = 1;
bool TSelf::has_self() const {
  return this != internal_default_instance() && self_ != NULL;
}
void TSelf::clear_self() {
  if (GetArenaNoVirtual() == NULL && self_ != NULL) delete self_;
  self_ = NULL;
}
const ::server::Self& TSelf::self() const {
  // @@protoc_insertion_point(field_get:server.TSelf.self)
  return self_ != NULL ? *self_
                         : *::server::Self::internal_default_instance();
}
::server::Self* TSelf::mutable_self() {
  
  if (self_ == NULL) {
    self_ = new ::server::Self;
  }
  // @@protoc_insertion_point(field_mutable:server.TSelf.self)
  return self_;
}
::server::Self* TSelf::release_self() {
  // @@protoc_insertion_point(field_release:server.TSelf.self)
  
  ::server::Self* temp = self_;
  self_ = NULL;
  return temp;
}
void TSelf::set_allocated_self(::server::Self* self) {
  delete self_;
  self_ = self;
  if (self) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:server.TSelf.self)
}

inline const TSelf* TSelf::internal_default_instance() {
  return &TSelf_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TSelfUpdate::kHandleFieldNumber;
const int TSelfUpdate::kFullnameFieldNumber;
const int TSelfUpdate::kTimezoneFieldNumber;
const int TSelfUpdate::kLocationFieldNumber;
const int TSelfUpdate::kLangFieldNumber;
const int TSelfUpdate::kMetadataFieldNumber;
const int TSelfUpdate::kAvatarUrlFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TSelfUpdate::TSelfUpdate()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_api_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:server.TSelfUpdate)
}

void TSelfUpdate::InitAsDefaultInstance() {
}

TSelfUpdate::TSelfUpdate(const TSelfUpdate& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:server.TSelfUpdate)
}

void TSelfUpdate::SharedCtor() {
  handle_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  fullname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  timezone_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  location_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  lang_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  metadata_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  avatar_url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

TSelfUpdate::~TSelfUpdate() {
  // @@protoc_insertion_point(destructor:server.TSelfUpdate)
  SharedDtor();
}

void TSelfUpdate::SharedDtor() {
  handle_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  fullname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  timezone_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  location_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  lang_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  metadata_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  avatar_url_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void TSelfUpdate::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TSelfUpdate::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TSelfUpdate_descriptor_;
}

const TSelfUpdate& TSelfUpdate::default_instance() {
  protobuf_InitDefaults_api_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<TSelfUpdate> TSelfUpdate_default_instance_;

TSelfUpdate* TSelfUpdate::New(::google::protobuf::Arena* arena) const {
  TSelfUpdate* n = new TSelfUpdate;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TSelfUpdate::Clear() {
// @@protoc_insertion_point(message_clear_start:server.TSelfUpdate)
  handle_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  fullname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  timezone_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  location_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  lang_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  metadata_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  avatar_url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool TSelfUpdate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:server.TSelfUpdate)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string handle = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_handle()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->handle().data(), this->handle().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "server.TSelfUpdate.handle"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_fullname;
        break;
      }

      // optional string fullname = 2;
      case 2: {
        if (tag == 18) {
         parse_fullname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_fullname()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->fullname().data(), this->fullname().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "server.TSelfUpdate.fullname"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_timezone;
        break;
      }

      // optional string timezone = 3;
      case 3: {
        if (tag == 26) {
         parse_timezone:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_timezone()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->timezone().data(), this->timezone().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "server.TSelfUpdate.timezone"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_location;
        break;
      }

      // optional string location = 4;
      case 4: {
        if (tag == 34) {
         parse_location:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_location()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->location().data(), this->location().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "server.TSelfUpdate.location"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_lang;
        break;
      }

      // optional string lang = 5;
      case 5: {
        if (tag == 42) {
         parse_lang:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_lang()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->lang().data(), this->lang().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "server.TSelfUpdate.lang"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_metadata;
        break;
      }

      // optional bytes metadata = 6;
      case 6: {
        if (tag == 50) {
         parse_metadata:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_metadata()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_avatar_url;
        break;
      }

      // optional string avatar_url = 7;
      case 7: {
        if (tag == 58) {
         parse_avatar_url:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_avatar_url()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->avatar_url().data(), this->avatar_url().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "server.TSelfUpdate.avatar_url"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:server.TSelfUpdate)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:server.TSelfUpdate)
  return false;
#undef DO_
}

void TSelfUpdate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:server.TSelfUpdate)
  // optional string handle = 1;
  if (this->handle().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->handle().data(), this->handle().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server.TSelfUpdate.handle");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->handle(), output);
  }

  // optional string fullname = 2;
  if (this->fullname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->fullname().data(), this->fullname().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server.TSelfUpdate.fullname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->fullname(), output);
  }

  // optional string timezone = 3;
  if (this->timezone().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->timezone().data(), this->timezone().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server.TSelfUpdate.timezone");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->timezone(), output);
  }

  // optional string location = 4;
  if (this->location().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->location().data(), this->location().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server.TSelfUpdate.location");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->location(), output);
  }

  // optional string lang = 5;
  if (this->lang().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->lang().data(), this->lang().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server.TSelfUpdate.lang");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->lang(), output);
  }

  // optional bytes metadata = 6;
  if (this->metadata().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      6, this->metadata(), output);
  }

  // optional string avatar_url = 7;
  if (this->avatar_url().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->avatar_url().data(), this->avatar_url().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server.TSelfUpdate.avatar_url");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->avatar_url(), output);
  }

  // @@protoc_insertion_point(serialize_end:server.TSelfUpdate)
}

::google::protobuf::uint8* TSelfUpdate::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:server.TSelfUpdate)
  // optional string handle = 1;
  if (this->handle().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->handle().data(), this->handle().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server.TSelfUpdate.handle");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->handle(), target);
  }

  // optional string fullname = 2;
  if (this->fullname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->fullname().data(), this->fullname().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server.TSelfUpdate.fullname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->fullname(), target);
  }

  // optional string timezone = 3;
  if (this->timezone().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->timezone().data(), this->timezone().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server.TSelfUpdate.timezone");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->timezone(), target);
  }

  // optional string location = 4;
  if (this->location().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->location().data(), this->location().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server.TSelfUpdate.location");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->location(), target);
  }

  // optional string lang = 5;
  if (this->lang().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->lang().data(), this->lang().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server.TSelfUpdate.lang");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->lang(), target);
  }

  // optional bytes metadata = 6;
  if (this->metadata().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        6, this->metadata(), target);
  }

  // optional string avatar_url = 7;
  if (this->avatar_url().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->avatar_url().data(), this->avatar_url().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server.TSelfUpdate.avatar_url");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->avatar_url(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:server.TSelfUpdate)
  return target;
}

size_t TSelfUpdate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:server.TSelfUpdate)
  size_t total_size = 0;

  // optional string handle = 1;
  if (this->handle().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->handle());
  }

  // optional string fullname = 2;
  if (this->fullname().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->fullname());
  }

  // optional string timezone = 3;
  if (this->timezone().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->timezone());
  }

  // optional string location = 4;
  if (this->location().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->location());
  }

  // optional string lang = 5;
  if (this->lang().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->lang());
  }

  // optional bytes metadata = 6;
  if (this->metadata().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->metadata());
  }

  // optional string avatar_url = 7;
  if (this->avatar_url().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->avatar_url());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TSelfUpdate::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:server.TSelfUpdate)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const TSelfUpdate* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TSelfUpdate>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:server.TSelfUpdate)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:server.TSelfUpdate)
    UnsafeMergeFrom(*source);
  }
}

void TSelfUpdate::MergeFrom(const TSelfUpdate& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:server.TSelfUpdate)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void TSelfUpdate::UnsafeMergeFrom(const TSelfUpdate& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.handle().size() > 0) {

    handle_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.handle_);
  }
  if (from.fullname().size() > 0) {

    fullname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.fullname_);
  }
  if (from.timezone().size() > 0) {

    timezone_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.timezone_);
  }
  if (from.location().size() > 0) {

    location_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.location_);
  }
  if (from.lang().size() > 0) {

    lang_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.lang_);
  }
  if (from.metadata().size() > 0) {

    metadata_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.metadata_);
  }
  if (from.avatar_url().size() > 0) {

    avatar_url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.avatar_url_);
  }
}

void TSelfUpdate::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:server.TSelfUpdate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TSelfUpdate::CopyFrom(const TSelfUpdate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:server.TSelfUpdate)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool TSelfUpdate::IsInitialized() const {

  return true;
}

void TSelfUpdate::Swap(TSelfUpdate* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TSelfUpdate::InternalSwap(TSelfUpdate* other) {
  handle_.Swap(&other->handle_);
  fullname_.Swap(&other->fullname_);
  timezone_.Swap(&other->timezone_);
  location_.Swap(&other->location_);
  lang_.Swap(&other->lang_);
  metadata_.Swap(&other->metadata_);
  avatar_url_.Swap(&other->avatar_url_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TSelfUpdate::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TSelfUpdate_descriptor_;
  metadata.reflection = TSelfUpdate_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TSelfUpdate

// optional string handle = 1;
void TSelfUpdate::clear_handle() {
  handle_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& TSelfUpdate::handle() const {
  // @@protoc_insertion_point(field_get:server.TSelfUpdate.handle)
  return handle_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TSelfUpdate::set_handle(const ::std::string& value) {
  
  handle_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:server.TSelfUpdate.handle)
}
void TSelfUpdate::set_handle(const char* value) {
  
  handle_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:server.TSelfUpdate.handle)
}
void TSelfUpdate::set_handle(const char* value, size_t size) {
  
  handle_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:server.TSelfUpdate.handle)
}
::std::string* TSelfUpdate::mutable_handle() {
  
  // @@protoc_insertion_point(field_mutable:server.TSelfUpdate.handle)
  return handle_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* TSelfUpdate::release_handle() {
  // @@protoc_insertion_point(field_release:server.TSelfUpdate.handle)
  
  return handle_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TSelfUpdate::set_allocated_handle(::std::string* handle) {
  if (handle != NULL) {
    
  } else {
    
  }
  handle_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), handle);
  // @@protoc_insertion_point(field_set_allocated:server.TSelfUpdate.handle)
}

// optional string fullname = 2;
void TSelfUpdate::clear_fullname() {
  fullname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& TSelfUpdate::fullname() const {
  // @@protoc_insertion_point(field_get:server.TSelfUpdate.fullname)
  return fullname_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TSelfUpdate::set_fullname(const ::std::string& value) {
  
  fullname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:server.TSelfUpdate.fullname)
}
void TSelfUpdate::set_fullname(const char* value) {
  
  fullname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:server.TSelfUpdate.fullname)
}
void TSelfUpdate::set_fullname(const char* value, size_t size) {
  
  fullname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:server.TSelfUpdate.fullname)
}
::std::string* TSelfUpdate::mutable_fullname() {
  
  // @@protoc_insertion_point(field_mutable:server.TSelfUpdate.fullname)
  return fullname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* TSelfUpdate::release_fullname() {
  // @@protoc_insertion_point(field_release:server.TSelfUpdate.fullname)
  
  return fullname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TSelfUpdate::set_allocated_fullname(::std::string* fullname) {
  if (fullname != NULL) {
    
  } else {
    
  }
  fullname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), fullname);
  // @@protoc_insertion_point(field_set_allocated:server.TSelfUpdate.fullname)
}

// optional string timezone = 3;
void TSelfUpdate::clear_timezone() {
  timezone_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& TSelfUpdate::timezone() const {
  // @@protoc_insertion_point(field_get:server.TSelfUpdate.timezone)
  return timezone_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TSelfUpdate::set_timezone(const ::std::string& value) {
  
  timezone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:server.TSelfUpdate.timezone)
}
void TSelfUpdate::set_timezone(const char* value) {
  
  timezone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:server.TSelfUpdate.timezone)
}
void TSelfUpdate::set_timezone(const char* value, size_t size) {
  
  timezone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:server.TSelfUpdate.timezone)
}
::std::string* TSelfUpdate::mutable_timezone() {
  
  // @@protoc_insertion_point(field_mutable:server.TSelfUpdate.timezone)
  return timezone_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* TSelfUpdate::release_timezone() {
  // @@protoc_insertion_point(field_release:server.TSelfUpdate.timezone)
  
  return timezone_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TSelfUpdate::set_allocated_timezone(::std::string* timezone) {
  if (timezone != NULL) {
    
  } else {
    
  }
  timezone_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), timezone);
  // @@protoc_insertion_point(field_set_allocated:server.TSelfUpdate.timezone)
}

// optional string location = 4;
void TSelfUpdate::clear_location() {
  location_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& TSelfUpdate::location() const {
  // @@protoc_insertion_point(field_get:server.TSelfUpdate.location)
  return location_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TSelfUpdate::set_location(const ::std::string& value) {
  
  location_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:server.TSelfUpdate.location)
}
void TSelfUpdate::set_location(const char* value) {
  
  location_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:server.TSelfUpdate.location)
}
void TSelfUpdate::set_location(const char* value, size_t size) {
  
  location_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:server.TSelfUpdate.location)
}
::std::string* TSelfUpdate::mutable_location() {
  
  // @@protoc_insertion_point(field_mutable:server.TSelfUpdate.location)
  return location_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* TSelfUpdate::release_location() {
  // @@protoc_insertion_point(field_release:server.TSelfUpdate.location)
  
  return location_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TSelfUpdate::set_allocated_location(::std::string* location) {
  if (location != NULL) {
    
  } else {
    
  }
  location_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), location);
  // @@protoc_insertion_point(field_set_allocated:server.TSelfUpdate.location)
}

// optional string lang = 5;
void TSelfUpdate::clear_lang() {
  lang_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& TSelfUpdate::lang() const {
  // @@protoc_insertion_point(field_get:server.TSelfUpdate.lang)
  return lang_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TSelfUpdate::set_lang(const ::std::string& value) {
  
  lang_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:server.TSelfUpdate.lang)
}
void TSelfUpdate::set_lang(const char* value) {
  
  lang_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:server.TSelfUpdate.lang)
}
void TSelfUpdate::set_lang(const char* value, size_t size) {
  
  lang_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:server.TSelfUpdate.lang)
}
::std::string* TSelfUpdate::mutable_lang() {
  
  // @@protoc_insertion_point(field_mutable:server.TSelfUpdate.lang)
  return lang_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* TSelfUpdate::release_lang() {
  // @@protoc_insertion_point(field_release:server.TSelfUpdate.lang)
  
  return lang_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TSelfUpdate::set_allocated_lang(::std::string* lang) {
  if (lang != NULL) {
    
  } else {
    
  }
  lang_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), lang);
  // @@protoc_insertion_point(field_set_allocated:server.TSelfUpdate.lang)
}

// optional bytes metadata = 6;
void TSelfUpdate::clear_metadata() {
  metadata_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& TSelfUpdate::metadata() const {
  // @@protoc_insertion_point(field_get:server.TSelfUpdate.metadata)
  return metadata_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TSelfUpdate::set_metadata(const ::std::string& value) {
  
  metadata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:server.TSelfUpdate.metadata)
}
void TSelfUpdate::set_metadata(const char* value) {
  
  metadata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:server.TSelfUpdate.metadata)
}
void TSelfUpdate::set_metadata(const void* value, size_t size) {
  
  metadata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:server.TSelfUpdate.metadata)
}
::std::string* TSelfUpdate::mutable_metadata() {
  
  // @@protoc_insertion_point(field_mutable:server.TSelfUpdate.metadata)
  return metadata_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* TSelfUpdate::release_metadata() {
  // @@protoc_insertion_point(field_release:server.TSelfUpdate.metadata)
  
  return metadata_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TSelfUpdate::set_allocated_metadata(::std::string* metadata) {
  if (metadata != NULL) {
    
  } else {
    
  }
  metadata_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), metadata);
  // @@protoc_insertion_point(field_set_allocated:server.TSelfUpdate.metadata)
}

// optional string avatar_url = 7;
void TSelfUpdate::clear_avatar_url() {
  avatar_url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& TSelfUpdate::avatar_url() const {
  // @@protoc_insertion_point(field_get:server.TSelfUpdate.avatar_url)
  return avatar_url_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TSelfUpdate::set_avatar_url(const ::std::string& value) {
  
  avatar_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:server.TSelfUpdate.avatar_url)
}
void TSelfUpdate::set_avatar_url(const char* value) {
  
  avatar_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:server.TSelfUpdate.avatar_url)
}
void TSelfUpdate::set_avatar_url(const char* value, size_t size) {
  
  avatar_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:server.TSelfUpdate.avatar_url)
}
::std::string* TSelfUpdate::mutable_avatar_url() {
  
  // @@protoc_insertion_point(field_mutable:server.TSelfUpdate.avatar_url)
  return avatar_url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* TSelfUpdate::release_avatar_url() {
  // @@protoc_insertion_point(field_release:server.TSelfUpdate.avatar_url)
  
  return avatar_url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TSelfUpdate::set_allocated_avatar_url(::std::string* avatar_url) {
  if (avatar_url != NULL) {
    
  } else {
    
  }
  avatar_url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), avatar_url);
  // @@protoc_insertion_point(field_set_allocated:server.TSelfUpdate.avatar_url)
}

inline const TSelfUpdate* TSelfUpdate::internal_default_instance() {
  return &TSelfUpdate_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TUsersFetch::kUserIdsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TUsersFetch::TUsersFetch()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_api_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:server.TUsersFetch)
}

void TUsersFetch::InitAsDefaultInstance() {
}

TUsersFetch::TUsersFetch(const TUsersFetch& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:server.TUsersFetch)
}

void TUsersFetch::SharedCtor() {
  _cached_size_ = 0;
}

TUsersFetch::~TUsersFetch() {
  // @@protoc_insertion_point(destructor:server.TUsersFetch)
  SharedDtor();
}

void TUsersFetch::SharedDtor() {
}

void TUsersFetch::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TUsersFetch::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TUsersFetch_descriptor_;
}

const TUsersFetch& TUsersFetch::default_instance() {
  protobuf_InitDefaults_api_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<TUsersFetch> TUsersFetch_default_instance_;

TUsersFetch* TUsersFetch::New(::google::protobuf::Arena* arena) const {
  TUsersFetch* n = new TUsersFetch;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TUsersFetch::Clear() {
// @@protoc_insertion_point(message_clear_start:server.TUsersFetch)
  user_ids_.Clear();
}

bool TUsersFetch::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:server.TUsersFetch)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated bytes user_ids = 1;
      case 1: {
        if (tag == 10) {
         parse_user_ids:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->add_user_ids()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_user_ids;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:server.TUsersFetch)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:server.TUsersFetch)
  return false;
#undef DO_
}

void TUsersFetch::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:server.TUsersFetch)
  // repeated bytes user_ids = 1;
  for (int i = 0; i < this->user_ids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->user_ids(i), output);
  }

  // @@protoc_insertion_point(serialize_end:server.TUsersFetch)
}

::google::protobuf::uint8* TUsersFetch::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:server.TUsersFetch)
  // repeated bytes user_ids = 1;
  for (int i = 0; i < this->user_ids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBytesToArray(1, this->user_ids(i), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:server.TUsersFetch)
  return target;
}

size_t TUsersFetch::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:server.TUsersFetch)
  size_t total_size = 0;

  // repeated bytes user_ids = 1;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->user_ids_size());
  for (int i = 0; i < this->user_ids_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
      this->user_ids(i));
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TUsersFetch::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:server.TUsersFetch)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const TUsersFetch* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TUsersFetch>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:server.TUsersFetch)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:server.TUsersFetch)
    UnsafeMergeFrom(*source);
  }
}

void TUsersFetch::MergeFrom(const TUsersFetch& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:server.TUsersFetch)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void TUsersFetch::UnsafeMergeFrom(const TUsersFetch& from) {
  GOOGLE_DCHECK(&from != this);
  user_ids_.UnsafeMergeFrom(from.user_ids_);
}

void TUsersFetch::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:server.TUsersFetch)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TUsersFetch::CopyFrom(const TUsersFetch& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:server.TUsersFetch)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool TUsersFetch::IsInitialized() const {

  return true;
}

void TUsersFetch::Swap(TUsersFetch* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TUsersFetch::InternalSwap(TUsersFetch* other) {
  user_ids_.UnsafeArenaSwap(&other->user_ids_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TUsersFetch::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TUsersFetch_descriptor_;
  metadata.reflection = TUsersFetch_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TUsersFetch

// repeated bytes user_ids = 1;
int TUsersFetch::user_ids_size() const {
  return user_ids_.size();
}
void TUsersFetch::clear_user_ids() {
  user_ids_.Clear();
}
const ::std::string& TUsersFetch::user_ids(int index) const {
  // @@protoc_insertion_point(field_get:server.TUsersFetch.user_ids)
  return user_ids_.Get(index);
}
::std::string* TUsersFetch::mutable_user_ids(int index) {
  // @@protoc_insertion_point(field_mutable:server.TUsersFetch.user_ids)
  return user_ids_.Mutable(index);
}
void TUsersFetch::set_user_ids(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:server.TUsersFetch.user_ids)
  user_ids_.Mutable(index)->assign(value);
}
void TUsersFetch::set_user_ids(int index, const char* value) {
  user_ids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:server.TUsersFetch.user_ids)
}
void TUsersFetch::set_user_ids(int index, const void* value, size_t size) {
  user_ids_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:server.TUsersFetch.user_ids)
}
::std::string* TUsersFetch::add_user_ids() {
  // @@protoc_insertion_point(field_add_mutable:server.TUsersFetch.user_ids)
  return user_ids_.Add();
}
void TUsersFetch::add_user_ids(const ::std::string& value) {
  user_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:server.TUsersFetch.user_ids)
}
void TUsersFetch::add_user_ids(const char* value) {
  user_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:server.TUsersFetch.user_ids)
}
void TUsersFetch::add_user_ids(const void* value, size_t size) {
  user_ids_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:server.TUsersFetch.user_ids)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
TUsersFetch::user_ids() const {
  // @@protoc_insertion_point(field_list:server.TUsersFetch.user_ids)
  return user_ids_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
TUsersFetch::mutable_user_ids() {
  // @@protoc_insertion_point(field_mutable_list:server.TUsersFetch.user_ids)
  return &user_ids_;
}

inline const TUsersFetch* TUsersFetch::internal_default_instance() {
  return &TUsersFetch_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TUsers::kUsersFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TUsers::TUsers()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_api_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:server.TUsers)
}

void TUsers::InitAsDefaultInstance() {
}

TUsers::TUsers(const TUsers& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:server.TUsers)
}

void TUsers::SharedCtor() {
  _cached_size_ = 0;
}

TUsers::~TUsers() {
  // @@protoc_insertion_point(destructor:server.TUsers)
  SharedDtor();
}

void TUsers::SharedDtor() {
}

void TUsers::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TUsers::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TUsers_descriptor_;
}

const TUsers& TUsers::default_instance() {
  protobuf_InitDefaults_api_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<TUsers> TUsers_default_instance_;

TUsers* TUsers::New(::google::protobuf::Arena* arena) const {
  TUsers* n = new TUsers;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TUsers::Clear() {
// @@protoc_insertion_point(message_clear_start:server.TUsers)
  users_.Clear();
}

bool TUsers::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:server.TUsers)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .server.User users = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_users:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_users()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_users;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:server.TUsers)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:server.TUsers)
  return false;
#undef DO_
}

void TUsers::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:server.TUsers)
  // repeated .server.User users = 1;
  for (unsigned int i = 0, n = this->users_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->users(i), output);
  }

  // @@protoc_insertion_point(serialize_end:server.TUsers)
}

::google::protobuf::uint8* TUsers::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:server.TUsers)
  // repeated .server.User users = 1;
  for (unsigned int i = 0, n = this->users_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->users(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:server.TUsers)
  return target;
}

size_t TUsers::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:server.TUsers)
  size_t total_size = 0;

  // repeated .server.User users = 1;
  {
    unsigned int count = this->users_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->users(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TUsers::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:server.TUsers)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const TUsers* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TUsers>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:server.TUsers)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:server.TUsers)
    UnsafeMergeFrom(*source);
  }
}

void TUsers::MergeFrom(const TUsers& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:server.TUsers)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void TUsers::UnsafeMergeFrom(const TUsers& from) {
  GOOGLE_DCHECK(&from != this);
  users_.MergeFrom(from.users_);
}

void TUsers::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:server.TUsers)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TUsers::CopyFrom(const TUsers& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:server.TUsers)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool TUsers::IsInitialized() const {

  return true;
}

void TUsers::Swap(TUsers* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TUsers::InternalSwap(TUsers* other) {
  users_.UnsafeArenaSwap(&other->users_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TUsers::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TUsers_descriptor_;
  metadata.reflection = TUsers_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TUsers

// repeated .server.User users = 1;
int TUsers::users_size() const {
  return users_.size();
}
void TUsers::clear_users() {
  users_.Clear();
}
const ::server::User& TUsers::users(int index) const {
  // @@protoc_insertion_point(field_get:server.TUsers.users)
  return users_.Get(index);
}
::server::User* TUsers::mutable_users(int index) {
  // @@protoc_insertion_point(field_mutable:server.TUsers.users)
  return users_.Mutable(index);
}
::server::User* TUsers::add_users() {
  // @@protoc_insertion_point(field_add:server.TUsers.users)
  return users_.Add();
}
::google::protobuf::RepeatedPtrField< ::server::User >*
TUsers::mutable_users() {
  // @@protoc_insertion_point(field_mutable_list:server.TUsers.users)
  return &users_;
}
const ::google::protobuf::RepeatedPtrField< ::server::User >&
TUsers::users() const {
  // @@protoc_insertion_point(field_list:server.TUsers.users)
  return users_;
}

inline const TUsers* TUsers::internal_default_instance() {
  return &TUsers_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Friend::kUserFieldNumber;
const int Friend::kTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Friend::Friend()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_api_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:server.Friend)
}

void Friend::InitAsDefaultInstance() {
  user_ = const_cast< ::server::User*>(
      ::server::User::internal_default_instance());
}

Friend::Friend(const Friend& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:server.Friend)
}

void Friend::SharedCtor() {
  user_ = NULL;
  type_ = GOOGLE_LONGLONG(0);
  _cached_size_ = 0;
}

Friend::~Friend() {
  // @@protoc_insertion_point(destructor:server.Friend)
  SharedDtor();
}

void Friend::SharedDtor() {
  if (this != &Friend_default_instance_.get()) {
    delete user_;
  }
}

void Friend::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Friend::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Friend_descriptor_;
}

const Friend& Friend::default_instance() {
  protobuf_InitDefaults_api_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<Friend> Friend_default_instance_;

Friend* Friend::New(::google::protobuf::Arena* arena) const {
  Friend* n = new Friend;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Friend::Clear() {
// @@protoc_insertion_point(message_clear_start:server.Friend)
  if (GetArenaNoVirtual() == NULL && user_ != NULL) delete user_;
  user_ = NULL;
  type_ = GOOGLE_LONGLONG(0);
}

bool Friend::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:server.Friend)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .server.User user = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_user()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // optional int64 type = 2;
      case 2: {
        if (tag == 16) {
         parse_type:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &type_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:server.Friend)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:server.Friend)
  return false;
#undef DO_
}

void Friend::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:server.Friend)
  // optional .server.User user = 1;
  if (this->has_user()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->user_, output);
  }

  // optional int64 type = 2;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->type(), output);
  }

  // @@protoc_insertion_point(serialize_end:server.Friend)
}

::google::protobuf::uint8* Friend::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:server.Friend)
  // optional .server.User user = 1;
  if (this->has_user()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->user_, false, target);
  }

  // optional int64 type = 2;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->type(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:server.Friend)
  return target;
}

size_t Friend::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:server.Friend)
  size_t total_size = 0;

  // optional .server.User user = 1;
  if (this->has_user()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->user_);
  }

  // optional int64 type = 2;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Friend::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:server.Friend)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Friend* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Friend>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:server.Friend)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:server.Friend)
    UnsafeMergeFrom(*source);
  }
}

void Friend::MergeFrom(const Friend& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:server.Friend)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void Friend::UnsafeMergeFrom(const Friend& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.has_user()) {
    mutable_user()->::server::User::MergeFrom(from.user());
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
}

void Friend::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:server.Friend)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Friend::CopyFrom(const Friend& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:server.Friend)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool Friend::IsInitialized() const {

  return true;
}

void Friend::Swap(Friend* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Friend::InternalSwap(Friend* other) {
  std::swap(user_, other->user_);
  std::swap(type_, other->type_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Friend::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Friend_descriptor_;
  metadata.reflection = Friend_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Friend

// optional .server.User user = 1;
bool Friend::has_user() const {
  return this != internal_default_instance() && user_ != NULL;
}
void Friend::clear_user() {
  if (GetArenaNoVirtual() == NULL && user_ != NULL) delete user_;
  user_ = NULL;
}
const ::server::User& Friend::user() const {
  // @@protoc_insertion_point(field_get:server.Friend.user)
  return user_ != NULL ? *user_
                         : *::server::User::internal_default_instance();
}
::server::User* Friend::mutable_user() {
  
  if (user_ == NULL) {
    user_ = new ::server::User;
  }
  // @@protoc_insertion_point(field_mutable:server.Friend.user)
  return user_;
}
::server::User* Friend::release_user() {
  // @@protoc_insertion_point(field_release:server.Friend.user)
  
  ::server::User* temp = user_;
  user_ = NULL;
  return temp;
}
void Friend::set_allocated_user(::server::User* user) {
  delete user_;
  user_ = user;
  if (user) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:server.Friend.user)
}

// optional int64 type = 2;
void Friend::clear_type() {
  type_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 Friend::type() const {
  // @@protoc_insertion_point(field_get:server.Friend.type)
  return type_;
}
void Friend::set_type(::google::protobuf::int64 value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:server.Friend.type)
}

inline const Friend* Friend::internal_default_instance() {
  return &Friend_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TFriendAdd::kUserIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TFriendAdd::TFriendAdd()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_api_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:server.TFriendAdd)
}

void TFriendAdd::InitAsDefaultInstance() {
}

TFriendAdd::TFriendAdd(const TFriendAdd& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:server.TFriendAdd)
}

void TFriendAdd::SharedCtor() {
  user_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

TFriendAdd::~TFriendAdd() {
  // @@protoc_insertion_point(destructor:server.TFriendAdd)
  SharedDtor();
}

void TFriendAdd::SharedDtor() {
  user_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void TFriendAdd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TFriendAdd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TFriendAdd_descriptor_;
}

const TFriendAdd& TFriendAdd::default_instance() {
  protobuf_InitDefaults_api_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<TFriendAdd> TFriendAdd_default_instance_;

TFriendAdd* TFriendAdd::New(::google::protobuf::Arena* arena) const {
  TFriendAdd* n = new TFriendAdd;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TFriendAdd::Clear() {
// @@protoc_insertion_point(message_clear_start:server.TFriendAdd)
  user_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool TFriendAdd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:server.TFriendAdd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes user_id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_user_id()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:server.TFriendAdd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:server.TFriendAdd)
  return false;
#undef DO_
}

void TFriendAdd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:server.TFriendAdd)
  // optional bytes user_id = 1;
  if (this->user_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->user_id(), output);
  }

  // @@protoc_insertion_point(serialize_end:server.TFriendAdd)
}

::google::protobuf::uint8* TFriendAdd::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:server.TFriendAdd)
  // optional bytes user_id = 1;
  if (this->user_id().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->user_id(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:server.TFriendAdd)
  return target;
}

size_t TFriendAdd::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:server.TFriendAdd)
  size_t total_size = 0;

  // optional bytes user_id = 1;
  if (this->user_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->user_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TFriendAdd::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:server.TFriendAdd)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const TFriendAdd* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TFriendAdd>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:server.TFriendAdd)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:server.TFriendAdd)
    UnsafeMergeFrom(*source);
  }
}

void TFriendAdd::MergeFrom(const TFriendAdd& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:server.TFriendAdd)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void TFriendAdd::UnsafeMergeFrom(const TFriendAdd& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.user_id().size() > 0) {

    user_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.user_id_);
  }
}

void TFriendAdd::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:server.TFriendAdd)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TFriendAdd::CopyFrom(const TFriendAdd& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:server.TFriendAdd)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool TFriendAdd::IsInitialized() const {

  return true;
}

void TFriendAdd::Swap(TFriendAdd* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TFriendAdd::InternalSwap(TFriendAdd* other) {
  user_id_.Swap(&other->user_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TFriendAdd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TFriendAdd_descriptor_;
  metadata.reflection = TFriendAdd_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TFriendAdd

// optional bytes user_id = 1;
void TFriendAdd::clear_user_id() {
  user_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& TFriendAdd::user_id() const {
  // @@protoc_insertion_point(field_get:server.TFriendAdd.user_id)
  return user_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TFriendAdd::set_user_id(const ::std::string& value) {
  
  user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:server.TFriendAdd.user_id)
}
void TFriendAdd::set_user_id(const char* value) {
  
  user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:server.TFriendAdd.user_id)
}
void TFriendAdd::set_user_id(const void* value, size_t size) {
  
  user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:server.TFriendAdd.user_id)
}
::std::string* TFriendAdd::mutable_user_id() {
  
  // @@protoc_insertion_point(field_mutable:server.TFriendAdd.user_id)
  return user_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* TFriendAdd::release_user_id() {
  // @@protoc_insertion_point(field_release:server.TFriendAdd.user_id)
  
  return user_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TFriendAdd::set_allocated_user_id(::std::string* user_id) {
  if (user_id != NULL) {
    
  } else {
    
  }
  user_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), user_id);
  // @@protoc_insertion_point(field_set_allocated:server.TFriendAdd.user_id)
}

inline const TFriendAdd* TFriendAdd::internal_default_instance() {
  return &TFriendAdd_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TFriendRemove::kUserIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TFriendRemove::TFriendRemove()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_api_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:server.TFriendRemove)
}

void TFriendRemove::InitAsDefaultInstance() {
}

TFriendRemove::TFriendRemove(const TFriendRemove& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:server.TFriendRemove)
}

void TFriendRemove::SharedCtor() {
  user_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

TFriendRemove::~TFriendRemove() {
  // @@protoc_insertion_point(destructor:server.TFriendRemove)
  SharedDtor();
}

void TFriendRemove::SharedDtor() {
  user_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void TFriendRemove::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TFriendRemove::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TFriendRemove_descriptor_;
}

const TFriendRemove& TFriendRemove::default_instance() {
  protobuf_InitDefaults_api_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<TFriendRemove> TFriendRemove_default_instance_;

TFriendRemove* TFriendRemove::New(::google::protobuf::Arena* arena) const {
  TFriendRemove* n = new TFriendRemove;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TFriendRemove::Clear() {
// @@protoc_insertion_point(message_clear_start:server.TFriendRemove)
  user_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool TFriendRemove::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:server.TFriendRemove)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes user_id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_user_id()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:server.TFriendRemove)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:server.TFriendRemove)
  return false;
#undef DO_
}

void TFriendRemove::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:server.TFriendRemove)
  // optional bytes user_id = 1;
  if (this->user_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->user_id(), output);
  }

  // @@protoc_insertion_point(serialize_end:server.TFriendRemove)
}

::google::protobuf::uint8* TFriendRemove::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:server.TFriendRemove)
  // optional bytes user_id = 1;
  if (this->user_id().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->user_id(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:server.TFriendRemove)
  return target;
}

size_t TFriendRemove::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:server.TFriendRemove)
  size_t total_size = 0;

  // optional bytes user_id = 1;
  if (this->user_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->user_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TFriendRemove::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:server.TFriendRemove)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const TFriendRemove* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TFriendRemove>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:server.TFriendRemove)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:server.TFriendRemove)
    UnsafeMergeFrom(*source);
  }
}

void TFriendRemove::MergeFrom(const TFriendRemove& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:server.TFriendRemove)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void TFriendRemove::UnsafeMergeFrom(const TFriendRemove& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.user_id().size() > 0) {

    user_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.user_id_);
  }
}

void TFriendRemove::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:server.TFriendRemove)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TFriendRemove::CopyFrom(const TFriendRemove& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:server.TFriendRemove)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool TFriendRemove::IsInitialized() const {

  return true;
}

void TFriendRemove::Swap(TFriendRemove* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TFriendRemove::InternalSwap(TFriendRemove* other) {
  user_id_.Swap(&other->user_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TFriendRemove::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TFriendRemove_descriptor_;
  metadata.reflection = TFriendRemove_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TFriendRemove

// optional bytes user_id = 1;
void TFriendRemove::clear_user_id() {
  user_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& TFriendRemove::user_id() const {
  // @@protoc_insertion_point(field_get:server.TFriendRemove.user_id)
  return user_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TFriendRemove::set_user_id(const ::std::string& value) {
  
  user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:server.TFriendRemove.user_id)
}
void TFriendRemove::set_user_id(const char* value) {
  
  user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:server.TFriendRemove.user_id)
}
void TFriendRemove::set_user_id(const void* value, size_t size) {
  
  user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:server.TFriendRemove.user_id)
}
::std::string* TFriendRemove::mutable_user_id() {
  
  // @@protoc_insertion_point(field_mutable:server.TFriendRemove.user_id)
  return user_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* TFriendRemove::release_user_id() {
  // @@protoc_insertion_point(field_release:server.TFriendRemove.user_id)
  
  return user_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TFriendRemove::set_allocated_user_id(::std::string* user_id) {
  if (user_id != NULL) {
    
  } else {
    
  }
  user_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), user_id);
  // @@protoc_insertion_point(field_set_allocated:server.TFriendRemove.user_id)
}

inline const TFriendRemove* TFriendRemove::internal_default_instance() {
  return &TFriendRemove_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TFriendBlock::kUserIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TFriendBlock::TFriendBlock()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_api_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:server.TFriendBlock)
}

void TFriendBlock::InitAsDefaultInstance() {
}

TFriendBlock::TFriendBlock(const TFriendBlock& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:server.TFriendBlock)
}

void TFriendBlock::SharedCtor() {
  user_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

TFriendBlock::~TFriendBlock() {
  // @@protoc_insertion_point(destructor:server.TFriendBlock)
  SharedDtor();
}

void TFriendBlock::SharedDtor() {
  user_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void TFriendBlock::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TFriendBlock::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TFriendBlock_descriptor_;
}

const TFriendBlock& TFriendBlock::default_instance() {
  protobuf_InitDefaults_api_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<TFriendBlock> TFriendBlock_default_instance_;

TFriendBlock* TFriendBlock::New(::google::protobuf::Arena* arena) const {
  TFriendBlock* n = new TFriendBlock;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TFriendBlock::Clear() {
// @@protoc_insertion_point(message_clear_start:server.TFriendBlock)
  user_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool TFriendBlock::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:server.TFriendBlock)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes user_id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_user_id()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:server.TFriendBlock)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:server.TFriendBlock)
  return false;
#undef DO_
}

void TFriendBlock::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:server.TFriendBlock)
  // optional bytes user_id = 1;
  if (this->user_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->user_id(), output);
  }

  // @@protoc_insertion_point(serialize_end:server.TFriendBlock)
}

::google::protobuf::uint8* TFriendBlock::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:server.TFriendBlock)
  // optional bytes user_id = 1;
  if (this->user_id().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->user_id(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:server.TFriendBlock)
  return target;
}

size_t TFriendBlock::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:server.TFriendBlock)
  size_t total_size = 0;

  // optional bytes user_id = 1;
  if (this->user_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->user_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TFriendBlock::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:server.TFriendBlock)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const TFriendBlock* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TFriendBlock>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:server.TFriendBlock)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:server.TFriendBlock)
    UnsafeMergeFrom(*source);
  }
}

void TFriendBlock::MergeFrom(const TFriendBlock& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:server.TFriendBlock)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void TFriendBlock::UnsafeMergeFrom(const TFriendBlock& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.user_id().size() > 0) {

    user_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.user_id_);
  }
}

void TFriendBlock::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:server.TFriendBlock)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TFriendBlock::CopyFrom(const TFriendBlock& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:server.TFriendBlock)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool TFriendBlock::IsInitialized() const {

  return true;
}

void TFriendBlock::Swap(TFriendBlock* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TFriendBlock::InternalSwap(TFriendBlock* other) {
  user_id_.Swap(&other->user_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TFriendBlock::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TFriendBlock_descriptor_;
  metadata.reflection = TFriendBlock_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TFriendBlock

// optional bytes user_id = 1;
void TFriendBlock::clear_user_id() {
  user_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& TFriendBlock::user_id() const {
  // @@protoc_insertion_point(field_get:server.TFriendBlock.user_id)
  return user_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TFriendBlock::set_user_id(const ::std::string& value) {
  
  user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:server.TFriendBlock.user_id)
}
void TFriendBlock::set_user_id(const char* value) {
  
  user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:server.TFriendBlock.user_id)
}
void TFriendBlock::set_user_id(const void* value, size_t size) {
  
  user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:server.TFriendBlock.user_id)
}
::std::string* TFriendBlock::mutable_user_id() {
  
  // @@protoc_insertion_point(field_mutable:server.TFriendBlock.user_id)
  return user_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* TFriendBlock::release_user_id() {
  // @@protoc_insertion_point(field_release:server.TFriendBlock.user_id)
  
  return user_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TFriendBlock::set_allocated_user_id(::std::string* user_id) {
  if (user_id != NULL) {
    
  } else {
    
  }
  user_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), user_id);
  // @@protoc_insertion_point(field_set_allocated:server.TFriendBlock.user_id)
}

inline const TFriendBlock* TFriendBlock::internal_default_instance() {
  return &TFriendBlock_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TFriendsList::TFriendsList()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_api_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:server.TFriendsList)
}

void TFriendsList::InitAsDefaultInstance() {
}

TFriendsList::TFriendsList(const TFriendsList& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:server.TFriendsList)
}

void TFriendsList::SharedCtor() {
  _cached_size_ = 0;
}

TFriendsList::~TFriendsList() {
  // @@protoc_insertion_point(destructor:server.TFriendsList)
  SharedDtor();
}

void TFriendsList::SharedDtor() {
}

void TFriendsList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TFriendsList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TFriendsList_descriptor_;
}

const TFriendsList& TFriendsList::default_instance() {
  protobuf_InitDefaults_api_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<TFriendsList> TFriendsList_default_instance_;

TFriendsList* TFriendsList::New(::google::protobuf::Arena* arena) const {
  TFriendsList* n = new TFriendsList;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TFriendsList::Clear() {
// @@protoc_insertion_point(message_clear_start:server.TFriendsList)
}

bool TFriendsList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:server.TFriendsList)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
  }
success:
  // @@protoc_insertion_point(parse_success:server.TFriendsList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:server.TFriendsList)
  return false;
#undef DO_
}

void TFriendsList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:server.TFriendsList)
  // @@protoc_insertion_point(serialize_end:server.TFriendsList)
}

::google::protobuf::uint8* TFriendsList::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:server.TFriendsList)
  // @@protoc_insertion_point(serialize_to_array_end:server.TFriendsList)
  return target;
}

size_t TFriendsList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:server.TFriendsList)
  size_t total_size = 0;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TFriendsList::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:server.TFriendsList)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const TFriendsList* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TFriendsList>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:server.TFriendsList)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:server.TFriendsList)
    UnsafeMergeFrom(*source);
  }
}

void TFriendsList::MergeFrom(const TFriendsList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:server.TFriendsList)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void TFriendsList::UnsafeMergeFrom(const TFriendsList& from) {
  GOOGLE_DCHECK(&from != this);
}

void TFriendsList::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:server.TFriendsList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TFriendsList::CopyFrom(const TFriendsList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:server.TFriendsList)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool TFriendsList::IsInitialized() const {

  return true;
}

void TFriendsList::Swap(TFriendsList* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TFriendsList::InternalSwap(TFriendsList* other) {
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TFriendsList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TFriendsList_descriptor_;
  metadata.reflection = TFriendsList_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TFriendsList

inline const TFriendsList* TFriendsList::internal_default_instance() {
  return &TFriendsList_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TFriends::kFriendsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TFriends::TFriends()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_api_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:server.TFriends)
}

void TFriends::InitAsDefaultInstance() {
}

TFriends::TFriends(const TFriends& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:server.TFriends)
}

void TFriends::SharedCtor() {
  _cached_size_ = 0;
}

TFriends::~TFriends() {
  // @@protoc_insertion_point(destructor:server.TFriends)
  SharedDtor();
}

void TFriends::SharedDtor() {
}

void TFriends::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TFriends::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TFriends_descriptor_;
}

const TFriends& TFriends::default_instance() {
  protobuf_InitDefaults_api_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<TFriends> TFriends_default_instance_;

TFriends* TFriends::New(::google::protobuf::Arena* arena) const {
  TFriends* n = new TFriends;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TFriends::Clear() {
// @@protoc_insertion_point(message_clear_start:server.TFriends)
  friends_.Clear();
}

bool TFriends::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:server.TFriends)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .server.Friend friends = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_friends:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_friends()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_friends;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:server.TFriends)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:server.TFriends)
  return false;
#undef DO_
}

void TFriends::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:server.TFriends)
  // repeated .server.Friend friends = 1;
  for (unsigned int i = 0, n = this->friends_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->friends(i), output);
  }

  // @@protoc_insertion_point(serialize_end:server.TFriends)
}

::google::protobuf::uint8* TFriends::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:server.TFriends)
  // repeated .server.Friend friends = 1;
  for (unsigned int i = 0, n = this->friends_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->friends(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:server.TFriends)
  return target;
}

size_t TFriends::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:server.TFriends)
  size_t total_size = 0;

  // repeated .server.Friend friends = 1;
  {
    unsigned int count = this->friends_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->friends(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TFriends::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:server.TFriends)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const TFriends* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TFriends>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:server.TFriends)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:server.TFriends)
    UnsafeMergeFrom(*source);
  }
}

void TFriends::MergeFrom(const TFriends& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:server.TFriends)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void TFriends::UnsafeMergeFrom(const TFriends& from) {
  GOOGLE_DCHECK(&from != this);
  friends_.MergeFrom(from.friends_);
}

void TFriends::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:server.TFriends)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TFriends::CopyFrom(const TFriends& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:server.TFriends)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool TFriends::IsInitialized() const {

  return true;
}

void TFriends::Swap(TFriends* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TFriends::InternalSwap(TFriends* other) {
  friends_.UnsafeArenaSwap(&other->friends_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TFriends::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TFriends_descriptor_;
  metadata.reflection = TFriends_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TFriends

// repeated .server.Friend friends = 1;
int TFriends::friends_size() const {
  return friends_.size();
}
void TFriends::clear_friends() {
  friends_.Clear();
}
const ::server::Friend& TFriends::friends(int index) const {
  // @@protoc_insertion_point(field_get:server.TFriends.friends)
  return friends_.Get(index);
}
::server::Friend* TFriends::mutable_friends(int index) {
  // @@protoc_insertion_point(field_mutable:server.TFriends.friends)
  return friends_.Mutable(index);
}
::server::Friend* TFriends::add_friends() {
  // @@protoc_insertion_point(field_add:server.TFriends.friends)
  return friends_.Add();
}
::google::protobuf::RepeatedPtrField< ::server::Friend >*
TFriends::mutable_friends() {
  // @@protoc_insertion_point(field_mutable_list:server.TFriends.friends)
  return &friends_;
}
const ::google::protobuf::RepeatedPtrField< ::server::Friend >&
TFriends::friends() const {
  // @@protoc_insertion_point(field_list:server.TFriends.friends)
  return friends_;
}

inline const TFriends* TFriends::internal_default_instance() {
  return &TFriends_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Group::kIdFieldNumber;
const int Group::kPrivateFieldNumber;
const int Group::kCreatorIdFieldNumber;
const int Group::kNameFieldNumber;
const int Group::kDescriptionFieldNumber;
const int Group::kAvatarUrlFieldNumber;
const int Group::kLangFieldNumber;
const int Group::kUtcOffsetMsFieldNumber;
const int Group::kMetadataFieldNumber;
const int Group::kCountFieldNumber;
const int Group::kCreatedAtFieldNumber;
const int Group::kUpdatedAtFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Group::Group()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_api_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:server.Group)
}

void Group::InitAsDefaultInstance() {
}

Group::Group(const Group& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:server.Group)
}

void Group::SharedCtor() {
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  creator_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  description_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  avatar_url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  lang_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  metadata_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&utc_offset_ms_, 0, reinterpret_cast<char*>(&private__) -
    reinterpret_cast<char*>(&utc_offset_ms_) + sizeof(private__));
  _cached_size_ = 0;
}

Group::~Group() {
  // @@protoc_insertion_point(destructor:server.Group)
  SharedDtor();
}

void Group::SharedDtor() {
  id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  creator_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  description_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  avatar_url_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  lang_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  metadata_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Group::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Group::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Group_descriptor_;
}

const Group& Group::default_instance() {
  protobuf_InitDefaults_api_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<Group> Group_default_instance_;

Group* Group::New(::google::protobuf::Arena* arena) const {
  Group* n = new Group;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Group::Clear() {
// @@protoc_insertion_point(message_clear_start:server.Group)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(Group, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Group*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  private__ = false;
  creator_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  description_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  avatar_url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  lang_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  utc_offset_ms_ = GOOGLE_LONGLONG(0);
  ZR_(count_, updated_at_);
  metadata_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());

#undef ZR_HELPER_
#undef ZR_

}

bool Group::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:server.Group)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_id()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_private;
        break;
      }

      // optional bool private = 2;
      case 2: {
        if (tag == 16) {
         parse_private:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &private__)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_creator_id;
        break;
      }

      // optional bytes creator_id = 3;
      case 3: {
        if (tag == 26) {
         parse_creator_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_creator_id()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_name;
        break;
      }

      // optional string name = 4;
      case 4: {
        if (tag == 34) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "server.Group.name"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_description;
        break;
      }

      // optional string description = 5;
      case 5: {
        if (tag == 42) {
         parse_description:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_description()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->description().data(), this->description().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "server.Group.description"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_avatar_url;
        break;
      }

      // optional string avatar_url = 6;
      case 6: {
        if (tag == 50) {
         parse_avatar_url:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_avatar_url()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->avatar_url().data(), this->avatar_url().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "server.Group.avatar_url"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_lang;
        break;
      }

      // optional string lang = 7;
      case 7: {
        if (tag == 58) {
         parse_lang:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_lang()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->lang().data(), this->lang().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "server.Group.lang"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_utc_offset_ms;
        break;
      }

      // optional int64 utc_offset_ms = 8;
      case 8: {
        if (tag == 64) {
         parse_utc_offset_ms:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &utc_offset_ms_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_metadata;
        break;
      }

      // optional bytes metadata = 9;
      case 9: {
        if (tag == 74) {
         parse_metadata:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_metadata()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_count;
        break;
      }

      // optional int64 count = 10;
      case 10: {
        if (tag == 80) {
         parse_count:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &count_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_created_at;
        break;
      }

      // optional int64 created_at = 11;
      case 11: {
        if (tag == 88) {
         parse_created_at:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &created_at_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_updated_at;
        break;
      }

      // optional int64 updated_at = 12;
      case 12: {
        if (tag == 96) {
         parse_updated_at:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &updated_at_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:server.Group)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:server.Group)
  return false;
#undef DO_
}

void Group::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:server.Group)
  // optional bytes id = 1;
  if (this->id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->id(), output);
  }

  // optional bool private = 2;
  if (this->private_() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->private_(), output);
  }

  // optional bytes creator_id = 3;
  if (this->creator_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->creator_id(), output);
  }

  // optional string name = 4;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server.Group.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->name(), output);
  }

  // optional string description = 5;
  if (this->description().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->description().data(), this->description().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server.Group.description");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->description(), output);
  }

  // optional string avatar_url = 6;
  if (this->avatar_url().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->avatar_url().data(), this->avatar_url().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server.Group.avatar_url");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->avatar_url(), output);
  }

  // optional string lang = 7;
  if (this->lang().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->lang().data(), this->lang().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server.Group.lang");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->lang(), output);
  }

  // optional int64 utc_offset_ms = 8;
  if (this->utc_offset_ms() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(8, this->utc_offset_ms(), output);
  }

  // optional bytes metadata = 9;
  if (this->metadata().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      9, this->metadata(), output);
  }

  // optional int64 count = 10;
  if (this->count() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(10, this->count(), output);
  }

  // optional int64 created_at = 11;
  if (this->created_at() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(11, this->created_at(), output);
  }

  // optional int64 updated_at = 12;
  if (this->updated_at() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(12, this->updated_at(), output);
  }

  // @@protoc_insertion_point(serialize_end:server.Group)
}

::google::protobuf::uint8* Group::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:server.Group)
  // optional bytes id = 1;
  if (this->id().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->id(), target);
  }

  // optional bool private = 2;
  if (this->private_() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->private_(), target);
  }

  // optional bytes creator_id = 3;
  if (this->creator_id().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->creator_id(), target);
  }

  // optional string name = 4;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server.Group.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->name(), target);
  }

  // optional string description = 5;
  if (this->description().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->description().data(), this->description().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server.Group.description");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->description(), target);
  }

  // optional string avatar_url = 6;
  if (this->avatar_url().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->avatar_url().data(), this->avatar_url().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server.Group.avatar_url");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->avatar_url(), target);
  }

  // optional string lang = 7;
  if (this->lang().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->lang().data(), this->lang().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server.Group.lang");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->lang(), target);
  }

  // optional int64 utc_offset_ms = 8;
  if (this->utc_offset_ms() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(8, this->utc_offset_ms(), target);
  }

  // optional bytes metadata = 9;
  if (this->metadata().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        9, this->metadata(), target);
  }

  // optional int64 count = 10;
  if (this->count() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(10, this->count(), target);
  }

  // optional int64 created_at = 11;
  if (this->created_at() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(11, this->created_at(), target);
  }

  // optional int64 updated_at = 12;
  if (this->updated_at() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(12, this->updated_at(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:server.Group)
  return target;
}

size_t Group::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:server.Group)
  size_t total_size = 0;

  // optional bytes id = 1;
  if (this->id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->id());
  }

  // optional bool private = 2;
  if (this->private_() != 0) {
    total_size += 1 + 1;
  }

  // optional bytes creator_id = 3;
  if (this->creator_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->creator_id());
  }

  // optional string name = 4;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // optional string description = 5;
  if (this->description().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->description());
  }

  // optional string avatar_url = 6;
  if (this->avatar_url().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->avatar_url());
  }

  // optional string lang = 7;
  if (this->lang().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->lang());
  }

  // optional int64 utc_offset_ms = 8;
  if (this->utc_offset_ms() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->utc_offset_ms());
  }

  // optional bytes metadata = 9;
  if (this->metadata().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->metadata());
  }

  // optional int64 count = 10;
  if (this->count() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->count());
  }

  // optional int64 created_at = 11;
  if (this->created_at() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->created_at());
  }

  // optional int64 updated_at = 12;
  if (this->updated_at() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->updated_at());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Group::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:server.Group)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Group* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Group>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:server.Group)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:server.Group)
    UnsafeMergeFrom(*source);
  }
}

void Group::MergeFrom(const Group& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:server.Group)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void Group::UnsafeMergeFrom(const Group& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.id().size() > 0) {

    id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  if (from.private_() != 0) {
    set_private_(from.private_());
  }
  if (from.creator_id().size() > 0) {

    creator_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.creator_id_);
  }
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.description().size() > 0) {

    description_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.description_);
  }
  if (from.avatar_url().size() > 0) {

    avatar_url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.avatar_url_);
  }
  if (from.lang().size() > 0) {

    lang_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.lang_);
  }
  if (from.utc_offset_ms() != 0) {
    set_utc_offset_ms(from.utc_offset_ms());
  }
  if (from.metadata().size() > 0) {

    metadata_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.metadata_);
  }
  if (from.count() != 0) {
    set_count(from.count());
  }
  if (from.created_at() != 0) {
    set_created_at(from.created_at());
  }
  if (from.updated_at() != 0) {
    set_updated_at(from.updated_at());
  }
}

void Group::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:server.Group)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Group::CopyFrom(const Group& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:server.Group)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool Group::IsInitialized() const {

  return true;
}

void Group::Swap(Group* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Group::InternalSwap(Group* other) {
  id_.Swap(&other->id_);
  std::swap(private__, other->private__);
  creator_id_.Swap(&other->creator_id_);
  name_.Swap(&other->name_);
  description_.Swap(&other->description_);
  avatar_url_.Swap(&other->avatar_url_);
  lang_.Swap(&other->lang_);
  std::swap(utc_offset_ms_, other->utc_offset_ms_);
  metadata_.Swap(&other->metadata_);
  std::swap(count_, other->count_);
  std::swap(created_at_, other->created_at_);
  std::swap(updated_at_, other->updated_at_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Group::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Group_descriptor_;
  metadata.reflection = Group_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Group

// optional bytes id = 1;
void Group::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Group::id() const {
  // @@protoc_insertion_point(field_get:server.Group.id)
  return id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Group::set_id(const ::std::string& value) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:server.Group.id)
}
void Group::set_id(const char* value) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:server.Group.id)
}
void Group::set_id(const void* value, size_t size) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:server.Group.id)
}
::std::string* Group::mutable_id() {
  
  // @@protoc_insertion_point(field_mutable:server.Group.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Group::release_id() {
  // @@protoc_insertion_point(field_release:server.Group.id)
  
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Group::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:server.Group.id)
}

// optional bool private = 2;
void Group::clear_private_() {
  private__ = false;
}
bool Group::private_() const {
  // @@protoc_insertion_point(field_get:server.Group.private)
  return private__;
}
void Group::set_private_(bool value) {
  
  private__ = value;
  // @@protoc_insertion_point(field_set:server.Group.private)
}

// optional bytes creator_id = 3;
void Group::clear_creator_id() {
  creator_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Group::creator_id() const {
  // @@protoc_insertion_point(field_get:server.Group.creator_id)
  return creator_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Group::set_creator_id(const ::std::string& value) {
  
  creator_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:server.Group.creator_id)
}
void Group::set_creator_id(const char* value) {
  
  creator_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:server.Group.creator_id)
}
void Group::set_creator_id(const void* value, size_t size) {
  
  creator_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:server.Group.creator_id)
}
::std::string* Group::mutable_creator_id() {
  
  // @@protoc_insertion_point(field_mutable:server.Group.creator_id)
  return creator_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Group::release_creator_id() {
  // @@protoc_insertion_point(field_release:server.Group.creator_id)
  
  return creator_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Group::set_allocated_creator_id(::std::string* creator_id) {
  if (creator_id != NULL) {
    
  } else {
    
  }
  creator_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), creator_id);
  // @@protoc_insertion_point(field_set_allocated:server.Group.creator_id)
}

// optional string name = 4;
void Group::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Group::name() const {
  // @@protoc_insertion_point(field_get:server.Group.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Group::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:server.Group.name)
}
void Group::set_name(const char* value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:server.Group.name)
}
void Group::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:server.Group.name)
}
::std::string* Group::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:server.Group.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Group::release_name() {
  // @@protoc_insertion_point(field_release:server.Group.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Group::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:server.Group.name)
}

// optional string description = 5;
void Group::clear_description() {
  description_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Group::description() const {
  // @@protoc_insertion_point(field_get:server.Group.description)
  return description_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Group::set_description(const ::std::string& value) {
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:server.Group.description)
}
void Group::set_description(const char* value) {
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:server.Group.description)
}
void Group::set_description(const char* value, size_t size) {
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:server.Group.description)
}
::std::string* Group::mutable_description() {
  
  // @@protoc_insertion_point(field_mutable:server.Group.description)
  return description_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Group::release_description() {
  // @@protoc_insertion_point(field_release:server.Group.description)
  
  return description_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Group::set_allocated_description(::std::string* description) {
  if (description != NULL) {
    
  } else {
    
  }
  description_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), description);
  // @@protoc_insertion_point(field_set_allocated:server.Group.description)
}

// optional string avatar_url = 6;
void Group::clear_avatar_url() {
  avatar_url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Group::avatar_url() const {
  // @@protoc_insertion_point(field_get:server.Group.avatar_url)
  return avatar_url_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Group::set_avatar_url(const ::std::string& value) {
  
  avatar_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:server.Group.avatar_url)
}
void Group::set_avatar_url(const char* value) {
  
  avatar_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:server.Group.avatar_url)
}
void Group::set_avatar_url(const char* value, size_t size) {
  
  avatar_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:server.Group.avatar_url)
}
::std::string* Group::mutable_avatar_url() {
  
  // @@protoc_insertion_point(field_mutable:server.Group.avatar_url)
  return avatar_url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Group::release_avatar_url() {
  // @@protoc_insertion_point(field_release:server.Group.avatar_url)
  
  return avatar_url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Group::set_allocated_avatar_url(::std::string* avatar_url) {
  if (avatar_url != NULL) {
    
  } else {
    
  }
  avatar_url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), avatar_url);
  // @@protoc_insertion_point(field_set_allocated:server.Group.avatar_url)
}

// optional string lang = 7;
void Group::clear_lang() {
  lang_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Group::lang() const {
  // @@protoc_insertion_point(field_get:server.Group.lang)
  return lang_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Group::set_lang(const ::std::string& value) {
  
  lang_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:server.Group.lang)
}
void Group::set_lang(const char* value) {
  
  lang_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:server.Group.lang)
}
void Group::set_lang(const char* value, size_t size) {
  
  lang_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:server.Group.lang)
}
::std::string* Group::mutable_lang() {
  
  // @@protoc_insertion_point(field_mutable:server.Group.lang)
  return lang_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Group::release_lang() {
  // @@protoc_insertion_point(field_release:server.Group.lang)
  
  return lang_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Group::set_allocated_lang(::std::string* lang) {
  if (lang != NULL) {
    
  } else {
    
  }
  lang_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), lang);
  // @@protoc_insertion_point(field_set_allocated:server.Group.lang)
}

// optional int64 utc_offset_ms = 8;
void Group::clear_utc_offset_ms() {
  utc_offset_ms_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 Group::utc_offset_ms() const {
  // @@protoc_insertion_point(field_get:server.Group.utc_offset_ms)
  return utc_offset_ms_;
}
void Group::set_utc_offset_ms(::google::protobuf::int64 value) {
  
  utc_offset_ms_ = value;
  // @@protoc_insertion_point(field_set:server.Group.utc_offset_ms)
}

// optional bytes metadata = 9;
void Group::clear_metadata() {
  metadata_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Group::metadata() const {
  // @@protoc_insertion_point(field_get:server.Group.metadata)
  return metadata_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Group::set_metadata(const ::std::string& value) {
  
  metadata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:server.Group.metadata)
}
void Group::set_metadata(const char* value) {
  
  metadata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:server.Group.metadata)
}
void Group::set_metadata(const void* value, size_t size) {
  
  metadata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:server.Group.metadata)
}
::std::string* Group::mutable_metadata() {
  
  // @@protoc_insertion_point(field_mutable:server.Group.metadata)
  return metadata_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Group::release_metadata() {
  // @@protoc_insertion_point(field_release:server.Group.metadata)
  
  return metadata_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Group::set_allocated_metadata(::std::string* metadata) {
  if (metadata != NULL) {
    
  } else {
    
  }
  metadata_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), metadata);
  // @@protoc_insertion_point(field_set_allocated:server.Group.metadata)
}

// optional int64 count = 10;
void Group::clear_count() {
  count_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 Group::count() const {
  // @@protoc_insertion_point(field_get:server.Group.count)
  return count_;
}
void Group::set_count(::google::protobuf::int64 value) {
  
  count_ = value;
  // @@protoc_insertion_point(field_set:server.Group.count)
}

// optional int64 created_at = 11;
void Group::clear_created_at() {
  created_at_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 Group::created_at() const {
  // @@protoc_insertion_point(field_get:server.Group.created_at)
  return created_at_;
}
void Group::set_created_at(::google::protobuf::int64 value) {
  
  created_at_ = value;
  // @@protoc_insertion_point(field_set:server.Group.created_at)
}

// optional int64 updated_at = 12;
void Group::clear_updated_at() {
  updated_at_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 Group::updated_at() const {
  // @@protoc_insertion_point(field_get:server.Group.updated_at)
  return updated_at_;
}
void Group::set_updated_at(::google::protobuf::int64 value) {
  
  updated_at_ = value;
  // @@protoc_insertion_point(field_set:server.Group.updated_at)
}

inline const Group* Group::internal_default_instance() {
  return &Group_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TGroupCreate::kNameFieldNumber;
const int TGroupCreate::kDescriptionFieldNumber;
const int TGroupCreate::kAvatarUrlFieldNumber;
const int TGroupCreate::kLangFieldNumber;
const int TGroupCreate::kMetadataFieldNumber;
const int TGroupCreate::kPrivateFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TGroupCreate::TGroupCreate()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_api_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:server.TGroupCreate)
}

void TGroupCreate::InitAsDefaultInstance() {
}

TGroupCreate::TGroupCreate(const TGroupCreate& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:server.TGroupCreate)
}

void TGroupCreate::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  description_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  avatar_url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  lang_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  metadata_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  private__ = false;
  _cached_size_ = 0;
}

TGroupCreate::~TGroupCreate() {
  // @@protoc_insertion_point(destructor:server.TGroupCreate)
  SharedDtor();
}

void TGroupCreate::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  description_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  avatar_url_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  lang_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  metadata_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void TGroupCreate::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TGroupCreate::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TGroupCreate_descriptor_;
}

const TGroupCreate& TGroupCreate::default_instance() {
  protobuf_InitDefaults_api_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<TGroupCreate> TGroupCreate_default_instance_;

TGroupCreate* TGroupCreate::New(::google::protobuf::Arena* arena) const {
  TGroupCreate* n = new TGroupCreate;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TGroupCreate::Clear() {
// @@protoc_insertion_point(message_clear_start:server.TGroupCreate)
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  description_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  avatar_url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  lang_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  metadata_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  private__ = false;
}

bool TGroupCreate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:server.TGroupCreate)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "server.TGroupCreate.name"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_description;
        break;
      }

      // optional string description = 2;
      case 2: {
        if (tag == 18) {
         parse_description:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_description()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->description().data(), this->description().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "server.TGroupCreate.description"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_avatar_url;
        break;
      }

      // optional string avatar_url = 3;
      case 3: {
        if (tag == 26) {
         parse_avatar_url:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_avatar_url()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->avatar_url().data(), this->avatar_url().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "server.TGroupCreate.avatar_url"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_lang;
        break;
      }

      // optional string lang = 4;
      case 4: {
        if (tag == 34) {
         parse_lang:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_lang()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->lang().data(), this->lang().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "server.TGroupCreate.lang"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_metadata;
        break;
      }

      // optional bytes metadata = 5;
      case 5: {
        if (tag == 42) {
         parse_metadata:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_metadata()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_private;
        break;
      }

      // optional bool private = 6;
      case 6: {
        if (tag == 48) {
         parse_private:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &private__)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:server.TGroupCreate)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:server.TGroupCreate)
  return false;
#undef DO_
}

void TGroupCreate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:server.TGroupCreate)
  // optional string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server.TGroupCreate.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // optional string description = 2;
  if (this->description().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->description().data(), this->description().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server.TGroupCreate.description");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->description(), output);
  }

  // optional string avatar_url = 3;
  if (this->avatar_url().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->avatar_url().data(), this->avatar_url().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server.TGroupCreate.avatar_url");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->avatar_url(), output);
  }

  // optional string lang = 4;
  if (this->lang().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->lang().data(), this->lang().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server.TGroupCreate.lang");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->lang(), output);
  }

  // optional bytes metadata = 5;
  if (this->metadata().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      5, this->metadata(), output);
  }

  // optional bool private = 6;
  if (this->private_() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->private_(), output);
  }

  // @@protoc_insertion_point(serialize_end:server.TGroupCreate)
}

::google::protobuf::uint8* TGroupCreate::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:server.TGroupCreate)
  // optional string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server.TGroupCreate.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional string description = 2;
  if (this->description().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->description().data(), this->description().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server.TGroupCreate.description");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->description(), target);
  }

  // optional string avatar_url = 3;
  if (this->avatar_url().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->avatar_url().data(), this->avatar_url().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server.TGroupCreate.avatar_url");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->avatar_url(), target);
  }

  // optional string lang = 4;
  if (this->lang().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->lang().data(), this->lang().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server.TGroupCreate.lang");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->lang(), target);
  }

  // optional bytes metadata = 5;
  if (this->metadata().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->metadata(), target);
  }

  // optional bool private = 6;
  if (this->private_() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->private_(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:server.TGroupCreate)
  return target;
}

size_t TGroupCreate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:server.TGroupCreate)
  size_t total_size = 0;

  // optional string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // optional string description = 2;
  if (this->description().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->description());
  }

  // optional string avatar_url = 3;
  if (this->avatar_url().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->avatar_url());
  }

  // optional string lang = 4;
  if (this->lang().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->lang());
  }

  // optional bytes metadata = 5;
  if (this->metadata().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->metadata());
  }

  // optional bool private = 6;
  if (this->private_() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TGroupCreate::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:server.TGroupCreate)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const TGroupCreate* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TGroupCreate>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:server.TGroupCreate)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:server.TGroupCreate)
    UnsafeMergeFrom(*source);
  }
}

void TGroupCreate::MergeFrom(const TGroupCreate& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:server.TGroupCreate)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void TGroupCreate::UnsafeMergeFrom(const TGroupCreate& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.description().size() > 0) {

    description_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.description_);
  }
  if (from.avatar_url().size() > 0) {

    avatar_url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.avatar_url_);
  }
  if (from.lang().size() > 0) {

    lang_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.lang_);
  }
  if (from.metadata().size() > 0) {

    metadata_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.metadata_);
  }
  if (from.private_() != 0) {
    set_private_(from.private_());
  }
}

void TGroupCreate::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:server.TGroupCreate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TGroupCreate::CopyFrom(const TGroupCreate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:server.TGroupCreate)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool TGroupCreate::IsInitialized() const {

  return true;
}

void TGroupCreate::Swap(TGroupCreate* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TGroupCreate::InternalSwap(TGroupCreate* other) {
  name_.Swap(&other->name_);
  description_.Swap(&other->description_);
  avatar_url_.Swap(&other->avatar_url_);
  lang_.Swap(&other->lang_);
  metadata_.Swap(&other->metadata_);
  std::swap(private__, other->private__);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TGroupCreate::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TGroupCreate_descriptor_;
  metadata.reflection = TGroupCreate_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TGroupCreate

// optional string name = 1;
void TGroupCreate::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& TGroupCreate::name() const {
  // @@protoc_insertion_point(field_get:server.TGroupCreate.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TGroupCreate::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:server.TGroupCreate.name)
}
void TGroupCreate::set_name(const char* value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:server.TGroupCreate.name)
}
void TGroupCreate::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:server.TGroupCreate.name)
}
::std::string* TGroupCreate::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:server.TGroupCreate.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* TGroupCreate::release_name() {
  // @@protoc_insertion_point(field_release:server.TGroupCreate.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TGroupCreate::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:server.TGroupCreate.name)
}

// optional string description = 2;
void TGroupCreate::clear_description() {
  description_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& TGroupCreate::description() const {
  // @@protoc_insertion_point(field_get:server.TGroupCreate.description)
  return description_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TGroupCreate::set_description(const ::std::string& value) {
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:server.TGroupCreate.description)
}
void TGroupCreate::set_description(const char* value) {
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:server.TGroupCreate.description)
}
void TGroupCreate::set_description(const char* value, size_t size) {
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:server.TGroupCreate.description)
}
::std::string* TGroupCreate::mutable_description() {
  
  // @@protoc_insertion_point(field_mutable:server.TGroupCreate.description)
  return description_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* TGroupCreate::release_description() {
  // @@protoc_insertion_point(field_release:server.TGroupCreate.description)
  
  return description_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TGroupCreate::set_allocated_description(::std::string* description) {
  if (description != NULL) {
    
  } else {
    
  }
  description_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), description);
  // @@protoc_insertion_point(field_set_allocated:server.TGroupCreate.description)
}

// optional string avatar_url = 3;
void TGroupCreate::clear_avatar_url() {
  avatar_url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& TGroupCreate::avatar_url() const {
  // @@protoc_insertion_point(field_get:server.TGroupCreate.avatar_url)
  return avatar_url_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TGroupCreate::set_avatar_url(const ::std::string& value) {
  
  avatar_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:server.TGroupCreate.avatar_url)
}
void TGroupCreate::set_avatar_url(const char* value) {
  
  avatar_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:server.TGroupCreate.avatar_url)
}
void TGroupCreate::set_avatar_url(const char* value, size_t size) {
  
  avatar_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:server.TGroupCreate.avatar_url)
}
::std::string* TGroupCreate::mutable_avatar_url() {
  
  // @@protoc_insertion_point(field_mutable:server.TGroupCreate.avatar_url)
  return avatar_url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* TGroupCreate::release_avatar_url() {
  // @@protoc_insertion_point(field_release:server.TGroupCreate.avatar_url)
  
  return avatar_url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TGroupCreate::set_allocated_avatar_url(::std::string* avatar_url) {
  if (avatar_url != NULL) {
    
  } else {
    
  }
  avatar_url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), avatar_url);
  // @@protoc_insertion_point(field_set_allocated:server.TGroupCreate.avatar_url)
}

// optional string lang = 4;
void TGroupCreate::clear_lang() {
  lang_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& TGroupCreate::lang() const {
  // @@protoc_insertion_point(field_get:server.TGroupCreate.lang)
  return lang_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TGroupCreate::set_lang(const ::std::string& value) {
  
  lang_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:server.TGroupCreate.lang)
}
void TGroupCreate::set_lang(const char* value) {
  
  lang_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:server.TGroupCreate.lang)
}
void TGroupCreate::set_lang(const char* value, size_t size) {
  
  lang_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:server.TGroupCreate.lang)
}
::std::string* TGroupCreate::mutable_lang() {
  
  // @@protoc_insertion_point(field_mutable:server.TGroupCreate.lang)
  return lang_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* TGroupCreate::release_lang() {
  // @@protoc_insertion_point(field_release:server.TGroupCreate.lang)
  
  return lang_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TGroupCreate::set_allocated_lang(::std::string* lang) {
  if (lang != NULL) {
    
  } else {
    
  }
  lang_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), lang);
  // @@protoc_insertion_point(field_set_allocated:server.TGroupCreate.lang)
}

// optional bytes metadata = 5;
void TGroupCreate::clear_metadata() {
  metadata_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& TGroupCreate::metadata() const {
  // @@protoc_insertion_point(field_get:server.TGroupCreate.metadata)
  return metadata_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TGroupCreate::set_metadata(const ::std::string& value) {
  
  metadata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:server.TGroupCreate.metadata)
}
void TGroupCreate::set_metadata(const char* value) {
  
  metadata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:server.TGroupCreate.metadata)
}
void TGroupCreate::set_metadata(const void* value, size_t size) {
  
  metadata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:server.TGroupCreate.metadata)
}
::std::string* TGroupCreate::mutable_metadata() {
  
  // @@protoc_insertion_point(field_mutable:server.TGroupCreate.metadata)
  return metadata_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* TGroupCreate::release_metadata() {
  // @@protoc_insertion_point(field_release:server.TGroupCreate.metadata)
  
  return metadata_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TGroupCreate::set_allocated_metadata(::std::string* metadata) {
  if (metadata != NULL) {
    
  } else {
    
  }
  metadata_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), metadata);
  // @@protoc_insertion_point(field_set_allocated:server.TGroupCreate.metadata)
}

// optional bool private = 6;
void TGroupCreate::clear_private_() {
  private__ = false;
}
bool TGroupCreate::private_() const {
  // @@protoc_insertion_point(field_get:server.TGroupCreate.private)
  return private__;
}
void TGroupCreate::set_private_(bool value) {
  
  private__ = value;
  // @@protoc_insertion_point(field_set:server.TGroupCreate.private)
}

inline const TGroupCreate* TGroupCreate::internal_default_instance() {
  return &TGroupCreate_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TGroup::kGroupFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TGroup::TGroup()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_api_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:server.TGroup)
}

void TGroup::InitAsDefaultInstance() {
  group_ = const_cast< ::server::Group*>(
      ::server::Group::internal_default_instance());
}

TGroup::TGroup(const TGroup& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:server.TGroup)
}

void TGroup::SharedCtor() {
  group_ = NULL;
  _cached_size_ = 0;
}

TGroup::~TGroup() {
  // @@protoc_insertion_point(destructor:server.TGroup)
  SharedDtor();
}

void TGroup::SharedDtor() {
  if (this != &TGroup_default_instance_.get()) {
    delete group_;
  }
}

void TGroup::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TGroup::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TGroup_descriptor_;
}

const TGroup& TGroup::default_instance() {
  protobuf_InitDefaults_api_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<TGroup> TGroup_default_instance_;

TGroup* TGroup::New(::google::protobuf::Arena* arena) const {
  TGroup* n = new TGroup;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TGroup::Clear() {
// @@protoc_insertion_point(message_clear_start:server.TGroup)
  if (GetArenaNoVirtual() == NULL && group_ != NULL) delete group_;
  group_ = NULL;
}

bool TGroup::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:server.TGroup)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .server.Group group = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_group()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:server.TGroup)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:server.TGroup)
  return false;
#undef DO_
}

void TGroup::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:server.TGroup)
  // optional .server.Group group = 1;
  if (this->has_group()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->group_, output);
  }

  // @@protoc_insertion_point(serialize_end:server.TGroup)
}

::google::protobuf::uint8* TGroup::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:server.TGroup)
  // optional .server.Group group = 1;
  if (this->has_group()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->group_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:server.TGroup)
  return target;
}

size_t TGroup::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:server.TGroup)
  size_t total_size = 0;

  // optional .server.Group group = 1;
  if (this->has_group()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->group_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TGroup::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:server.TGroup)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const TGroup* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TGroup>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:server.TGroup)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:server.TGroup)
    UnsafeMergeFrom(*source);
  }
}

void TGroup::MergeFrom(const TGroup& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:server.TGroup)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void TGroup::UnsafeMergeFrom(const TGroup& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.has_group()) {
    mutable_group()->::server::Group::MergeFrom(from.group());
  }
}

void TGroup::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:server.TGroup)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TGroup::CopyFrom(const TGroup& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:server.TGroup)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool TGroup::IsInitialized() const {

  return true;
}

void TGroup::Swap(TGroup* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TGroup::InternalSwap(TGroup* other) {
  std::swap(group_, other->group_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TGroup::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TGroup_descriptor_;
  metadata.reflection = TGroup_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TGroup

// optional .server.Group group = 1;
bool TGroup::has_group() const {
  return this != internal_default_instance() && group_ != NULL;
}
void TGroup::clear_group() {
  if (GetArenaNoVirtual() == NULL && group_ != NULL) delete group_;
  group_ = NULL;
}
const ::server::Group& TGroup::group() const {
  // @@protoc_insertion_point(field_get:server.TGroup.group)
  return group_ != NULL ? *group_
                         : *::server::Group::internal_default_instance();
}
::server::Group* TGroup::mutable_group() {
  
  if (group_ == NULL) {
    group_ = new ::server::Group;
  }
  // @@protoc_insertion_point(field_mutable:server.TGroup.group)
  return group_;
}
::server::Group* TGroup::release_group() {
  // @@protoc_insertion_point(field_release:server.TGroup.group)
  
  ::server::Group* temp = group_;
  group_ = NULL;
  return temp;
}
void TGroup::set_allocated_group(::server::Group* group) {
  delete group_;
  group_ = group;
  if (group) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:server.TGroup.group)
}

inline const TGroup* TGroup::internal_default_instance() {
  return &TGroup_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TGroupUpdate::kGroupIdFieldNumber;
const int TGroupUpdate::kPrivateFieldNumber;
const int TGroupUpdate::kNameFieldNumber;
const int TGroupUpdate::kDescriptionFieldNumber;
const int TGroupUpdate::kAvatarUrlFieldNumber;
const int TGroupUpdate::kLangFieldNumber;
const int TGroupUpdate::kMetadataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TGroupUpdate::TGroupUpdate()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_api_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:server.TGroupUpdate)
}

void TGroupUpdate::InitAsDefaultInstance() {
}

TGroupUpdate::TGroupUpdate(const TGroupUpdate& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:server.TGroupUpdate)
}

void TGroupUpdate::SharedCtor() {
  group_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  description_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  avatar_url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  lang_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  metadata_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  private__ = false;
  _cached_size_ = 0;
}

TGroupUpdate::~TGroupUpdate() {
  // @@protoc_insertion_point(destructor:server.TGroupUpdate)
  SharedDtor();
}

void TGroupUpdate::SharedDtor() {
  group_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  description_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  avatar_url_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  lang_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  metadata_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void TGroupUpdate::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TGroupUpdate::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TGroupUpdate_descriptor_;
}

const TGroupUpdate& TGroupUpdate::default_instance() {
  protobuf_InitDefaults_api_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<TGroupUpdate> TGroupUpdate_default_instance_;

TGroupUpdate* TGroupUpdate::New(::google::protobuf::Arena* arena) const {
  TGroupUpdate* n = new TGroupUpdate;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TGroupUpdate::Clear() {
// @@protoc_insertion_point(message_clear_start:server.TGroupUpdate)
  group_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  private__ = false;
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  description_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  avatar_url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  lang_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  metadata_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool TGroupUpdate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:server.TGroupUpdate)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes group_id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_group_id()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_private;
        break;
      }

      // optional bool private = 2;
      case 2: {
        if (tag == 16) {
         parse_private:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &private__)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_name;
        break;
      }

      // optional string name = 3;
      case 3: {
        if (tag == 26) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "server.TGroupUpdate.name"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_description;
        break;
      }

      // optional string description = 4;
      case 4: {
        if (tag == 34) {
         parse_description:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_description()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->description().data(), this->description().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "server.TGroupUpdate.description"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_avatar_url;
        break;
      }

      // optional string avatar_url = 5;
      case 5: {
        if (tag == 42) {
         parse_avatar_url:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_avatar_url()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->avatar_url().data(), this->avatar_url().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "server.TGroupUpdate.avatar_url"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_lang;
        break;
      }

      // optional string lang = 6;
      case 6: {
        if (tag == 50) {
         parse_lang:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_lang()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->lang().data(), this->lang().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "server.TGroupUpdate.lang"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_metadata;
        break;
      }

      // optional bytes metadata = 7;
      case 7: {
        if (tag == 58) {
         parse_metadata:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_metadata()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:server.TGroupUpdate)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:server.TGroupUpdate)
  return false;
#undef DO_
}

void TGroupUpdate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:server.TGroupUpdate)
  // optional bytes group_id = 1;
  if (this->group_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->group_id(), output);
  }

  // optional bool private = 2;
  if (this->private_() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->private_(), output);
  }

  // optional string name = 3;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server.TGroupUpdate.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->name(), output);
  }

  // optional string description = 4;
  if (this->description().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->description().data(), this->description().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server.TGroupUpdate.description");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->description(), output);
  }

  // optional string avatar_url = 5;
  if (this->avatar_url().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->avatar_url().data(), this->avatar_url().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server.TGroupUpdate.avatar_url");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->avatar_url(), output);
  }

  // optional string lang = 6;
  if (this->lang().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->lang().data(), this->lang().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server.TGroupUpdate.lang");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->lang(), output);
  }

  // optional bytes metadata = 7;
  if (this->metadata().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      7, this->metadata(), output);
  }

  // @@protoc_insertion_point(serialize_end:server.TGroupUpdate)
}

::google::protobuf::uint8* TGroupUpdate::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:server.TGroupUpdate)
  // optional bytes group_id = 1;
  if (this->group_id().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->group_id(), target);
  }

  // optional bool private = 2;
  if (this->private_() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->private_(), target);
  }

  // optional string name = 3;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server.TGroupUpdate.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->name(), target);
  }

  // optional string description = 4;
  if (this->description().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->description().data(), this->description().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server.TGroupUpdate.description");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->description(), target);
  }

  // optional string avatar_url = 5;
  if (this->avatar_url().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->avatar_url().data(), this->avatar_url().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server.TGroupUpdate.avatar_url");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->avatar_url(), target);
  }

  // optional string lang = 6;
  if (this->lang().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->lang().data(), this->lang().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server.TGroupUpdate.lang");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->lang(), target);
  }

  // optional bytes metadata = 7;
  if (this->metadata().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        7, this->metadata(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:server.TGroupUpdate)
  return target;
}

size_t TGroupUpdate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:server.TGroupUpdate)
  size_t total_size = 0;

  // optional bytes group_id = 1;
  if (this->group_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->group_id());
  }

  // optional bool private = 2;
  if (this->private_() != 0) {
    total_size += 1 + 1;
  }

  // optional string name = 3;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // optional string description = 4;
  if (this->description().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->description());
  }

  // optional string avatar_url = 5;
  if (this->avatar_url().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->avatar_url());
  }

  // optional string lang = 6;
  if (this->lang().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->lang());
  }

  // optional bytes metadata = 7;
  if (this->metadata().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->metadata());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TGroupUpdate::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:server.TGroupUpdate)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const TGroupUpdate* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TGroupUpdate>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:server.TGroupUpdate)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:server.TGroupUpdate)
    UnsafeMergeFrom(*source);
  }
}

void TGroupUpdate::MergeFrom(const TGroupUpdate& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:server.TGroupUpdate)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void TGroupUpdate::UnsafeMergeFrom(const TGroupUpdate& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.group_id().size() > 0) {

    group_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.group_id_);
  }
  if (from.private_() != 0) {
    set_private_(from.private_());
  }
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.description().size() > 0) {

    description_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.description_);
  }
  if (from.avatar_url().size() > 0) {

    avatar_url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.avatar_url_);
  }
  if (from.lang().size() > 0) {

    lang_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.lang_);
  }
  if (from.metadata().size() > 0) {

    metadata_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.metadata_);
  }
}

void TGroupUpdate::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:server.TGroupUpdate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TGroupUpdate::CopyFrom(const TGroupUpdate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:server.TGroupUpdate)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool TGroupUpdate::IsInitialized() const {

  return true;
}

void TGroupUpdate::Swap(TGroupUpdate* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TGroupUpdate::InternalSwap(TGroupUpdate* other) {
  group_id_.Swap(&other->group_id_);
  std::swap(private__, other->private__);
  name_.Swap(&other->name_);
  description_.Swap(&other->description_);
  avatar_url_.Swap(&other->avatar_url_);
  lang_.Swap(&other->lang_);
  metadata_.Swap(&other->metadata_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TGroupUpdate::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TGroupUpdate_descriptor_;
  metadata.reflection = TGroupUpdate_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TGroupUpdate

// optional bytes group_id = 1;
void TGroupUpdate::clear_group_id() {
  group_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& TGroupUpdate::group_id() const {
  // @@protoc_insertion_point(field_get:server.TGroupUpdate.group_id)
  return group_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TGroupUpdate::set_group_id(const ::std::string& value) {
  
  group_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:server.TGroupUpdate.group_id)
}
void TGroupUpdate::set_group_id(const char* value) {
  
  group_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:server.TGroupUpdate.group_id)
}
void TGroupUpdate::set_group_id(const void* value, size_t size) {
  
  group_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:server.TGroupUpdate.group_id)
}
::std::string* TGroupUpdate::mutable_group_id() {
  
  // @@protoc_insertion_point(field_mutable:server.TGroupUpdate.group_id)
  return group_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* TGroupUpdate::release_group_id() {
  // @@protoc_insertion_point(field_release:server.TGroupUpdate.group_id)
  
  return group_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TGroupUpdate::set_allocated_group_id(::std::string* group_id) {
  if (group_id != NULL) {
    
  } else {
    
  }
  group_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), group_id);
  // @@protoc_insertion_point(field_set_allocated:server.TGroupUpdate.group_id)
}

// optional bool private = 2;
void TGroupUpdate::clear_private_() {
  private__ = false;
}
bool TGroupUpdate::private_() const {
  // @@protoc_insertion_point(field_get:server.TGroupUpdate.private)
  return private__;
}
void TGroupUpdate::set_private_(bool value) {
  
  private__ = value;
  // @@protoc_insertion_point(field_set:server.TGroupUpdate.private)
}

// optional string name = 3;
void TGroupUpdate::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& TGroupUpdate::name() const {
  // @@protoc_insertion_point(field_get:server.TGroupUpdate.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TGroupUpdate::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:server.TGroupUpdate.name)
}
void TGroupUpdate::set_name(const char* value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:server.TGroupUpdate.name)
}
void TGroupUpdate::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:server.TGroupUpdate.name)
}
::std::string* TGroupUpdate::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:server.TGroupUpdate.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* TGroupUpdate::release_name() {
  // @@protoc_insertion_point(field_release:server.TGroupUpdate.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TGroupUpdate::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:server.TGroupUpdate.name)
}

// optional string description = 4;
void TGroupUpdate::clear_description() {
  description_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& TGroupUpdate::description() const {
  // @@protoc_insertion_point(field_get:server.TGroupUpdate.description)
  return description_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TGroupUpdate::set_description(const ::std::string& value) {
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:server.TGroupUpdate.description)
}
void TGroupUpdate::set_description(const char* value) {
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:server.TGroupUpdate.description)
}
void TGroupUpdate::set_description(const char* value, size_t size) {
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:server.TGroupUpdate.description)
}
::std::string* TGroupUpdate::mutable_description() {
  
  // @@protoc_insertion_point(field_mutable:server.TGroupUpdate.description)
  return description_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* TGroupUpdate::release_description() {
  // @@protoc_insertion_point(field_release:server.TGroupUpdate.description)
  
  return description_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TGroupUpdate::set_allocated_description(::std::string* description) {
  if (description != NULL) {
    
  } else {
    
  }
  description_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), description);
  // @@protoc_insertion_point(field_set_allocated:server.TGroupUpdate.description)
}

// optional string avatar_url = 5;
void TGroupUpdate::clear_avatar_url() {
  avatar_url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& TGroupUpdate::avatar_url() const {
  // @@protoc_insertion_point(field_get:server.TGroupUpdate.avatar_url)
  return avatar_url_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TGroupUpdate::set_avatar_url(const ::std::string& value) {
  
  avatar_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:server.TGroupUpdate.avatar_url)
}
void TGroupUpdate::set_avatar_url(const char* value) {
  
  avatar_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:server.TGroupUpdate.avatar_url)
}
void TGroupUpdate::set_avatar_url(const char* value, size_t size) {
  
  avatar_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:server.TGroupUpdate.avatar_url)
}
::std::string* TGroupUpdate::mutable_avatar_url() {
  
  // @@protoc_insertion_point(field_mutable:server.TGroupUpdate.avatar_url)
  return avatar_url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* TGroupUpdate::release_avatar_url() {
  // @@protoc_insertion_point(field_release:server.TGroupUpdate.avatar_url)
  
  return avatar_url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TGroupUpdate::set_allocated_avatar_url(::std::string* avatar_url) {
  if (avatar_url != NULL) {
    
  } else {
    
  }
  avatar_url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), avatar_url);
  // @@protoc_insertion_point(field_set_allocated:server.TGroupUpdate.avatar_url)
}

// optional string lang = 6;
void TGroupUpdate::clear_lang() {
  lang_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& TGroupUpdate::lang() const {
  // @@protoc_insertion_point(field_get:server.TGroupUpdate.lang)
  return lang_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TGroupUpdate::set_lang(const ::std::string& value) {
  
  lang_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:server.TGroupUpdate.lang)
}
void TGroupUpdate::set_lang(const char* value) {
  
  lang_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:server.TGroupUpdate.lang)
}
void TGroupUpdate::set_lang(const char* value, size_t size) {
  
  lang_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:server.TGroupUpdate.lang)
}
::std::string* TGroupUpdate::mutable_lang() {
  
  // @@protoc_insertion_point(field_mutable:server.TGroupUpdate.lang)
  return lang_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* TGroupUpdate::release_lang() {
  // @@protoc_insertion_point(field_release:server.TGroupUpdate.lang)
  
  return lang_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TGroupUpdate::set_allocated_lang(::std::string* lang) {
  if (lang != NULL) {
    
  } else {
    
  }
  lang_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), lang);
  // @@protoc_insertion_point(field_set_allocated:server.TGroupUpdate.lang)
}

// optional bytes metadata = 7;
void TGroupUpdate::clear_metadata() {
  metadata_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& TGroupUpdate::metadata() const {
  // @@protoc_insertion_point(field_get:server.TGroupUpdate.metadata)
  return metadata_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TGroupUpdate::set_metadata(const ::std::string& value) {
  
  metadata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:server.TGroupUpdate.metadata)
}
void TGroupUpdate::set_metadata(const char* value) {
  
  metadata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:server.TGroupUpdate.metadata)
}
void TGroupUpdate::set_metadata(const void* value, size_t size) {
  
  metadata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:server.TGroupUpdate.metadata)
}
::std::string* TGroupUpdate::mutable_metadata() {
  
  // @@protoc_insertion_point(field_mutable:server.TGroupUpdate.metadata)
  return metadata_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* TGroupUpdate::release_metadata() {
  // @@protoc_insertion_point(field_release:server.TGroupUpdate.metadata)
  
  return metadata_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TGroupUpdate::set_allocated_metadata(::std::string* metadata) {
  if (metadata != NULL) {
    
  } else {
    
  }
  metadata_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), metadata);
  // @@protoc_insertion_point(field_set_allocated:server.TGroupUpdate.metadata)
}

inline const TGroupUpdate* TGroupUpdate::internal_default_instance() {
  return &TGroupUpdate_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TGroupRemove::kGroupIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TGroupRemove::TGroupRemove()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_api_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:server.TGroupRemove)
}

void TGroupRemove::InitAsDefaultInstance() {
}

TGroupRemove::TGroupRemove(const TGroupRemove& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:server.TGroupRemove)
}

void TGroupRemove::SharedCtor() {
  group_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

TGroupRemove::~TGroupRemove() {
  // @@protoc_insertion_point(destructor:server.TGroupRemove)
  SharedDtor();
}

void TGroupRemove::SharedDtor() {
  group_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void TGroupRemove::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TGroupRemove::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TGroupRemove_descriptor_;
}

const TGroupRemove& TGroupRemove::default_instance() {
  protobuf_InitDefaults_api_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<TGroupRemove> TGroupRemove_default_instance_;

TGroupRemove* TGroupRemove::New(::google::protobuf::Arena* arena) const {
  TGroupRemove* n = new TGroupRemove;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TGroupRemove::Clear() {
// @@protoc_insertion_point(message_clear_start:server.TGroupRemove)
  group_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool TGroupRemove::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:server.TGroupRemove)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes group_id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_group_id()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:server.TGroupRemove)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:server.TGroupRemove)
  return false;
#undef DO_
}

void TGroupRemove::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:server.TGroupRemove)
  // optional bytes group_id = 1;
  if (this->group_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->group_id(), output);
  }

  // @@protoc_insertion_point(serialize_end:server.TGroupRemove)
}

::google::protobuf::uint8* TGroupRemove::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:server.TGroupRemove)
  // optional bytes group_id = 1;
  if (this->group_id().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->group_id(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:server.TGroupRemove)
  return target;
}

size_t TGroupRemove::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:server.TGroupRemove)
  size_t total_size = 0;

  // optional bytes group_id = 1;
  if (this->group_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->group_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TGroupRemove::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:server.TGroupRemove)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const TGroupRemove* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TGroupRemove>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:server.TGroupRemove)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:server.TGroupRemove)
    UnsafeMergeFrom(*source);
  }
}

void TGroupRemove::MergeFrom(const TGroupRemove& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:server.TGroupRemove)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void TGroupRemove::UnsafeMergeFrom(const TGroupRemove& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.group_id().size() > 0) {

    group_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.group_id_);
  }
}

void TGroupRemove::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:server.TGroupRemove)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TGroupRemove::CopyFrom(const TGroupRemove& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:server.TGroupRemove)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool TGroupRemove::IsInitialized() const {

  return true;
}

void TGroupRemove::Swap(TGroupRemove* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TGroupRemove::InternalSwap(TGroupRemove* other) {
  group_id_.Swap(&other->group_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TGroupRemove::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TGroupRemove_descriptor_;
  metadata.reflection = TGroupRemove_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TGroupRemove

// optional bytes group_id = 1;
void TGroupRemove::clear_group_id() {
  group_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& TGroupRemove::group_id() const {
  // @@protoc_insertion_point(field_get:server.TGroupRemove.group_id)
  return group_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TGroupRemove::set_group_id(const ::std::string& value) {
  
  group_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:server.TGroupRemove.group_id)
}
void TGroupRemove::set_group_id(const char* value) {
  
  group_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:server.TGroupRemove.group_id)
}
void TGroupRemove::set_group_id(const void* value, size_t size) {
  
  group_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:server.TGroupRemove.group_id)
}
::std::string* TGroupRemove::mutable_group_id() {
  
  // @@protoc_insertion_point(field_mutable:server.TGroupRemove.group_id)
  return group_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* TGroupRemove::release_group_id() {
  // @@protoc_insertion_point(field_release:server.TGroupRemove.group_id)
  
  return group_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TGroupRemove::set_allocated_group_id(::std::string* group_id) {
  if (group_id != NULL) {
    
  } else {
    
  }
  group_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), group_id);
  // @@protoc_insertion_point(field_set_allocated:server.TGroupRemove.group_id)
}

inline const TGroupRemove* TGroupRemove::internal_default_instance() {
  return &TGroupRemove_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TGroupsSelfList::TGroupsSelfList()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_api_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:server.TGroupsSelfList)
}

void TGroupsSelfList::InitAsDefaultInstance() {
}

TGroupsSelfList::TGroupsSelfList(const TGroupsSelfList& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:server.TGroupsSelfList)
}

void TGroupsSelfList::SharedCtor() {
  _cached_size_ = 0;
}

TGroupsSelfList::~TGroupsSelfList() {
  // @@protoc_insertion_point(destructor:server.TGroupsSelfList)
  SharedDtor();
}

void TGroupsSelfList::SharedDtor() {
}

void TGroupsSelfList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TGroupsSelfList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TGroupsSelfList_descriptor_;
}

const TGroupsSelfList& TGroupsSelfList::default_instance() {
  protobuf_InitDefaults_api_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<TGroupsSelfList> TGroupsSelfList_default_instance_;

TGroupsSelfList* TGroupsSelfList::New(::google::protobuf::Arena* arena) const {
  TGroupsSelfList* n = new TGroupsSelfList;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TGroupsSelfList::Clear() {
// @@protoc_insertion_point(message_clear_start:server.TGroupsSelfList)
}

bool TGroupsSelfList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:server.TGroupsSelfList)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
  }
success:
  // @@protoc_insertion_point(parse_success:server.TGroupsSelfList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:server.TGroupsSelfList)
  return false;
#undef DO_
}

void TGroupsSelfList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:server.TGroupsSelfList)
  // @@protoc_insertion_point(serialize_end:server.TGroupsSelfList)
}

::google::protobuf::uint8* TGroupsSelfList::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:server.TGroupsSelfList)
  // @@protoc_insertion_point(serialize_to_array_end:server.TGroupsSelfList)
  return target;
}

size_t TGroupsSelfList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:server.TGroupsSelfList)
  size_t total_size = 0;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TGroupsSelfList::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:server.TGroupsSelfList)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const TGroupsSelfList* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TGroupsSelfList>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:server.TGroupsSelfList)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:server.TGroupsSelfList)
    UnsafeMergeFrom(*source);
  }
}

void TGroupsSelfList::MergeFrom(const TGroupsSelfList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:server.TGroupsSelfList)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void TGroupsSelfList::UnsafeMergeFrom(const TGroupsSelfList& from) {
  GOOGLE_DCHECK(&from != this);
}

void TGroupsSelfList::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:server.TGroupsSelfList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TGroupsSelfList::CopyFrom(const TGroupsSelfList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:server.TGroupsSelfList)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool TGroupsSelfList::IsInitialized() const {

  return true;
}

void TGroupsSelfList::Swap(TGroupsSelfList* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TGroupsSelfList::InternalSwap(TGroupsSelfList* other) {
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TGroupsSelfList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TGroupsSelfList_descriptor_;
  metadata.reflection = TGroupsSelfList_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TGroupsSelfList

inline const TGroupsSelfList* TGroupsSelfList::internal_default_instance() {
  return &TGroupsSelfList_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TGroupsFetch::kGroupIdsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TGroupsFetch::TGroupsFetch()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_api_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:server.TGroupsFetch)
}

void TGroupsFetch::InitAsDefaultInstance() {
}

TGroupsFetch::TGroupsFetch(const TGroupsFetch& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:server.TGroupsFetch)
}

void TGroupsFetch::SharedCtor() {
  _cached_size_ = 0;
}

TGroupsFetch::~TGroupsFetch() {
  // @@protoc_insertion_point(destructor:server.TGroupsFetch)
  SharedDtor();
}

void TGroupsFetch::SharedDtor() {
}

void TGroupsFetch::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TGroupsFetch::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TGroupsFetch_descriptor_;
}

const TGroupsFetch& TGroupsFetch::default_instance() {
  protobuf_InitDefaults_api_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<TGroupsFetch> TGroupsFetch_default_instance_;

TGroupsFetch* TGroupsFetch::New(::google::protobuf::Arena* arena) const {
  TGroupsFetch* n = new TGroupsFetch;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TGroupsFetch::Clear() {
// @@protoc_insertion_point(message_clear_start:server.TGroupsFetch)
  group_ids_.Clear();
}

bool TGroupsFetch::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:server.TGroupsFetch)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated bytes group_ids = 1;
      case 1: {
        if (tag == 10) {
         parse_group_ids:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->add_group_ids()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_group_ids;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:server.TGroupsFetch)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:server.TGroupsFetch)
  return false;
#undef DO_
}

void TGroupsFetch::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:server.TGroupsFetch)
  // repeated bytes group_ids = 1;
  for (int i = 0; i < this->group_ids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->group_ids(i), output);
  }

  // @@protoc_insertion_point(serialize_end:server.TGroupsFetch)
}

::google::protobuf::uint8* TGroupsFetch::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:server.TGroupsFetch)
  // repeated bytes group_ids = 1;
  for (int i = 0; i < this->group_ids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBytesToArray(1, this->group_ids(i), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:server.TGroupsFetch)
  return target;
}

size_t TGroupsFetch::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:server.TGroupsFetch)
  size_t total_size = 0;

  // repeated bytes group_ids = 1;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->group_ids_size());
  for (int i = 0; i < this->group_ids_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
      this->group_ids(i));
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TGroupsFetch::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:server.TGroupsFetch)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const TGroupsFetch* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TGroupsFetch>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:server.TGroupsFetch)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:server.TGroupsFetch)
    UnsafeMergeFrom(*source);
  }
}

void TGroupsFetch::MergeFrom(const TGroupsFetch& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:server.TGroupsFetch)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void TGroupsFetch::UnsafeMergeFrom(const TGroupsFetch& from) {
  GOOGLE_DCHECK(&from != this);
  group_ids_.UnsafeMergeFrom(from.group_ids_);
}

void TGroupsFetch::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:server.TGroupsFetch)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TGroupsFetch::CopyFrom(const TGroupsFetch& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:server.TGroupsFetch)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool TGroupsFetch::IsInitialized() const {

  return true;
}

void TGroupsFetch::Swap(TGroupsFetch* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TGroupsFetch::InternalSwap(TGroupsFetch* other) {
  group_ids_.UnsafeArenaSwap(&other->group_ids_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TGroupsFetch::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TGroupsFetch_descriptor_;
  metadata.reflection = TGroupsFetch_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TGroupsFetch

// repeated bytes group_ids = 1;
int TGroupsFetch::group_ids_size() const {
  return group_ids_.size();
}
void TGroupsFetch::clear_group_ids() {
  group_ids_.Clear();
}
const ::std::string& TGroupsFetch::group_ids(int index) const {
  // @@protoc_insertion_point(field_get:server.TGroupsFetch.group_ids)
  return group_ids_.Get(index);
}
::std::string* TGroupsFetch::mutable_group_ids(int index) {
  // @@protoc_insertion_point(field_mutable:server.TGroupsFetch.group_ids)
  return group_ids_.Mutable(index);
}
void TGroupsFetch::set_group_ids(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:server.TGroupsFetch.group_ids)
  group_ids_.Mutable(index)->assign(value);
}
void TGroupsFetch::set_group_ids(int index, const char* value) {
  group_ids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:server.TGroupsFetch.group_ids)
}
void TGroupsFetch::set_group_ids(int index, const void* value, size_t size) {
  group_ids_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:server.TGroupsFetch.group_ids)
}
::std::string* TGroupsFetch::add_group_ids() {
  // @@protoc_insertion_point(field_add_mutable:server.TGroupsFetch.group_ids)
  return group_ids_.Add();
}
void TGroupsFetch::add_group_ids(const ::std::string& value) {
  group_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:server.TGroupsFetch.group_ids)
}
void TGroupsFetch::add_group_ids(const char* value) {
  group_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:server.TGroupsFetch.group_ids)
}
void TGroupsFetch::add_group_ids(const void* value, size_t size) {
  group_ids_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:server.TGroupsFetch.group_ids)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
TGroupsFetch::group_ids() const {
  // @@protoc_insertion_point(field_list:server.TGroupsFetch.group_ids)
  return group_ids_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
TGroupsFetch::mutable_group_ids() {
  // @@protoc_insertion_point(field_mutable_list:server.TGroupsFetch.group_ids)
  return &group_ids_;
}

inline const TGroupsFetch* TGroupsFetch::internal_default_instance() {
  return &TGroupsFetch_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TGroupsList::kPageLimitFieldNumber;
const int TGroupsList::kOrderByAscFieldNumber;
const int TGroupsList::kLangFieldNumber;
const int TGroupsList::kCreatedAtFieldNumber;
const int TGroupsList::kCountFieldNumber;
const int TGroupsList::kCursorFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TGroupsList::TGroupsList()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_api_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:server.TGroupsList)
}

void TGroupsList::InitAsDefaultInstance() {
  TGroupsList_default_oneof_instance_->lang_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  TGroupsList_default_oneof_instance_->created_at_ = GOOGLE_LONGLONG(0);
  TGroupsList_default_oneof_instance_->count_ = GOOGLE_LONGLONG(0);
}

TGroupsList::TGroupsList(const TGroupsList& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:server.TGroupsList)
}

void TGroupsList::SharedCtor() {
  cursor_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&page_limit_, 0, reinterpret_cast<char*>(&order_by_asc_) -
    reinterpret_cast<char*>(&page_limit_) + sizeof(order_by_asc_));
  clear_has_filter();
  _cached_size_ = 0;
}

TGroupsList::~TGroupsList() {
  // @@protoc_insertion_point(destructor:server.TGroupsList)
  SharedDtor();
}

void TGroupsList::SharedDtor() {
  cursor_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (has_filter()) {
    clear_filter();
  }
}

void TGroupsList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TGroupsList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TGroupsList_descriptor_;
}

const TGroupsList& TGroupsList::default_instance() {
  protobuf_InitDefaults_api_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<TGroupsList> TGroupsList_default_instance_;

TGroupsList* TGroupsList::New(::google::protobuf::Arena* arena) const {
  TGroupsList* n = new TGroupsList;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TGroupsList::clear_filter() {
// @@protoc_insertion_point(one_of_clear_start:server.TGroupsList)
  switch (filter_case()) {
    case kLang: {
      filter_.lang_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
      break;
    }
    case kCreatedAt: {
      // No need to clear
      break;
    }
    case kCount: {
      // No need to clear
      break;
    }
    case FILTER_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = FILTER_NOT_SET;
}


void TGroupsList::Clear() {
// @@protoc_insertion_point(message_clear_start:server.TGroupsList)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(TGroupsList, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<TGroupsList*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(page_limit_, order_by_asc_);
  cursor_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());

#undef ZR_HELPER_
#undef ZR_

  clear_filter();
}

bool TGroupsList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:server.TGroupsList)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 page_limit = 1;
      case 1: {
        if (tag == 8) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &page_limit_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_order_by_asc;
        break;
      }

      // optional bool order_by_asc = 2;
      case 2: {
        if (tag == 16) {
         parse_order_by_asc:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &order_by_asc_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_lang;
        break;
      }

      // optional string lang = 3;
      case 3: {
        if (tag == 26) {
         parse_lang:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_lang()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->lang().data(), this->lang().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "server.TGroupsList.lang"));
        } else {
          goto handle_unusual;
        }
        goto after_count;
        break;
      }

      // optional int64 created_at = 4;
      case 4: {
        if (tag == 32) {
          clear_filter();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &filter_.created_at_)));
          set_has_created_at();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_count;
        break;
      }

      // optional int64 count = 5;
      case 5: {
        if (tag == 40) {
         parse_count:
          clear_filter();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &filter_.count_)));
          set_has_count();
        } else {
          goto handle_unusual;
        }
       after_count:
        if (input->ExpectTag(58)) goto parse_cursor;
        break;
      }

      // optional bytes cursor = 7;
      case 7: {
        if (tag == 58) {
         parse_cursor:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_cursor()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:server.TGroupsList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:server.TGroupsList)
  return false;
#undef DO_
}

void TGroupsList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:server.TGroupsList)
  // optional int64 page_limit = 1;
  if (this->page_limit() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->page_limit(), output);
  }

  // optional bool order_by_asc = 2;
  if (this->order_by_asc() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->order_by_asc(), output);
  }

  // optional string lang = 3;
  if (has_lang()) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->lang().data(), this->lang().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server.TGroupsList.lang");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->lang(), output);
  }

  // optional int64 created_at = 4;
  if (has_created_at()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->created_at(), output);
  }

  // optional int64 count = 5;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->count(), output);
  }

  // optional bytes cursor = 7;
  if (this->cursor().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      7, this->cursor(), output);
  }

  // @@protoc_insertion_point(serialize_end:server.TGroupsList)
}

::google::protobuf::uint8* TGroupsList::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:server.TGroupsList)
  // optional int64 page_limit = 1;
  if (this->page_limit() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->page_limit(), target);
  }

  // optional bool order_by_asc = 2;
  if (this->order_by_asc() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->order_by_asc(), target);
  }

  // optional string lang = 3;
  if (has_lang()) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->lang().data(), this->lang().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server.TGroupsList.lang");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->lang(), target);
  }

  // optional int64 created_at = 4;
  if (has_created_at()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->created_at(), target);
  }

  // optional int64 count = 5;
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->count(), target);
  }

  // optional bytes cursor = 7;
  if (this->cursor().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        7, this->cursor(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:server.TGroupsList)
  return target;
}

size_t TGroupsList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:server.TGroupsList)
  size_t total_size = 0;

  // optional int64 page_limit = 1;
  if (this->page_limit() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->page_limit());
  }

  // optional bool order_by_asc = 2;
  if (this->order_by_asc() != 0) {
    total_size += 1 + 1;
  }

  // optional bytes cursor = 7;
  if (this->cursor().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->cursor());
  }

  switch (filter_case()) {
    // optional string lang = 3;
    case kLang: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->lang());
      break;
    }
    // optional int64 created_at = 4;
    case kCreatedAt: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->created_at());
      break;
    }
    // optional int64 count = 5;
    case kCount: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->count());
      break;
    }
    case FILTER_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TGroupsList::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:server.TGroupsList)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const TGroupsList* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TGroupsList>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:server.TGroupsList)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:server.TGroupsList)
    UnsafeMergeFrom(*source);
  }
}

void TGroupsList::MergeFrom(const TGroupsList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:server.TGroupsList)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void TGroupsList::UnsafeMergeFrom(const TGroupsList& from) {
  GOOGLE_DCHECK(&from != this);
  switch (from.filter_case()) {
    case kLang: {
      set_lang(from.lang());
      break;
    }
    case kCreatedAt: {
      set_created_at(from.created_at());
      break;
    }
    case kCount: {
      set_count(from.count());
      break;
    }
    case FILTER_NOT_SET: {
      break;
    }
  }
  if (from.page_limit() != 0) {
    set_page_limit(from.page_limit());
  }
  if (from.order_by_asc() != 0) {
    set_order_by_asc(from.order_by_asc());
  }
  if (from.cursor().size() > 0) {

    cursor_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cursor_);
  }
}

void TGroupsList::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:server.TGroupsList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TGroupsList::CopyFrom(const TGroupsList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:server.TGroupsList)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool TGroupsList::IsInitialized() const {

  return true;
}

void TGroupsList::Swap(TGroupsList* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TGroupsList::InternalSwap(TGroupsList* other) {
  std::swap(page_limit_, other->page_limit_);
  std::swap(order_by_asc_, other->order_by_asc_);
  cursor_.Swap(&other->cursor_);
  std::swap(filter_, other->filter_);
  std::swap(_oneof_case_[0], other->_oneof_case_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TGroupsList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TGroupsList_descriptor_;
  metadata.reflection = TGroupsList_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TGroupsList

// optional int64 page_limit = 1;
void TGroupsList::clear_page_limit() {
  page_limit_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 TGroupsList::page_limit() const {
  // @@protoc_insertion_point(field_get:server.TGroupsList.page_limit)
  return page_limit_;
}
void TGroupsList::set_page_limit(::google::protobuf::int64 value) {
  
  page_limit_ = value;
  // @@protoc_insertion_point(field_set:server.TGroupsList.page_limit)
}

// optional bool order_by_asc = 2;
void TGroupsList::clear_order_by_asc() {
  order_by_asc_ = false;
}
bool TGroupsList::order_by_asc() const {
  // @@protoc_insertion_point(field_get:server.TGroupsList.order_by_asc)
  return order_by_asc_;
}
void TGroupsList::set_order_by_asc(bool value) {
  
  order_by_asc_ = value;
  // @@protoc_insertion_point(field_set:server.TGroupsList.order_by_asc)
}

// optional string lang = 3;
bool TGroupsList::has_lang() const {
  return filter_case() == kLang;
}
void TGroupsList::set_has_lang() {
  _oneof_case_[0] = kLang;
}
void TGroupsList::clear_lang() {
  if (has_lang()) {
    filter_.lang_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_filter();
  }
}
const ::std::string& TGroupsList::lang() const {
  // @@protoc_insertion_point(field_get:server.TGroupsList.lang)
  if (has_lang()) {
    return filter_.lang_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
void TGroupsList::set_lang(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:server.TGroupsList.lang)
  if (!has_lang()) {
    clear_filter();
    set_has_lang();
    filter_.lang_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  filter_.lang_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:server.TGroupsList.lang)
}
void TGroupsList::set_lang(const char* value) {
  if (!has_lang()) {
    clear_filter();
    set_has_lang();
    filter_.lang_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  filter_.lang_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:server.TGroupsList.lang)
}
void TGroupsList::set_lang(const char* value, size_t size) {
  if (!has_lang()) {
    clear_filter();
    set_has_lang();
    filter_.lang_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  filter_.lang_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:server.TGroupsList.lang)
}
::std::string* TGroupsList::mutable_lang() {
  if (!has_lang()) {
    clear_filter();
    set_has_lang();
    filter_.lang_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:server.TGroupsList.lang)
  return filter_.lang_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* TGroupsList::release_lang() {
  // @@protoc_insertion_point(field_release:server.TGroupsList.lang)
  if (has_lang()) {
    clear_has_filter();
    return filter_.lang_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return NULL;
  }
}
void TGroupsList::set_allocated_lang(::std::string* lang) {
  if (!has_lang()) {
    filter_.lang_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_filter();
  if (lang != NULL) {
    set_has_lang();
    filter_.lang_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        lang);
  }
  // @@protoc_insertion_point(field_set_allocated:server.TGroupsList.lang)
}

// optional int64 created_at = 4;
bool TGroupsList::has_created_at() const {
  return filter_case() == kCreatedAt;
}
void TGroupsList::set_has_created_at() {
  _oneof_case_[0] = kCreatedAt;
}
void TGroupsList::clear_created_at() {
  if (has_created_at()) {
    filter_.created_at_ = GOOGLE_LONGLONG(0);
    clear_has_filter();
  }
}
::google::protobuf::int64 TGroupsList::created_at() const {
  // @@protoc_insertion_point(field_get:server.TGroupsList.created_at)
  if (has_created_at()) {
    return filter_.created_at_;
  }
  return GOOGLE_LONGLONG(0);
}
void TGroupsList::set_created_at(::google::protobuf::int64 value) {
  if (!has_created_at()) {
    clear_filter();
    set_has_created_at();
  }
  filter_.created_at_ = value;
  // @@protoc_insertion_point(field_set:server.TGroupsList.created_at)
}

// optional int64 count = 5;
bool TGroupsList::has_count() const {
  return filter_case() == kCount;
}
void TGroupsList::set_has_count() {
  _oneof_case_[0] = kCount;
}
void TGroupsList::clear_count() {
  if (has_count()) {
    filter_.count_ = GOOGLE_LONGLONG(0);
    clear_has_filter();
  }
}
::google::protobuf::int64 TGroupsList::count() const {
  // @@protoc_insertion_point(field_get:server.TGroupsList.count)
  if (has_count()) {
    return filter_.count_;
  }
  return GOOGLE_LONGLONG(0);
}
void TGroupsList::set_count(::google::protobuf::int64 value) {
  if (!has_count()) {
    clear_filter();
    set_has_count();
  }
  filter_.count_ = value;
  // @@protoc_insertion_point(field_set:server.TGroupsList.count)
}

// optional bytes cursor = 7;
void TGroupsList::clear_cursor() {
  cursor_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& TGroupsList::cursor() const {
  // @@protoc_insertion_point(field_get:server.TGroupsList.cursor)
  return cursor_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TGroupsList::set_cursor(const ::std::string& value) {
  
  cursor_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:server.TGroupsList.cursor)
}
void TGroupsList::set_cursor(const char* value) {
  
  cursor_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:server.TGroupsList.cursor)
}
void TGroupsList::set_cursor(const void* value, size_t size) {
  
  cursor_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:server.TGroupsList.cursor)
}
::std::string* TGroupsList::mutable_cursor() {
  
  // @@protoc_insertion_point(field_mutable:server.TGroupsList.cursor)
  return cursor_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* TGroupsList::release_cursor() {
  // @@protoc_insertion_point(field_release:server.TGroupsList.cursor)
  
  return cursor_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TGroupsList::set_allocated_cursor(::std::string* cursor) {
  if (cursor != NULL) {
    
  } else {
    
  }
  cursor_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cursor);
  // @@protoc_insertion_point(field_set_allocated:server.TGroupsList.cursor)
}

bool TGroupsList::has_filter() const {
  return filter_case() != FILTER_NOT_SET;
}
void TGroupsList::clear_has_filter() {
  _oneof_case_[0] = FILTER_NOT_SET;
}
TGroupsList::FilterCase TGroupsList::filter_case() const {
  return TGroupsList::FilterCase(_oneof_case_[0]);
}
inline const TGroupsList* TGroupsList::internal_default_instance() {
  return &TGroupsList_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TGroups::kGroupsFieldNumber;
const int TGroups::kCursorFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TGroups::TGroups()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_api_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:server.TGroups)
}

void TGroups::InitAsDefaultInstance() {
}

TGroups::TGroups(const TGroups& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:server.TGroups)
}

void TGroups::SharedCtor() {
  cursor_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

TGroups::~TGroups() {
  // @@protoc_insertion_point(destructor:server.TGroups)
  SharedDtor();
}

void TGroups::SharedDtor() {
  cursor_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void TGroups::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TGroups::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TGroups_descriptor_;
}

const TGroups& TGroups::default_instance() {
  protobuf_InitDefaults_api_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<TGroups> TGroups_default_instance_;

TGroups* TGroups::New(::google::protobuf::Arena* arena) const {
  TGroups* n = new TGroups;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TGroups::Clear() {
// @@protoc_insertion_point(message_clear_start:server.TGroups)
  cursor_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  groups_.Clear();
}

bool TGroups::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:server.TGroups)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .server.Group groups = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_groups:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_groups()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_groups;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(18)) goto parse_cursor;
        break;
      }

      // optional bytes cursor = 2;
      case 2: {
        if (tag == 18) {
         parse_cursor:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_cursor()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:server.TGroups)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:server.TGroups)
  return false;
#undef DO_
}

void TGroups::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:server.TGroups)
  // repeated .server.Group groups = 1;
  for (unsigned int i = 0, n = this->groups_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->groups(i), output);
  }

  // optional bytes cursor = 2;
  if (this->cursor().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->cursor(), output);
  }

  // @@protoc_insertion_point(serialize_end:server.TGroups)
}

::google::protobuf::uint8* TGroups::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:server.TGroups)
  // repeated .server.Group groups = 1;
  for (unsigned int i = 0, n = this->groups_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->groups(i), false, target);
  }

  // optional bytes cursor = 2;
  if (this->cursor().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->cursor(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:server.TGroups)
  return target;
}

size_t TGroups::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:server.TGroups)
  size_t total_size = 0;

  // optional bytes cursor = 2;
  if (this->cursor().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->cursor());
  }

  // repeated .server.Group groups = 1;
  {
    unsigned int count = this->groups_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->groups(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TGroups::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:server.TGroups)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const TGroups* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TGroups>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:server.TGroups)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:server.TGroups)
    UnsafeMergeFrom(*source);
  }
}

void TGroups::MergeFrom(const TGroups& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:server.TGroups)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void TGroups::UnsafeMergeFrom(const TGroups& from) {
  GOOGLE_DCHECK(&from != this);
  groups_.MergeFrom(from.groups_);
  if (from.cursor().size() > 0) {

    cursor_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cursor_);
  }
}

void TGroups::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:server.TGroups)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TGroups::CopyFrom(const TGroups& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:server.TGroups)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool TGroups::IsInitialized() const {

  return true;
}

void TGroups::Swap(TGroups* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TGroups::InternalSwap(TGroups* other) {
  groups_.UnsafeArenaSwap(&other->groups_);
  cursor_.Swap(&other->cursor_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TGroups::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TGroups_descriptor_;
  metadata.reflection = TGroups_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TGroups

// repeated .server.Group groups = 1;
int TGroups::groups_size() const {
  return groups_.size();
}
void TGroups::clear_groups() {
  groups_.Clear();
}
const ::server::Group& TGroups::groups(int index) const {
  // @@protoc_insertion_point(field_get:server.TGroups.groups)
  return groups_.Get(index);
}
::server::Group* TGroups::mutable_groups(int index) {
  // @@protoc_insertion_point(field_mutable:server.TGroups.groups)
  return groups_.Mutable(index);
}
::server::Group* TGroups::add_groups() {
  // @@protoc_insertion_point(field_add:server.TGroups.groups)
  return groups_.Add();
}
::google::protobuf::RepeatedPtrField< ::server::Group >*
TGroups::mutable_groups() {
  // @@protoc_insertion_point(field_mutable_list:server.TGroups.groups)
  return &groups_;
}
const ::google::protobuf::RepeatedPtrField< ::server::Group >&
TGroups::groups() const {
  // @@protoc_insertion_point(field_list:server.TGroups.groups)
  return groups_;
}

// optional bytes cursor = 2;
void TGroups::clear_cursor() {
  cursor_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& TGroups::cursor() const {
  // @@protoc_insertion_point(field_get:server.TGroups.cursor)
  return cursor_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TGroups::set_cursor(const ::std::string& value) {
  
  cursor_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:server.TGroups.cursor)
}
void TGroups::set_cursor(const char* value) {
  
  cursor_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:server.TGroups.cursor)
}
void TGroups::set_cursor(const void* value, size_t size) {
  
  cursor_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:server.TGroups.cursor)
}
::std::string* TGroups::mutable_cursor() {
  
  // @@protoc_insertion_point(field_mutable:server.TGroups.cursor)
  return cursor_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* TGroups::release_cursor() {
  // @@protoc_insertion_point(field_release:server.TGroups.cursor)
  
  return cursor_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TGroups::set_allocated_cursor(::std::string* cursor) {
  if (cursor != NULL) {
    
  } else {
    
  }
  cursor_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cursor);
  // @@protoc_insertion_point(field_set_allocated:server.TGroups.cursor)
}

inline const TGroups* TGroups::internal_default_instance() {
  return &TGroups_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GroupUser::kUserFieldNumber;
const int GroupUser::kTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GroupUser::GroupUser()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_api_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:server.GroupUser)
}

void GroupUser::InitAsDefaultInstance() {
  user_ = const_cast< ::server::User*>(
      ::server::User::internal_default_instance());
}

GroupUser::GroupUser(const GroupUser& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:server.GroupUser)
}

void GroupUser::SharedCtor() {
  user_ = NULL;
  type_ = GOOGLE_LONGLONG(0);
  _cached_size_ = 0;
}

GroupUser::~GroupUser() {
  // @@protoc_insertion_point(destructor:server.GroupUser)
  SharedDtor();
}

void GroupUser::SharedDtor() {
  if (this != &GroupUser_default_instance_.get()) {
    delete user_;
  }
}

void GroupUser::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GroupUser::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GroupUser_descriptor_;
}

const GroupUser& GroupUser::default_instance() {
  protobuf_InitDefaults_api_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<GroupUser> GroupUser_default_instance_;

GroupUser* GroupUser::New(::google::protobuf::Arena* arena) const {
  GroupUser* n = new GroupUser;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GroupUser::Clear() {
// @@protoc_insertion_point(message_clear_start:server.GroupUser)
  if (GetArenaNoVirtual() == NULL && user_ != NULL) delete user_;
  user_ = NULL;
  type_ = GOOGLE_LONGLONG(0);
}

bool GroupUser::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:server.GroupUser)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .server.User user = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_user()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // optional int64 type = 2;
      case 2: {
        if (tag == 16) {
         parse_type:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &type_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:server.GroupUser)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:server.GroupUser)
  return false;
#undef DO_
}

void GroupUser::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:server.GroupUser)
  // optional .server.User user = 1;
  if (this->has_user()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->user_, output);
  }

  // optional int64 type = 2;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->type(), output);
  }

  // @@protoc_insertion_point(serialize_end:server.GroupUser)
}

::google::protobuf::uint8* GroupUser::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:server.GroupUser)
  // optional .server.User user = 1;
  if (this->has_user()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->user_, false, target);
  }

  // optional int64 type = 2;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->type(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:server.GroupUser)
  return target;
}

size_t GroupUser::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:server.GroupUser)
  size_t total_size = 0;

  // optional .server.User user = 1;
  if (this->has_user()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->user_);
  }

  // optional int64 type = 2;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GroupUser::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:server.GroupUser)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const GroupUser* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GroupUser>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:server.GroupUser)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:server.GroupUser)
    UnsafeMergeFrom(*source);
  }
}

void GroupUser::MergeFrom(const GroupUser& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:server.GroupUser)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void GroupUser::UnsafeMergeFrom(const GroupUser& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.has_user()) {
    mutable_user()->::server::User::MergeFrom(from.user());
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
}

void GroupUser::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:server.GroupUser)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GroupUser::CopyFrom(const GroupUser& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:server.GroupUser)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool GroupUser::IsInitialized() const {

  return true;
}

void GroupUser::Swap(GroupUser* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GroupUser::InternalSwap(GroupUser* other) {
  std::swap(user_, other->user_);
  std::swap(type_, other->type_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GroupUser::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GroupUser_descriptor_;
  metadata.reflection = GroupUser_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GroupUser

// optional .server.User user = 1;
bool GroupUser::has_user() const {
  return this != internal_default_instance() && user_ != NULL;
}
void GroupUser::clear_user() {
  if (GetArenaNoVirtual() == NULL && user_ != NULL) delete user_;
  user_ = NULL;
}
const ::server::User& GroupUser::user() const {
  // @@protoc_insertion_point(field_get:server.GroupUser.user)
  return user_ != NULL ? *user_
                         : *::server::User::internal_default_instance();
}
::server::User* GroupUser::mutable_user() {
  
  if (user_ == NULL) {
    user_ = new ::server::User;
  }
  // @@protoc_insertion_point(field_mutable:server.GroupUser.user)
  return user_;
}
::server::User* GroupUser::release_user() {
  // @@protoc_insertion_point(field_release:server.GroupUser.user)
  
  ::server::User* temp = user_;
  user_ = NULL;
  return temp;
}
void GroupUser::set_allocated_user(::server::User* user) {
  delete user_;
  user_ = user;
  if (user) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:server.GroupUser.user)
}

// optional int64 type = 2;
void GroupUser::clear_type() {
  type_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 GroupUser::type() const {
  // @@protoc_insertion_point(field_get:server.GroupUser.type)
  return type_;
}
void GroupUser::set_type(::google::protobuf::int64 value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:server.GroupUser.type)
}

inline const GroupUser* GroupUser::internal_default_instance() {
  return &GroupUser_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TGroupUsersList::kGroupIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TGroupUsersList::TGroupUsersList()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_api_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:server.TGroupUsersList)
}

void TGroupUsersList::InitAsDefaultInstance() {
}

TGroupUsersList::TGroupUsersList(const TGroupUsersList& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:server.TGroupUsersList)
}

void TGroupUsersList::SharedCtor() {
  group_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

TGroupUsersList::~TGroupUsersList() {
  // @@protoc_insertion_point(destructor:server.TGroupUsersList)
  SharedDtor();
}

void TGroupUsersList::SharedDtor() {
  group_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void TGroupUsersList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TGroupUsersList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TGroupUsersList_descriptor_;
}

const TGroupUsersList& TGroupUsersList::default_instance() {
  protobuf_InitDefaults_api_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<TGroupUsersList> TGroupUsersList_default_instance_;

TGroupUsersList* TGroupUsersList::New(::google::protobuf::Arena* arena) const {
  TGroupUsersList* n = new TGroupUsersList;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TGroupUsersList::Clear() {
// @@protoc_insertion_point(message_clear_start:server.TGroupUsersList)
  group_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool TGroupUsersList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:server.TGroupUsersList)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes group_id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_group_id()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:server.TGroupUsersList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:server.TGroupUsersList)
  return false;
#undef DO_
}

void TGroupUsersList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:server.TGroupUsersList)
  // optional bytes group_id = 1;
  if (this->group_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->group_id(), output);
  }

  // @@protoc_insertion_point(serialize_end:server.TGroupUsersList)
}

::google::protobuf::uint8* TGroupUsersList::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:server.TGroupUsersList)
  // optional bytes group_id = 1;
  if (this->group_id().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->group_id(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:server.TGroupUsersList)
  return target;
}

size_t TGroupUsersList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:server.TGroupUsersList)
  size_t total_size = 0;

  // optional bytes group_id = 1;
  if (this->group_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->group_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TGroupUsersList::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:server.TGroupUsersList)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const TGroupUsersList* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TGroupUsersList>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:server.TGroupUsersList)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:server.TGroupUsersList)
    UnsafeMergeFrom(*source);
  }
}

void TGroupUsersList::MergeFrom(const TGroupUsersList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:server.TGroupUsersList)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void TGroupUsersList::UnsafeMergeFrom(const TGroupUsersList& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.group_id().size() > 0) {

    group_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.group_id_);
  }
}

void TGroupUsersList::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:server.TGroupUsersList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TGroupUsersList::CopyFrom(const TGroupUsersList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:server.TGroupUsersList)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool TGroupUsersList::IsInitialized() const {

  return true;
}

void TGroupUsersList::Swap(TGroupUsersList* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TGroupUsersList::InternalSwap(TGroupUsersList* other) {
  group_id_.Swap(&other->group_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TGroupUsersList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TGroupUsersList_descriptor_;
  metadata.reflection = TGroupUsersList_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TGroupUsersList

// optional bytes group_id = 1;
void TGroupUsersList::clear_group_id() {
  group_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& TGroupUsersList::group_id() const {
  // @@protoc_insertion_point(field_get:server.TGroupUsersList.group_id)
  return group_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TGroupUsersList::set_group_id(const ::std::string& value) {
  
  group_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:server.TGroupUsersList.group_id)
}
void TGroupUsersList::set_group_id(const char* value) {
  
  group_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:server.TGroupUsersList.group_id)
}
void TGroupUsersList::set_group_id(const void* value, size_t size) {
  
  group_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:server.TGroupUsersList.group_id)
}
::std::string* TGroupUsersList::mutable_group_id() {
  
  // @@protoc_insertion_point(field_mutable:server.TGroupUsersList.group_id)
  return group_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* TGroupUsersList::release_group_id() {
  // @@protoc_insertion_point(field_release:server.TGroupUsersList.group_id)
  
  return group_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TGroupUsersList::set_allocated_group_id(::std::string* group_id) {
  if (group_id != NULL) {
    
  } else {
    
  }
  group_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), group_id);
  // @@protoc_insertion_point(field_set_allocated:server.TGroupUsersList.group_id)
}

inline const TGroupUsersList* TGroupUsersList::internal_default_instance() {
  return &TGroupUsersList_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TGroupUsers::kUsersFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TGroupUsers::TGroupUsers()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_api_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:server.TGroupUsers)
}

void TGroupUsers::InitAsDefaultInstance() {
}

TGroupUsers::TGroupUsers(const TGroupUsers& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:server.TGroupUsers)
}

void TGroupUsers::SharedCtor() {
  _cached_size_ = 0;
}

TGroupUsers::~TGroupUsers() {
  // @@protoc_insertion_point(destructor:server.TGroupUsers)
  SharedDtor();
}

void TGroupUsers::SharedDtor() {
}

void TGroupUsers::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TGroupUsers::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TGroupUsers_descriptor_;
}

const TGroupUsers& TGroupUsers::default_instance() {
  protobuf_InitDefaults_api_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<TGroupUsers> TGroupUsers_default_instance_;

TGroupUsers* TGroupUsers::New(::google::protobuf::Arena* arena) const {
  TGroupUsers* n = new TGroupUsers;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TGroupUsers::Clear() {
// @@protoc_insertion_point(message_clear_start:server.TGroupUsers)
  users_.Clear();
}

bool TGroupUsers::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:server.TGroupUsers)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .server.GroupUser users = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_users:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_users()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_users;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:server.TGroupUsers)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:server.TGroupUsers)
  return false;
#undef DO_
}

void TGroupUsers::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:server.TGroupUsers)
  // repeated .server.GroupUser users = 1;
  for (unsigned int i = 0, n = this->users_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->users(i), output);
  }

  // @@protoc_insertion_point(serialize_end:server.TGroupUsers)
}

::google::protobuf::uint8* TGroupUsers::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:server.TGroupUsers)
  // repeated .server.GroupUser users = 1;
  for (unsigned int i = 0, n = this->users_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->users(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:server.TGroupUsers)
  return target;
}

size_t TGroupUsers::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:server.TGroupUsers)
  size_t total_size = 0;

  // repeated .server.GroupUser users = 1;
  {
    unsigned int count = this->users_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->users(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TGroupUsers::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:server.TGroupUsers)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const TGroupUsers* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TGroupUsers>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:server.TGroupUsers)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:server.TGroupUsers)
    UnsafeMergeFrom(*source);
  }
}

void TGroupUsers::MergeFrom(const TGroupUsers& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:server.TGroupUsers)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void TGroupUsers::UnsafeMergeFrom(const TGroupUsers& from) {
  GOOGLE_DCHECK(&from != this);
  users_.MergeFrom(from.users_);
}

void TGroupUsers::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:server.TGroupUsers)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TGroupUsers::CopyFrom(const TGroupUsers& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:server.TGroupUsers)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool TGroupUsers::IsInitialized() const {

  return true;
}

void TGroupUsers::Swap(TGroupUsers* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TGroupUsers::InternalSwap(TGroupUsers* other) {
  users_.UnsafeArenaSwap(&other->users_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TGroupUsers::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TGroupUsers_descriptor_;
  metadata.reflection = TGroupUsers_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TGroupUsers

// repeated .server.GroupUser users = 1;
int TGroupUsers::users_size() const {
  return users_.size();
}
void TGroupUsers::clear_users() {
  users_.Clear();
}
const ::server::GroupUser& TGroupUsers::users(int index) const {
  // @@protoc_insertion_point(field_get:server.TGroupUsers.users)
  return users_.Get(index);
}
::server::GroupUser* TGroupUsers::mutable_users(int index) {
  // @@protoc_insertion_point(field_mutable:server.TGroupUsers.users)
  return users_.Mutable(index);
}
::server::GroupUser* TGroupUsers::add_users() {
  // @@protoc_insertion_point(field_add:server.TGroupUsers.users)
  return users_.Add();
}
::google::protobuf::RepeatedPtrField< ::server::GroupUser >*
TGroupUsers::mutable_users() {
  // @@protoc_insertion_point(field_mutable_list:server.TGroupUsers.users)
  return &users_;
}
const ::google::protobuf::RepeatedPtrField< ::server::GroupUser >&
TGroupUsers::users() const {
  // @@protoc_insertion_point(field_list:server.TGroupUsers.users)
  return users_;
}

inline const TGroupUsers* TGroupUsers::internal_default_instance() {
  return &TGroupUsers_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TGroupJoin::kGroupIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TGroupJoin::TGroupJoin()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_api_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:server.TGroupJoin)
}

void TGroupJoin::InitAsDefaultInstance() {
}

TGroupJoin::TGroupJoin(const TGroupJoin& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:server.TGroupJoin)
}

void TGroupJoin::SharedCtor() {
  group_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

TGroupJoin::~TGroupJoin() {
  // @@protoc_insertion_point(destructor:server.TGroupJoin)
  SharedDtor();
}

void TGroupJoin::SharedDtor() {
  group_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void TGroupJoin::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TGroupJoin::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TGroupJoin_descriptor_;
}

const TGroupJoin& TGroupJoin::default_instance() {
  protobuf_InitDefaults_api_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<TGroupJoin> TGroupJoin_default_instance_;

TGroupJoin* TGroupJoin::New(::google::protobuf::Arena* arena) const {
  TGroupJoin* n = new TGroupJoin;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TGroupJoin::Clear() {
// @@protoc_insertion_point(message_clear_start:server.TGroupJoin)
  group_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool TGroupJoin::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:server.TGroupJoin)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes group_id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_group_id()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:server.TGroupJoin)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:server.TGroupJoin)
  return false;
#undef DO_
}

void TGroupJoin::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:server.TGroupJoin)
  // optional bytes group_id = 1;
  if (this->group_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->group_id(), output);
  }

  // @@protoc_insertion_point(serialize_end:server.TGroupJoin)
}

::google::protobuf::uint8* TGroupJoin::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:server.TGroupJoin)
  // optional bytes group_id = 1;
  if (this->group_id().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->group_id(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:server.TGroupJoin)
  return target;
}

size_t TGroupJoin::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:server.TGroupJoin)
  size_t total_size = 0;

  // optional bytes group_id = 1;
  if (this->group_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->group_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TGroupJoin::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:server.TGroupJoin)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const TGroupJoin* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TGroupJoin>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:server.TGroupJoin)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:server.TGroupJoin)
    UnsafeMergeFrom(*source);
  }
}

void TGroupJoin::MergeFrom(const TGroupJoin& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:server.TGroupJoin)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void TGroupJoin::UnsafeMergeFrom(const TGroupJoin& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.group_id().size() > 0) {

    group_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.group_id_);
  }
}

void TGroupJoin::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:server.TGroupJoin)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TGroupJoin::CopyFrom(const TGroupJoin& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:server.TGroupJoin)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool TGroupJoin::IsInitialized() const {

  return true;
}

void TGroupJoin::Swap(TGroupJoin* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TGroupJoin::InternalSwap(TGroupJoin* other) {
  group_id_.Swap(&other->group_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TGroupJoin::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TGroupJoin_descriptor_;
  metadata.reflection = TGroupJoin_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TGroupJoin

// optional bytes group_id = 1;
void TGroupJoin::clear_group_id() {
  group_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& TGroupJoin::group_id() const {
  // @@protoc_insertion_point(field_get:server.TGroupJoin.group_id)
  return group_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TGroupJoin::set_group_id(const ::std::string& value) {
  
  group_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:server.TGroupJoin.group_id)
}
void TGroupJoin::set_group_id(const char* value) {
  
  group_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:server.TGroupJoin.group_id)
}
void TGroupJoin::set_group_id(const void* value, size_t size) {
  
  group_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:server.TGroupJoin.group_id)
}
::std::string* TGroupJoin::mutable_group_id() {
  
  // @@protoc_insertion_point(field_mutable:server.TGroupJoin.group_id)
  return group_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* TGroupJoin::release_group_id() {
  // @@protoc_insertion_point(field_release:server.TGroupJoin.group_id)
  
  return group_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TGroupJoin::set_allocated_group_id(::std::string* group_id) {
  if (group_id != NULL) {
    
  } else {
    
  }
  group_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), group_id);
  // @@protoc_insertion_point(field_set_allocated:server.TGroupJoin.group_id)
}

inline const TGroupJoin* TGroupJoin::internal_default_instance() {
  return &TGroupJoin_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TGroupLeave::kGroupIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TGroupLeave::TGroupLeave()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_api_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:server.TGroupLeave)
}

void TGroupLeave::InitAsDefaultInstance() {
}

TGroupLeave::TGroupLeave(const TGroupLeave& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:server.TGroupLeave)
}

void TGroupLeave::SharedCtor() {
  group_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

TGroupLeave::~TGroupLeave() {
  // @@protoc_insertion_point(destructor:server.TGroupLeave)
  SharedDtor();
}

void TGroupLeave::SharedDtor() {
  group_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void TGroupLeave::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TGroupLeave::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TGroupLeave_descriptor_;
}

const TGroupLeave& TGroupLeave::default_instance() {
  protobuf_InitDefaults_api_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<TGroupLeave> TGroupLeave_default_instance_;

TGroupLeave* TGroupLeave::New(::google::protobuf::Arena* arena) const {
  TGroupLeave* n = new TGroupLeave;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TGroupLeave::Clear() {
// @@protoc_insertion_point(message_clear_start:server.TGroupLeave)
  group_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool TGroupLeave::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:server.TGroupLeave)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes group_id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_group_id()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:server.TGroupLeave)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:server.TGroupLeave)
  return false;
#undef DO_
}

void TGroupLeave::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:server.TGroupLeave)
  // optional bytes group_id = 1;
  if (this->group_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->group_id(), output);
  }

  // @@protoc_insertion_point(serialize_end:server.TGroupLeave)
}

::google::protobuf::uint8* TGroupLeave::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:server.TGroupLeave)
  // optional bytes group_id = 1;
  if (this->group_id().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->group_id(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:server.TGroupLeave)
  return target;
}

size_t TGroupLeave::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:server.TGroupLeave)
  size_t total_size = 0;

  // optional bytes group_id = 1;
  if (this->group_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->group_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TGroupLeave::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:server.TGroupLeave)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const TGroupLeave* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TGroupLeave>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:server.TGroupLeave)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:server.TGroupLeave)
    UnsafeMergeFrom(*source);
  }
}

void TGroupLeave::MergeFrom(const TGroupLeave& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:server.TGroupLeave)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void TGroupLeave::UnsafeMergeFrom(const TGroupLeave& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.group_id().size() > 0) {

    group_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.group_id_);
  }
}

void TGroupLeave::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:server.TGroupLeave)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TGroupLeave::CopyFrom(const TGroupLeave& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:server.TGroupLeave)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool TGroupLeave::IsInitialized() const {

  return true;
}

void TGroupLeave::Swap(TGroupLeave* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TGroupLeave::InternalSwap(TGroupLeave* other) {
  group_id_.Swap(&other->group_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TGroupLeave::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TGroupLeave_descriptor_;
  metadata.reflection = TGroupLeave_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TGroupLeave

// optional bytes group_id = 1;
void TGroupLeave::clear_group_id() {
  group_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& TGroupLeave::group_id() const {
  // @@protoc_insertion_point(field_get:server.TGroupLeave.group_id)
  return group_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TGroupLeave::set_group_id(const ::std::string& value) {
  
  group_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:server.TGroupLeave.group_id)
}
void TGroupLeave::set_group_id(const char* value) {
  
  group_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:server.TGroupLeave.group_id)
}
void TGroupLeave::set_group_id(const void* value, size_t size) {
  
  group_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:server.TGroupLeave.group_id)
}
::std::string* TGroupLeave::mutable_group_id() {
  
  // @@protoc_insertion_point(field_mutable:server.TGroupLeave.group_id)
  return group_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* TGroupLeave::release_group_id() {
  // @@protoc_insertion_point(field_release:server.TGroupLeave.group_id)
  
  return group_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TGroupLeave::set_allocated_group_id(::std::string* group_id) {
  if (group_id != NULL) {
    
  } else {
    
  }
  group_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), group_id);
  // @@protoc_insertion_point(field_set_allocated:server.TGroupLeave.group_id)
}

inline const TGroupLeave* TGroupLeave::internal_default_instance() {
  return &TGroupLeave_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TGroupUserAdd::kGroupIdFieldNumber;
const int TGroupUserAdd::kUserIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TGroupUserAdd::TGroupUserAdd()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_api_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:server.TGroupUserAdd)
}

void TGroupUserAdd::InitAsDefaultInstance() {
}

TGroupUserAdd::TGroupUserAdd(const TGroupUserAdd& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:server.TGroupUserAdd)
}

void TGroupUserAdd::SharedCtor() {
  group_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  user_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

TGroupUserAdd::~TGroupUserAdd() {
  // @@protoc_insertion_point(destructor:server.TGroupUserAdd)
  SharedDtor();
}

void TGroupUserAdd::SharedDtor() {
  group_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  user_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void TGroupUserAdd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TGroupUserAdd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TGroupUserAdd_descriptor_;
}

const TGroupUserAdd& TGroupUserAdd::default_instance() {
  protobuf_InitDefaults_api_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<TGroupUserAdd> TGroupUserAdd_default_instance_;

TGroupUserAdd* TGroupUserAdd::New(::google::protobuf::Arena* arena) const {
  TGroupUserAdd* n = new TGroupUserAdd;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TGroupUserAdd::Clear() {
// @@protoc_insertion_point(message_clear_start:server.TGroupUserAdd)
  group_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  user_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool TGroupUserAdd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:server.TGroupUserAdd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes group_id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_group_id()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_user_id;
        break;
      }

      // optional bytes user_id = 2;
      case 2: {
        if (tag == 18) {
         parse_user_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_user_id()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:server.TGroupUserAdd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:server.TGroupUserAdd)
  return false;
#undef DO_
}

void TGroupUserAdd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:server.TGroupUserAdd)
  // optional bytes group_id = 1;
  if (this->group_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->group_id(), output);
  }

  // optional bytes user_id = 2;
  if (this->user_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->user_id(), output);
  }

  // @@protoc_insertion_point(serialize_end:server.TGroupUserAdd)
}

::google::protobuf::uint8* TGroupUserAdd::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:server.TGroupUserAdd)
  // optional bytes group_id = 1;
  if (this->group_id().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->group_id(), target);
  }

  // optional bytes user_id = 2;
  if (this->user_id().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->user_id(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:server.TGroupUserAdd)
  return target;
}

size_t TGroupUserAdd::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:server.TGroupUserAdd)
  size_t total_size = 0;

  // optional bytes group_id = 1;
  if (this->group_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->group_id());
  }

  // optional bytes user_id = 2;
  if (this->user_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->user_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TGroupUserAdd::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:server.TGroupUserAdd)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const TGroupUserAdd* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TGroupUserAdd>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:server.TGroupUserAdd)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:server.TGroupUserAdd)
    UnsafeMergeFrom(*source);
  }
}

void TGroupUserAdd::MergeFrom(const TGroupUserAdd& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:server.TGroupUserAdd)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void TGroupUserAdd::UnsafeMergeFrom(const TGroupUserAdd& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.group_id().size() > 0) {

    group_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.group_id_);
  }
  if (from.user_id().size() > 0) {

    user_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.user_id_);
  }
}

void TGroupUserAdd::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:server.TGroupUserAdd)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TGroupUserAdd::CopyFrom(const TGroupUserAdd& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:server.TGroupUserAdd)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool TGroupUserAdd::IsInitialized() const {

  return true;
}

void TGroupUserAdd::Swap(TGroupUserAdd* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TGroupUserAdd::InternalSwap(TGroupUserAdd* other) {
  group_id_.Swap(&other->group_id_);
  user_id_.Swap(&other->user_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TGroupUserAdd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TGroupUserAdd_descriptor_;
  metadata.reflection = TGroupUserAdd_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TGroupUserAdd

// optional bytes group_id = 1;
void TGroupUserAdd::clear_group_id() {
  group_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& TGroupUserAdd::group_id() const {
  // @@protoc_insertion_point(field_get:server.TGroupUserAdd.group_id)
  return group_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TGroupUserAdd::set_group_id(const ::std::string& value) {
  
  group_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:server.TGroupUserAdd.group_id)
}
void TGroupUserAdd::set_group_id(const char* value) {
  
  group_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:server.TGroupUserAdd.group_id)
}
void TGroupUserAdd::set_group_id(const void* value, size_t size) {
  
  group_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:server.TGroupUserAdd.group_id)
}
::std::string* TGroupUserAdd::mutable_group_id() {
  
  // @@protoc_insertion_point(field_mutable:server.TGroupUserAdd.group_id)
  return group_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* TGroupUserAdd::release_group_id() {
  // @@protoc_insertion_point(field_release:server.TGroupUserAdd.group_id)
  
  return group_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TGroupUserAdd::set_allocated_group_id(::std::string* group_id) {
  if (group_id != NULL) {
    
  } else {
    
  }
  group_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), group_id);
  // @@protoc_insertion_point(field_set_allocated:server.TGroupUserAdd.group_id)
}

// optional bytes user_id = 2;
void TGroupUserAdd::clear_user_id() {
  user_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& TGroupUserAdd::user_id() const {
  // @@protoc_insertion_point(field_get:server.TGroupUserAdd.user_id)
  return user_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TGroupUserAdd::set_user_id(const ::std::string& value) {
  
  user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:server.TGroupUserAdd.user_id)
}
void TGroupUserAdd::set_user_id(const char* value) {
  
  user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:server.TGroupUserAdd.user_id)
}
void TGroupUserAdd::set_user_id(const void* value, size_t size) {
  
  user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:server.TGroupUserAdd.user_id)
}
::std::string* TGroupUserAdd::mutable_user_id() {
  
  // @@protoc_insertion_point(field_mutable:server.TGroupUserAdd.user_id)
  return user_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* TGroupUserAdd::release_user_id() {
  // @@protoc_insertion_point(field_release:server.TGroupUserAdd.user_id)
  
  return user_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TGroupUserAdd::set_allocated_user_id(::std::string* user_id) {
  if (user_id != NULL) {
    
  } else {
    
  }
  user_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), user_id);
  // @@protoc_insertion_point(field_set_allocated:server.TGroupUserAdd.user_id)
}

inline const TGroupUserAdd* TGroupUserAdd::internal_default_instance() {
  return &TGroupUserAdd_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TGroupUserKick::kGroupIdFieldNumber;
const int TGroupUserKick::kUserIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TGroupUserKick::TGroupUserKick()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_api_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:server.TGroupUserKick)
}

void TGroupUserKick::InitAsDefaultInstance() {
}

TGroupUserKick::TGroupUserKick(const TGroupUserKick& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:server.TGroupUserKick)
}

void TGroupUserKick::SharedCtor() {
  group_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  user_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

TGroupUserKick::~TGroupUserKick() {
  // @@protoc_insertion_point(destructor:server.TGroupUserKick)
  SharedDtor();
}

void TGroupUserKick::SharedDtor() {
  group_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  user_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void TGroupUserKick::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TGroupUserKick::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TGroupUserKick_descriptor_;
}

const TGroupUserKick& TGroupUserKick::default_instance() {
  protobuf_InitDefaults_api_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<TGroupUserKick> TGroupUserKick_default_instance_;

TGroupUserKick* TGroupUserKick::New(::google::protobuf::Arena* arena) const {
  TGroupUserKick* n = new TGroupUserKick;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TGroupUserKick::Clear() {
// @@protoc_insertion_point(message_clear_start:server.TGroupUserKick)
  group_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  user_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool TGroupUserKick::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:server.TGroupUserKick)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes group_id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_group_id()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_user_id;
        break;
      }

      // optional bytes user_id = 2;
      case 2: {
        if (tag == 18) {
         parse_user_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_user_id()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:server.TGroupUserKick)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:server.TGroupUserKick)
  return false;
#undef DO_
}

void TGroupUserKick::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:server.TGroupUserKick)
  // optional bytes group_id = 1;
  if (this->group_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->group_id(), output);
  }

  // optional bytes user_id = 2;
  if (this->user_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->user_id(), output);
  }

  // @@protoc_insertion_point(serialize_end:server.TGroupUserKick)
}

::google::protobuf::uint8* TGroupUserKick::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:server.TGroupUserKick)
  // optional bytes group_id = 1;
  if (this->group_id().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->group_id(), target);
  }

  // optional bytes user_id = 2;
  if (this->user_id().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->user_id(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:server.TGroupUserKick)
  return target;
}

size_t TGroupUserKick::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:server.TGroupUserKick)
  size_t total_size = 0;

  // optional bytes group_id = 1;
  if (this->group_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->group_id());
  }

  // optional bytes user_id = 2;
  if (this->user_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->user_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TGroupUserKick::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:server.TGroupUserKick)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const TGroupUserKick* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TGroupUserKick>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:server.TGroupUserKick)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:server.TGroupUserKick)
    UnsafeMergeFrom(*source);
  }
}

void TGroupUserKick::MergeFrom(const TGroupUserKick& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:server.TGroupUserKick)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void TGroupUserKick::UnsafeMergeFrom(const TGroupUserKick& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.group_id().size() > 0) {

    group_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.group_id_);
  }
  if (from.user_id().size() > 0) {

    user_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.user_id_);
  }
}

void TGroupUserKick::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:server.TGroupUserKick)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TGroupUserKick::CopyFrom(const TGroupUserKick& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:server.TGroupUserKick)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool TGroupUserKick::IsInitialized() const {

  return true;
}

void TGroupUserKick::Swap(TGroupUserKick* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TGroupUserKick::InternalSwap(TGroupUserKick* other) {
  group_id_.Swap(&other->group_id_);
  user_id_.Swap(&other->user_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TGroupUserKick::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TGroupUserKick_descriptor_;
  metadata.reflection = TGroupUserKick_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TGroupUserKick

// optional bytes group_id = 1;
void TGroupUserKick::clear_group_id() {
  group_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& TGroupUserKick::group_id() const {
  // @@protoc_insertion_point(field_get:server.TGroupUserKick.group_id)
  return group_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TGroupUserKick::set_group_id(const ::std::string& value) {
  
  group_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:server.TGroupUserKick.group_id)
}
void TGroupUserKick::set_group_id(const char* value) {
  
  group_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:server.TGroupUserKick.group_id)
}
void TGroupUserKick::set_group_id(const void* value, size_t size) {
  
  group_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:server.TGroupUserKick.group_id)
}
::std::string* TGroupUserKick::mutable_group_id() {
  
  // @@protoc_insertion_point(field_mutable:server.TGroupUserKick.group_id)
  return group_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* TGroupUserKick::release_group_id() {
  // @@protoc_insertion_point(field_release:server.TGroupUserKick.group_id)
  
  return group_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TGroupUserKick::set_allocated_group_id(::std::string* group_id) {
  if (group_id != NULL) {
    
  } else {
    
  }
  group_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), group_id);
  // @@protoc_insertion_point(field_set_allocated:server.TGroupUserKick.group_id)
}

// optional bytes user_id = 2;
void TGroupUserKick::clear_user_id() {
  user_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& TGroupUserKick::user_id() const {
  // @@protoc_insertion_point(field_get:server.TGroupUserKick.user_id)
  return user_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TGroupUserKick::set_user_id(const ::std::string& value) {
  
  user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:server.TGroupUserKick.user_id)
}
void TGroupUserKick::set_user_id(const char* value) {
  
  user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:server.TGroupUserKick.user_id)
}
void TGroupUserKick::set_user_id(const void* value, size_t size) {
  
  user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:server.TGroupUserKick.user_id)
}
::std::string* TGroupUserKick::mutable_user_id() {
  
  // @@protoc_insertion_point(field_mutable:server.TGroupUserKick.user_id)
  return user_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* TGroupUserKick::release_user_id() {
  // @@protoc_insertion_point(field_release:server.TGroupUserKick.user_id)
  
  return user_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TGroupUserKick::set_allocated_user_id(::std::string* user_id) {
  if (user_id != NULL) {
    
  } else {
    
  }
  user_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), user_id);
  // @@protoc_insertion_point(field_set_allocated:server.TGroupUserKick.user_id)
}

inline const TGroupUserKick* TGroupUserKick::internal_default_instance() {
  return &TGroupUserKick_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TGroupUserPromote::kGroupIdFieldNumber;
const int TGroupUserPromote::kUserIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TGroupUserPromote::TGroupUserPromote()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_api_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:server.TGroupUserPromote)
}

void TGroupUserPromote::InitAsDefaultInstance() {
}

TGroupUserPromote::TGroupUserPromote(const TGroupUserPromote& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:server.TGroupUserPromote)
}

void TGroupUserPromote::SharedCtor() {
  group_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  user_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

TGroupUserPromote::~TGroupUserPromote() {
  // @@protoc_insertion_point(destructor:server.TGroupUserPromote)
  SharedDtor();
}

void TGroupUserPromote::SharedDtor() {
  group_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  user_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void TGroupUserPromote::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TGroupUserPromote::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TGroupUserPromote_descriptor_;
}

const TGroupUserPromote& TGroupUserPromote::default_instance() {
  protobuf_InitDefaults_api_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<TGroupUserPromote> TGroupUserPromote_default_instance_;

TGroupUserPromote* TGroupUserPromote::New(::google::protobuf::Arena* arena) const {
  TGroupUserPromote* n = new TGroupUserPromote;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TGroupUserPromote::Clear() {
// @@protoc_insertion_point(message_clear_start:server.TGroupUserPromote)
  group_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  user_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool TGroupUserPromote::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:server.TGroupUserPromote)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes group_id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_group_id()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_user_id;
        break;
      }

      // optional bytes user_id = 2;
      case 2: {
        if (tag == 18) {
         parse_user_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_user_id()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:server.TGroupUserPromote)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:server.TGroupUserPromote)
  return false;
#undef DO_
}

void TGroupUserPromote::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:server.TGroupUserPromote)
  // optional bytes group_id = 1;
  if (this->group_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->group_id(), output);
  }

  // optional bytes user_id = 2;
  if (this->user_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->user_id(), output);
  }

  // @@protoc_insertion_point(serialize_end:server.TGroupUserPromote)
}

::google::protobuf::uint8* TGroupUserPromote::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:server.TGroupUserPromote)
  // optional bytes group_id = 1;
  if (this->group_id().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->group_id(), target);
  }

  // optional bytes user_id = 2;
  if (this->user_id().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->user_id(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:server.TGroupUserPromote)
  return target;
}

size_t TGroupUserPromote::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:server.TGroupUserPromote)
  size_t total_size = 0;

  // optional bytes group_id = 1;
  if (this->group_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->group_id());
  }

  // optional bytes user_id = 2;
  if (this->user_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->user_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TGroupUserPromote::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:server.TGroupUserPromote)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const TGroupUserPromote* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TGroupUserPromote>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:server.TGroupUserPromote)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:server.TGroupUserPromote)
    UnsafeMergeFrom(*source);
  }
}

void TGroupUserPromote::MergeFrom(const TGroupUserPromote& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:server.TGroupUserPromote)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void TGroupUserPromote::UnsafeMergeFrom(const TGroupUserPromote& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.group_id().size() > 0) {

    group_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.group_id_);
  }
  if (from.user_id().size() > 0) {

    user_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.user_id_);
  }
}

void TGroupUserPromote::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:server.TGroupUserPromote)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TGroupUserPromote::CopyFrom(const TGroupUserPromote& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:server.TGroupUserPromote)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool TGroupUserPromote::IsInitialized() const {

  return true;
}

void TGroupUserPromote::Swap(TGroupUserPromote* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TGroupUserPromote::InternalSwap(TGroupUserPromote* other) {
  group_id_.Swap(&other->group_id_);
  user_id_.Swap(&other->user_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TGroupUserPromote::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TGroupUserPromote_descriptor_;
  metadata.reflection = TGroupUserPromote_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TGroupUserPromote

// optional bytes group_id = 1;
void TGroupUserPromote::clear_group_id() {
  group_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& TGroupUserPromote::group_id() const {
  // @@protoc_insertion_point(field_get:server.TGroupUserPromote.group_id)
  return group_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TGroupUserPromote::set_group_id(const ::std::string& value) {
  
  group_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:server.TGroupUserPromote.group_id)
}
void TGroupUserPromote::set_group_id(const char* value) {
  
  group_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:server.TGroupUserPromote.group_id)
}
void TGroupUserPromote::set_group_id(const void* value, size_t size) {
  
  group_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:server.TGroupUserPromote.group_id)
}
::std::string* TGroupUserPromote::mutable_group_id() {
  
  // @@protoc_insertion_point(field_mutable:server.TGroupUserPromote.group_id)
  return group_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* TGroupUserPromote::release_group_id() {
  // @@protoc_insertion_point(field_release:server.TGroupUserPromote.group_id)
  
  return group_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TGroupUserPromote::set_allocated_group_id(::std::string* group_id) {
  if (group_id != NULL) {
    
  } else {
    
  }
  group_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), group_id);
  // @@protoc_insertion_point(field_set_allocated:server.TGroupUserPromote.group_id)
}

// optional bytes user_id = 2;
void TGroupUserPromote::clear_user_id() {
  user_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& TGroupUserPromote::user_id() const {
  // @@protoc_insertion_point(field_get:server.TGroupUserPromote.user_id)
  return user_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TGroupUserPromote::set_user_id(const ::std::string& value) {
  
  user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:server.TGroupUserPromote.user_id)
}
void TGroupUserPromote::set_user_id(const char* value) {
  
  user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:server.TGroupUserPromote.user_id)
}
void TGroupUserPromote::set_user_id(const void* value, size_t size) {
  
  user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:server.TGroupUserPromote.user_id)
}
::std::string* TGroupUserPromote::mutable_user_id() {
  
  // @@protoc_insertion_point(field_mutable:server.TGroupUserPromote.user_id)
  return user_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* TGroupUserPromote::release_user_id() {
  // @@protoc_insertion_point(field_release:server.TGroupUserPromote.user_id)
  
  return user_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TGroupUserPromote::set_allocated_user_id(::std::string* user_id) {
  if (user_id != NULL) {
    
  } else {
    
  }
  user_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), user_id);
  // @@protoc_insertion_point(field_set_allocated:server.TGroupUserPromote.user_id)
}

inline const TGroupUserPromote* TGroupUserPromote::internal_default_instance() {
  return &TGroupUserPromote_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TopicId::kDmFieldNumber;
const int TopicId::kRoomFieldNumber;
const int TopicId::kGroupIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TopicId::TopicId()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_api_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:server.TopicId)
}

void TopicId::InitAsDefaultInstance() {
  TopicId_default_oneof_instance_->dm_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  TopicId_default_oneof_instance_->room_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  TopicId_default_oneof_instance_->group_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

TopicId::TopicId(const TopicId& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:server.TopicId)
}

void TopicId::SharedCtor() {
  clear_has_id();
  _cached_size_ = 0;
}

TopicId::~TopicId() {
  // @@protoc_insertion_point(destructor:server.TopicId)
  SharedDtor();
}

void TopicId::SharedDtor() {
  if (has_id()) {
    clear_id();
  }
}

void TopicId::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TopicId::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TopicId_descriptor_;
}

const TopicId& TopicId::default_instance() {
  protobuf_InitDefaults_api_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<TopicId> TopicId_default_instance_;

TopicId* TopicId::New(::google::protobuf::Arena* arena) const {
  TopicId* n = new TopicId;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TopicId::clear_id() {
// @@protoc_insertion_point(one_of_clear_start:server.TopicId)
  switch (id_case()) {
    case kDm: {
      id_.dm_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
      break;
    }
    case kRoom: {
      id_.room_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
      break;
    }
    case kGroupId: {
      id_.group_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
      break;
    }
    case ID_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = ID_NOT_SET;
}


void TopicId::Clear() {
// @@protoc_insertion_point(message_clear_start:server.TopicId)
  clear_id();
}

bool TopicId::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:server.TopicId)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes dm = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_dm()));
        } else {
          goto handle_unusual;
        }
        goto after_group_id;
        break;
      }

      // optional bytes room = 2;
      case 2: {
        if (tag == 18) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_room()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_group_id;
        break;
      }

      // optional bytes group_id = 3;
      case 3: {
        if (tag == 26) {
         parse_group_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_group_id()));
        } else {
          goto handle_unusual;
        }
       after_group_id:
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:server.TopicId)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:server.TopicId)
  return false;
#undef DO_
}

void TopicId::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:server.TopicId)
  // optional bytes dm = 1;
  if (has_dm()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->dm(), output);
  }

  // optional bytes room = 2;
  if (has_room()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->room(), output);
  }

  // optional bytes group_id = 3;
  if (has_group_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->group_id(), output);
  }

  // @@protoc_insertion_point(serialize_end:server.TopicId)
}

::google::protobuf::uint8* TopicId::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:server.TopicId)
  // optional bytes dm = 1;
  if (has_dm()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->dm(), target);
  }

  // optional bytes room = 2;
  if (has_room()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->room(), target);
  }

  // optional bytes group_id = 3;
  if (has_group_id()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->group_id(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:server.TopicId)
  return target;
}

size_t TopicId::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:server.TopicId)
  size_t total_size = 0;

  switch (id_case()) {
    // optional bytes dm = 1;
    case kDm: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->dm());
      break;
    }
    // optional bytes room = 2;
    case kRoom: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->room());
      break;
    }
    // optional bytes group_id = 3;
    case kGroupId: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->group_id());
      break;
    }
    case ID_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TopicId::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:server.TopicId)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const TopicId* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TopicId>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:server.TopicId)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:server.TopicId)
    UnsafeMergeFrom(*source);
  }
}

void TopicId::MergeFrom(const TopicId& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:server.TopicId)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void TopicId::UnsafeMergeFrom(const TopicId& from) {
  GOOGLE_DCHECK(&from != this);
  switch (from.id_case()) {
    case kDm: {
      set_dm(from.dm());
      break;
    }
    case kRoom: {
      set_room(from.room());
      break;
    }
    case kGroupId: {
      set_group_id(from.group_id());
      break;
    }
    case ID_NOT_SET: {
      break;
    }
  }
}

void TopicId::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:server.TopicId)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TopicId::CopyFrom(const TopicId& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:server.TopicId)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool TopicId::IsInitialized() const {

  return true;
}

void TopicId::Swap(TopicId* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TopicId::InternalSwap(TopicId* other) {
  std::swap(id_, other->id_);
  std::swap(_oneof_case_[0], other->_oneof_case_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TopicId::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TopicId_descriptor_;
  metadata.reflection = TopicId_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TopicId

// optional bytes dm = 1;
bool TopicId::has_dm() const {
  return id_case() == kDm;
}
void TopicId::set_has_dm() {
  _oneof_case_[0] = kDm;
}
void TopicId::clear_dm() {
  if (has_dm()) {
    id_.dm_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_id();
  }
}
const ::std::string& TopicId::dm() const {
  // @@protoc_insertion_point(field_get:server.TopicId.dm)
  if (has_dm()) {
    return id_.dm_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
void TopicId::set_dm(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:server.TopicId.dm)
  if (!has_dm()) {
    clear_id();
    set_has_dm();
    id_.dm_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  id_.dm_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:server.TopicId.dm)
}
void TopicId::set_dm(const char* value) {
  if (!has_dm()) {
    clear_id();
    set_has_dm();
    id_.dm_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  id_.dm_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:server.TopicId.dm)
}
void TopicId::set_dm(const void* value, size_t size) {
  if (!has_dm()) {
    clear_id();
    set_has_dm();
    id_.dm_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  id_.dm_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:server.TopicId.dm)
}
::std::string* TopicId::mutable_dm() {
  if (!has_dm()) {
    clear_id();
    set_has_dm();
    id_.dm_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:server.TopicId.dm)
  return id_.dm_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* TopicId::release_dm() {
  // @@protoc_insertion_point(field_release:server.TopicId.dm)
  if (has_dm()) {
    clear_has_id();
    return id_.dm_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return NULL;
  }
}
void TopicId::set_allocated_dm(::std::string* dm) {
  if (!has_dm()) {
    id_.dm_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_id();
  if (dm != NULL) {
    set_has_dm();
    id_.dm_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        dm);
  }
  // @@protoc_insertion_point(field_set_allocated:server.TopicId.dm)
}

// optional bytes room = 2;
bool TopicId::has_room() const {
  return id_case() == kRoom;
}
void TopicId::set_has_room() {
  _oneof_case_[0] = kRoom;
}
void TopicId::clear_room() {
  if (has_room()) {
    id_.room_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_id();
  }
}
const ::std::string& TopicId::room() const {
  // @@protoc_insertion_point(field_get:server.TopicId.room)
  if (has_room()) {
    return id_.room_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
void TopicId::set_room(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:server.TopicId.room)
  if (!has_room()) {
    clear_id();
    set_has_room();
    id_.room_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  id_.room_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:server.TopicId.room)
}
void TopicId::set_room(const char* value) {
  if (!has_room()) {
    clear_id();
    set_has_room();
    id_.room_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  id_.room_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:server.TopicId.room)
}
void TopicId::set_room(const void* value, size_t size) {
  if (!has_room()) {
    clear_id();
    set_has_room();
    id_.room_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  id_.room_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:server.TopicId.room)
}
::std::string* TopicId::mutable_room() {
  if (!has_room()) {
    clear_id();
    set_has_room();
    id_.room_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:server.TopicId.room)
  return id_.room_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* TopicId::release_room() {
  // @@protoc_insertion_point(field_release:server.TopicId.room)
  if (has_room()) {
    clear_has_id();
    return id_.room_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return NULL;
  }
}
void TopicId::set_allocated_room(::std::string* room) {
  if (!has_room()) {
    id_.room_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_id();
  if (room != NULL) {
    set_has_room();
    id_.room_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        room);
  }
  // @@protoc_insertion_point(field_set_allocated:server.TopicId.room)
}

// optional bytes group_id = 3;
bool TopicId::has_group_id() const {
  return id_case() == kGroupId;
}
void TopicId::set_has_group_id() {
  _oneof_case_[0] = kGroupId;
}
void TopicId::clear_group_id() {
  if (has_group_id()) {
    id_.group_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_id();
  }
}
const ::std::string& TopicId::group_id() const {
  // @@protoc_insertion_point(field_get:server.TopicId.group_id)
  if (has_group_id()) {
    return id_.group_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
void TopicId::set_group_id(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:server.TopicId.group_id)
  if (!has_group_id()) {
    clear_id();
    set_has_group_id();
    id_.group_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  id_.group_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:server.TopicId.group_id)
}
void TopicId::set_group_id(const char* value) {
  if (!has_group_id()) {
    clear_id();
    set_has_group_id();
    id_.group_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  id_.group_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:server.TopicId.group_id)
}
void TopicId::set_group_id(const void* value, size_t size) {
  if (!has_group_id()) {
    clear_id();
    set_has_group_id();
    id_.group_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  id_.group_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:server.TopicId.group_id)
}
::std::string* TopicId::mutable_group_id() {
  if (!has_group_id()) {
    clear_id();
    set_has_group_id();
    id_.group_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:server.TopicId.group_id)
  return id_.group_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* TopicId::release_group_id() {
  // @@protoc_insertion_point(field_release:server.TopicId.group_id)
  if (has_group_id()) {
    clear_has_id();
    return id_.group_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return NULL;
  }
}
void TopicId::set_allocated_group_id(::std::string* group_id) {
  if (!has_group_id()) {
    id_.group_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_id();
  if (group_id != NULL) {
    set_has_group_id();
    id_.group_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        group_id);
  }
  // @@protoc_insertion_point(field_set_allocated:server.TopicId.group_id)
}

bool TopicId::has_id() const {
  return id_case() != ID_NOT_SET;
}
void TopicId::clear_has_id() {
  _oneof_case_[0] = ID_NOT_SET;
}
TopicId::IdCase TopicId::id_case() const {
  return TopicId::IdCase(_oneof_case_[0]);
}
inline const TopicId* TopicId::internal_default_instance() {
  return &TopicId_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UserPresence::kUserIdFieldNumber;
const int UserPresence::kSessionIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UserPresence::UserPresence()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_api_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:server.UserPresence)
}

void UserPresence::InitAsDefaultInstance() {
}

UserPresence::UserPresence(const UserPresence& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:server.UserPresence)
}

void UserPresence::SharedCtor() {
  user_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  session_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

UserPresence::~UserPresence() {
  // @@protoc_insertion_point(destructor:server.UserPresence)
  SharedDtor();
}

void UserPresence::SharedDtor() {
  user_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  session_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void UserPresence::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UserPresence::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UserPresence_descriptor_;
}

const UserPresence& UserPresence::default_instance() {
  protobuf_InitDefaults_api_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<UserPresence> UserPresence_default_instance_;

UserPresence* UserPresence::New(::google::protobuf::Arena* arena) const {
  UserPresence* n = new UserPresence;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void UserPresence::Clear() {
// @@protoc_insertion_point(message_clear_start:server.UserPresence)
  user_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  session_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool UserPresence::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:server.UserPresence)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes user_id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_user_id()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_session_id;
        break;
      }

      // optional bytes session_id = 2;
      case 2: {
        if (tag == 18) {
         parse_session_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_session_id()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:server.UserPresence)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:server.UserPresence)
  return false;
#undef DO_
}

void UserPresence::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:server.UserPresence)
  // optional bytes user_id = 1;
  if (this->user_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->user_id(), output);
  }

  // optional bytes session_id = 2;
  if (this->session_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->session_id(), output);
  }

  // @@protoc_insertion_point(serialize_end:server.UserPresence)
}

::google::protobuf::uint8* UserPresence::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:server.UserPresence)
  // optional bytes user_id = 1;
  if (this->user_id().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->user_id(), target);
  }

  // optional bytes session_id = 2;
  if (this->session_id().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->session_id(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:server.UserPresence)
  return target;
}

size_t UserPresence::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:server.UserPresence)
  size_t total_size = 0;

  // optional bytes user_id = 1;
  if (this->user_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->user_id());
  }

  // optional bytes session_id = 2;
  if (this->session_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->session_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserPresence::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:server.UserPresence)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const UserPresence* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const UserPresence>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:server.UserPresence)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:server.UserPresence)
    UnsafeMergeFrom(*source);
  }
}

void UserPresence::MergeFrom(const UserPresence& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:server.UserPresence)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void UserPresence::UnsafeMergeFrom(const UserPresence& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.user_id().size() > 0) {

    user_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.user_id_);
  }
  if (from.session_id().size() > 0) {

    session_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.session_id_);
  }
}

void UserPresence::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:server.UserPresence)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserPresence::CopyFrom(const UserPresence& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:server.UserPresence)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool UserPresence::IsInitialized() const {

  return true;
}

void UserPresence::Swap(UserPresence* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UserPresence::InternalSwap(UserPresence* other) {
  user_id_.Swap(&other->user_id_);
  session_id_.Swap(&other->session_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata UserPresence::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UserPresence_descriptor_;
  metadata.reflection = UserPresence_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// UserPresence

// optional bytes user_id = 1;
void UserPresence::clear_user_id() {
  user_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& UserPresence::user_id() const {
  // @@protoc_insertion_point(field_get:server.UserPresence.user_id)
  return user_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void UserPresence::set_user_id(const ::std::string& value) {
  
  user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:server.UserPresence.user_id)
}
void UserPresence::set_user_id(const char* value) {
  
  user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:server.UserPresence.user_id)
}
void UserPresence::set_user_id(const void* value, size_t size) {
  
  user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:server.UserPresence.user_id)
}
::std::string* UserPresence::mutable_user_id() {
  
  // @@protoc_insertion_point(field_mutable:server.UserPresence.user_id)
  return user_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* UserPresence::release_user_id() {
  // @@protoc_insertion_point(field_release:server.UserPresence.user_id)
  
  return user_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void UserPresence::set_allocated_user_id(::std::string* user_id) {
  if (user_id != NULL) {
    
  } else {
    
  }
  user_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), user_id);
  // @@protoc_insertion_point(field_set_allocated:server.UserPresence.user_id)
}

// optional bytes session_id = 2;
void UserPresence::clear_session_id() {
  session_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& UserPresence::session_id() const {
  // @@protoc_insertion_point(field_get:server.UserPresence.session_id)
  return session_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void UserPresence::set_session_id(const ::std::string& value) {
  
  session_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:server.UserPresence.session_id)
}
void UserPresence::set_session_id(const char* value) {
  
  session_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:server.UserPresence.session_id)
}
void UserPresence::set_session_id(const void* value, size_t size) {
  
  session_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:server.UserPresence.session_id)
}
::std::string* UserPresence::mutable_session_id() {
  
  // @@protoc_insertion_point(field_mutable:server.UserPresence.session_id)
  return session_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* UserPresence::release_session_id() {
  // @@protoc_insertion_point(field_release:server.UserPresence.session_id)
  
  return session_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void UserPresence::set_allocated_session_id(::std::string* session_id) {
  if (session_id != NULL) {
    
  } else {
    
  }
  session_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), session_id);
  // @@protoc_insertion_point(field_set_allocated:server.UserPresence.session_id)
}

inline const UserPresence* UserPresence::internal_default_instance() {
  return &UserPresence_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TTopicJoin::kUserIdFieldNumber;
const int TTopicJoin::kRoomFieldNumber;
const int TTopicJoin::kGroupIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TTopicJoin::TTopicJoin()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_api_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:server.TTopicJoin)
}

void TTopicJoin::InitAsDefaultInstance() {
  TTopicJoin_default_oneof_instance_->user_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  TTopicJoin_default_oneof_instance_->room_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  TTopicJoin_default_oneof_instance_->group_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

TTopicJoin::TTopicJoin(const TTopicJoin& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:server.TTopicJoin)
}

void TTopicJoin::SharedCtor() {
  clear_has_id();
  _cached_size_ = 0;
}

TTopicJoin::~TTopicJoin() {
  // @@protoc_insertion_point(destructor:server.TTopicJoin)
  SharedDtor();
}

void TTopicJoin::SharedDtor() {
  if (has_id()) {
    clear_id();
  }
}

void TTopicJoin::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TTopicJoin::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TTopicJoin_descriptor_;
}

const TTopicJoin& TTopicJoin::default_instance() {
  protobuf_InitDefaults_api_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<TTopicJoin> TTopicJoin_default_instance_;

TTopicJoin* TTopicJoin::New(::google::protobuf::Arena* arena) const {
  TTopicJoin* n = new TTopicJoin;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TTopicJoin::clear_id() {
// @@protoc_insertion_point(one_of_clear_start:server.TTopicJoin)
  switch (id_case()) {
    case kUserId: {
      id_.user_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
      break;
    }
    case kRoom: {
      id_.room_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
      break;
    }
    case kGroupId: {
      id_.group_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
      break;
    }
    case ID_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = ID_NOT_SET;
}


void TTopicJoin::Clear() {
// @@protoc_insertion_point(message_clear_start:server.TTopicJoin)
  clear_id();
}

bool TTopicJoin::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:server.TTopicJoin)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes user_id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_user_id()));
        } else {
          goto handle_unusual;
        }
        goto after_group_id;
        break;
      }

      // optional bytes room = 2;
      case 2: {
        if (tag == 18) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_room()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_group_id;
        break;
      }

      // optional bytes group_id = 3;
      case 3: {
        if (tag == 26) {
         parse_group_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_group_id()));
        } else {
          goto handle_unusual;
        }
       after_group_id:
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:server.TTopicJoin)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:server.TTopicJoin)
  return false;
#undef DO_
}

void TTopicJoin::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:server.TTopicJoin)
  // optional bytes user_id = 1;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->user_id(), output);
  }

  // optional bytes room = 2;
  if (has_room()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->room(), output);
  }

  // optional bytes group_id = 3;
  if (has_group_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->group_id(), output);
  }

  // @@protoc_insertion_point(serialize_end:server.TTopicJoin)
}

::google::protobuf::uint8* TTopicJoin::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:server.TTopicJoin)
  // optional bytes user_id = 1;
  if (has_user_id()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->user_id(), target);
  }

  // optional bytes room = 2;
  if (has_room()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->room(), target);
  }

  // optional bytes group_id = 3;
  if (has_group_id()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->group_id(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:server.TTopicJoin)
  return target;
}

size_t TTopicJoin::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:server.TTopicJoin)
  size_t total_size = 0;

  switch (id_case()) {
    // optional bytes user_id = 1;
    case kUserId: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->user_id());
      break;
    }
    // optional bytes room = 2;
    case kRoom: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->room());
      break;
    }
    // optional bytes group_id = 3;
    case kGroupId: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->group_id());
      break;
    }
    case ID_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TTopicJoin::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:server.TTopicJoin)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const TTopicJoin* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TTopicJoin>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:server.TTopicJoin)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:server.TTopicJoin)
    UnsafeMergeFrom(*source);
  }
}

void TTopicJoin::MergeFrom(const TTopicJoin& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:server.TTopicJoin)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void TTopicJoin::UnsafeMergeFrom(const TTopicJoin& from) {
  GOOGLE_DCHECK(&from != this);
  switch (from.id_case()) {
    case kUserId: {
      set_user_id(from.user_id());
      break;
    }
    case kRoom: {
      set_room(from.room());
      break;
    }
    case kGroupId: {
      set_group_id(from.group_id());
      break;
    }
    case ID_NOT_SET: {
      break;
    }
  }
}

void TTopicJoin::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:server.TTopicJoin)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TTopicJoin::CopyFrom(const TTopicJoin& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:server.TTopicJoin)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool TTopicJoin::IsInitialized() const {

  return true;
}

void TTopicJoin::Swap(TTopicJoin* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TTopicJoin::InternalSwap(TTopicJoin* other) {
  std::swap(id_, other->id_);
  std::swap(_oneof_case_[0], other->_oneof_case_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TTopicJoin::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TTopicJoin_descriptor_;
  metadata.reflection = TTopicJoin_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TTopicJoin

// optional bytes user_id = 1;
bool TTopicJoin::has_user_id() const {
  return id_case() == kUserId;
}
void TTopicJoin::set_has_user_id() {
  _oneof_case_[0] = kUserId;
}
void TTopicJoin::clear_user_id() {
  if (has_user_id()) {
    id_.user_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_id();
  }
}
const ::std::string& TTopicJoin::user_id() const {
  // @@protoc_insertion_point(field_get:server.TTopicJoin.user_id)
  if (has_user_id()) {
    return id_.user_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
void TTopicJoin::set_user_id(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:server.TTopicJoin.user_id)
  if (!has_user_id()) {
    clear_id();
    set_has_user_id();
    id_.user_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  id_.user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:server.TTopicJoin.user_id)
}
void TTopicJoin::set_user_id(const char* value) {
  if (!has_user_id()) {
    clear_id();
    set_has_user_id();
    id_.user_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  id_.user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:server.TTopicJoin.user_id)
}
void TTopicJoin::set_user_id(const void* value, size_t size) {
  if (!has_user_id()) {
    clear_id();
    set_has_user_id();
    id_.user_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  id_.user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:server.TTopicJoin.user_id)
}
::std::string* TTopicJoin::mutable_user_id() {
  if (!has_user_id()) {
    clear_id();
    set_has_user_id();
    id_.user_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:server.TTopicJoin.user_id)
  return id_.user_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* TTopicJoin::release_user_id() {
  // @@protoc_insertion_point(field_release:server.TTopicJoin.user_id)
  if (has_user_id()) {
    clear_has_id();
    return id_.user_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return NULL;
  }
}
void TTopicJoin::set_allocated_user_id(::std::string* user_id) {
  if (!has_user_id()) {
    id_.user_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_id();
  if (user_id != NULL) {
    set_has_user_id();
    id_.user_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        user_id);
  }
  // @@protoc_insertion_point(field_set_allocated:server.TTopicJoin.user_id)
}

// optional bytes room = 2;
bool TTopicJoin::has_room() const {
  return id_case() == kRoom;
}
void TTopicJoin::set_has_room() {
  _oneof_case_[0] = kRoom;
}
void TTopicJoin::clear_room() {
  if (has_room()) {
    id_.room_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_id();
  }
}
const ::std::string& TTopicJoin::room() const {
  // @@protoc_insertion_point(field_get:server.TTopicJoin.room)
  if (has_room()) {
    return id_.room_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
void TTopicJoin::set_room(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:server.TTopicJoin.room)
  if (!has_room()) {
    clear_id();
    set_has_room();
    id_.room_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  id_.room_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:server.TTopicJoin.room)
}
void TTopicJoin::set_room(const char* value) {
  if (!has_room()) {
    clear_id();
    set_has_room();
    id_.room_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  id_.room_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:server.TTopicJoin.room)
}
void TTopicJoin::set_room(const void* value, size_t size) {
  if (!has_room()) {
    clear_id();
    set_has_room();
    id_.room_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  id_.room_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:server.TTopicJoin.room)
}
::std::string* TTopicJoin::mutable_room() {
  if (!has_room()) {
    clear_id();
    set_has_room();
    id_.room_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:server.TTopicJoin.room)
  return id_.room_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* TTopicJoin::release_room() {
  // @@protoc_insertion_point(field_release:server.TTopicJoin.room)
  if (has_room()) {
    clear_has_id();
    return id_.room_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return NULL;
  }
}
void TTopicJoin::set_allocated_room(::std::string* room) {
  if (!has_room()) {
    id_.room_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_id();
  if (room != NULL) {
    set_has_room();
    id_.room_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        room);
  }
  // @@protoc_insertion_point(field_set_allocated:server.TTopicJoin.room)
}

// optional bytes group_id = 3;
bool TTopicJoin::has_group_id() const {
  return id_case() == kGroupId;
}
void TTopicJoin::set_has_group_id() {
  _oneof_case_[0] = kGroupId;
}
void TTopicJoin::clear_group_id() {
  if (has_group_id()) {
    id_.group_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_id();
  }
}
const ::std::string& TTopicJoin::group_id() const {
  // @@protoc_insertion_point(field_get:server.TTopicJoin.group_id)
  if (has_group_id()) {
    return id_.group_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
void TTopicJoin::set_group_id(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:server.TTopicJoin.group_id)
  if (!has_group_id()) {
    clear_id();
    set_has_group_id();
    id_.group_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  id_.group_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:server.TTopicJoin.group_id)
}
void TTopicJoin::set_group_id(const char* value) {
  if (!has_group_id()) {
    clear_id();
    set_has_group_id();
    id_.group_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  id_.group_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:server.TTopicJoin.group_id)
}
void TTopicJoin::set_group_id(const void* value, size_t size) {
  if (!has_group_id()) {
    clear_id();
    set_has_group_id();
    id_.group_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  id_.group_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:server.TTopicJoin.group_id)
}
::std::string* TTopicJoin::mutable_group_id() {
  if (!has_group_id()) {
    clear_id();
    set_has_group_id();
    id_.group_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:server.TTopicJoin.group_id)
  return id_.group_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* TTopicJoin::release_group_id() {
  // @@protoc_insertion_point(field_release:server.TTopicJoin.group_id)
  if (has_group_id()) {
    clear_has_id();
    return id_.group_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return NULL;
  }
}
void TTopicJoin::set_allocated_group_id(::std::string* group_id) {
  if (!has_group_id()) {
    id_.group_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_id();
  if (group_id != NULL) {
    set_has_group_id();
    id_.group_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        group_id);
  }
  // @@protoc_insertion_point(field_set_allocated:server.TTopicJoin.group_id)
}

bool TTopicJoin::has_id() const {
  return id_case() != ID_NOT_SET;
}
void TTopicJoin::clear_has_id() {
  _oneof_case_[0] = ID_NOT_SET;
}
TTopicJoin::IdCase TTopicJoin::id_case() const {
  return TTopicJoin::IdCase(_oneof_case_[0]);
}
inline const TTopicJoin* TTopicJoin::internal_default_instance() {
  return &TTopicJoin_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TTopic::kTopicFieldNumber;
const int TTopic::kPresencesFieldNumber;
const int TTopic::kSelfFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TTopic::TTopic()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_api_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:server.TTopic)
}

void TTopic::InitAsDefaultInstance() {
  topic_ = const_cast< ::server::TopicId*>(
      ::server::TopicId::internal_default_instance());
  self_ = const_cast< ::server::UserPresence*>(
      ::server::UserPresence::internal_default_instance());
}

TTopic::TTopic(const TTopic& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:server.TTopic)
}

void TTopic::SharedCtor() {
  topic_ = NULL;
  self_ = NULL;
  _cached_size_ = 0;
}

TTopic::~TTopic() {
  // @@protoc_insertion_point(destructor:server.TTopic)
  SharedDtor();
}

void TTopic::SharedDtor() {
  if (this != &TTopic_default_instance_.get()) {
    delete topic_;
    delete self_;
  }
}

void TTopic::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TTopic::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TTopic_descriptor_;
}

const TTopic& TTopic::default_instance() {
  protobuf_InitDefaults_api_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<TTopic> TTopic_default_instance_;

TTopic* TTopic::New(::google::protobuf::Arena* arena) const {
  TTopic* n = new TTopic;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TTopic::Clear() {
// @@protoc_insertion_point(message_clear_start:server.TTopic)
  if (GetArenaNoVirtual() == NULL && topic_ != NULL) delete topic_;
  topic_ = NULL;
  if (GetArenaNoVirtual() == NULL && self_ != NULL) delete self_;
  self_ = NULL;
  presences_.Clear();
}

bool TTopic::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:server.TTopic)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .server.TopicId topic = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_topic()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_presences;
        break;
      }

      // repeated .server.UserPresence presences = 2;
      case 2: {
        if (tag == 18) {
         parse_presences:
          DO_(input->IncrementRecursionDepth());
         parse_loop_presences:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_presences()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_loop_presences;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(26)) goto parse_self;
        break;
      }

      // optional .server.UserPresence self = 3;
      case 3: {
        if (tag == 26) {
         parse_self:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_self()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:server.TTopic)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:server.TTopic)
  return false;
#undef DO_
}

void TTopic::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:server.TTopic)
  // optional .server.TopicId topic = 1;
  if (this->has_topic()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->topic_, output);
  }

  // repeated .server.UserPresence presences = 2;
  for (unsigned int i = 0, n = this->presences_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->presences(i), output);
  }

  // optional .server.UserPresence self = 3;
  if (this->has_self()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->self_, output);
  }

  // @@protoc_insertion_point(serialize_end:server.TTopic)
}

::google::protobuf::uint8* TTopic::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:server.TTopic)
  // optional .server.TopicId topic = 1;
  if (this->has_topic()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->topic_, false, target);
  }

  // repeated .server.UserPresence presences = 2;
  for (unsigned int i = 0, n = this->presences_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->presences(i), false, target);
  }

  // optional .server.UserPresence self = 3;
  if (this->has_self()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->self_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:server.TTopic)
  return target;
}

size_t TTopic::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:server.TTopic)
  size_t total_size = 0;

  // optional .server.TopicId topic = 1;
  if (this->has_topic()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->topic_);
  }

  // optional .server.UserPresence self = 3;
  if (this->has_self()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->self_);
  }

  // repeated .server.UserPresence presences = 2;
  {
    unsigned int count = this->presences_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->presences(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TTopic::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:server.TTopic)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const TTopic* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TTopic>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:server.TTopic)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:server.TTopic)
    UnsafeMergeFrom(*source);
  }
}

void TTopic::MergeFrom(const TTopic& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:server.TTopic)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void TTopic::UnsafeMergeFrom(const TTopic& from) {
  GOOGLE_DCHECK(&from != this);
  presences_.MergeFrom(from.presences_);
  if (from.has_topic()) {
    mutable_topic()->::server::TopicId::MergeFrom(from.topic());
  }
  if (from.has_self()) {
    mutable_self()->::server::UserPresence::MergeFrom(from.self());
  }
}

void TTopic::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:server.TTopic)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TTopic::CopyFrom(const TTopic& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:server.TTopic)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool TTopic::IsInitialized() const {

  return true;
}

void TTopic::Swap(TTopic* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TTopic::InternalSwap(TTopic* other) {
  std::swap(topic_, other->topic_);
  presences_.UnsafeArenaSwap(&other->presences_);
  std::swap(self_, other->self_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TTopic::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TTopic_descriptor_;
  metadata.reflection = TTopic_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TTopic

// optional .server.TopicId topic = 1;
bool TTopic::has_topic() const {
  return this != internal_default_instance() && topic_ != NULL;
}
void TTopic::clear_topic() {
  if (GetArenaNoVirtual() == NULL && topic_ != NULL) delete topic_;
  topic_ = NULL;
}
const ::server::TopicId& TTopic::topic() const {
  // @@protoc_insertion_point(field_get:server.TTopic.topic)
  return topic_ != NULL ? *topic_
                         : *::server::TopicId::internal_default_instance();
}
::server::TopicId* TTopic::mutable_topic() {
  
  if (topic_ == NULL) {
    topic_ = new ::server::TopicId;
  }
  // @@protoc_insertion_point(field_mutable:server.TTopic.topic)
  return topic_;
}
::server::TopicId* TTopic::release_topic() {
  // @@protoc_insertion_point(field_release:server.TTopic.topic)
  
  ::server::TopicId* temp = topic_;
  topic_ = NULL;
  return temp;
}
void TTopic::set_allocated_topic(::server::TopicId* topic) {
  delete topic_;
  topic_ = topic;
  if (topic) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:server.TTopic.topic)
}

// repeated .server.UserPresence presences = 2;
int TTopic::presences_size() const {
  return presences_.size();
}
void TTopic::clear_presences() {
  presences_.Clear();
}
const ::server::UserPresence& TTopic::presences(int index) const {
  // @@protoc_insertion_point(field_get:server.TTopic.presences)
  return presences_.Get(index);
}
::server::UserPresence* TTopic::mutable_presences(int index) {
  // @@protoc_insertion_point(field_mutable:server.TTopic.presences)
  return presences_.Mutable(index);
}
::server::UserPresence* TTopic::add_presences() {
  // @@protoc_insertion_point(field_add:server.TTopic.presences)
  return presences_.Add();
}
::google::protobuf::RepeatedPtrField< ::server::UserPresence >*
TTopic::mutable_presences() {
  // @@protoc_insertion_point(field_mutable_list:server.TTopic.presences)
  return &presences_;
}
const ::google::protobuf::RepeatedPtrField< ::server::UserPresence >&
TTopic::presences() const {
  // @@protoc_insertion_point(field_list:server.TTopic.presences)
  return presences_;
}

// optional .server.UserPresence self = 3;
bool TTopic::has_self() const {
  return this != internal_default_instance() && self_ != NULL;
}
void TTopic::clear_self() {
  if (GetArenaNoVirtual() == NULL && self_ != NULL) delete self_;
  self_ = NULL;
}
const ::server::UserPresence& TTopic::self() const {
  // @@protoc_insertion_point(field_get:server.TTopic.self)
  return self_ != NULL ? *self_
                         : *::server::UserPresence::internal_default_instance();
}
::server::UserPresence* TTopic::mutable_self() {
  
  if (self_ == NULL) {
    self_ = new ::server::UserPresence;
  }
  // @@protoc_insertion_point(field_mutable:server.TTopic.self)
  return self_;
}
::server::UserPresence* TTopic::release_self() {
  // @@protoc_insertion_point(field_release:server.TTopic.self)
  
  ::server::UserPresence* temp = self_;
  self_ = NULL;
  return temp;
}
void TTopic::set_allocated_self(::server::UserPresence* self) {
  delete self_;
  self_ = self;
  if (self) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:server.TTopic.self)
}

inline const TTopic* TTopic::internal_default_instance() {
  return &TTopic_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TTopicLeave::kTopicFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TTopicLeave::TTopicLeave()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_api_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:server.TTopicLeave)
}

void TTopicLeave::InitAsDefaultInstance() {
  topic_ = const_cast< ::server::TopicId*>(
      ::server::TopicId::internal_default_instance());
}

TTopicLeave::TTopicLeave(const TTopicLeave& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:server.TTopicLeave)
}

void TTopicLeave::SharedCtor() {
  topic_ = NULL;
  _cached_size_ = 0;
}

TTopicLeave::~TTopicLeave() {
  // @@protoc_insertion_point(destructor:server.TTopicLeave)
  SharedDtor();
}

void TTopicLeave::SharedDtor() {
  if (this != &TTopicLeave_default_instance_.get()) {
    delete topic_;
  }
}

void TTopicLeave::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TTopicLeave::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TTopicLeave_descriptor_;
}

const TTopicLeave& TTopicLeave::default_instance() {
  protobuf_InitDefaults_api_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<TTopicLeave> TTopicLeave_default_instance_;

TTopicLeave* TTopicLeave::New(::google::protobuf::Arena* arena) const {
  TTopicLeave* n = new TTopicLeave;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TTopicLeave::Clear() {
// @@protoc_insertion_point(message_clear_start:server.TTopicLeave)
  if (GetArenaNoVirtual() == NULL && topic_ != NULL) delete topic_;
  topic_ = NULL;
}

bool TTopicLeave::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:server.TTopicLeave)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .server.TopicId topic = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_topic()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:server.TTopicLeave)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:server.TTopicLeave)
  return false;
#undef DO_
}

void TTopicLeave::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:server.TTopicLeave)
  // optional .server.TopicId topic = 1;
  if (this->has_topic()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->topic_, output);
  }

  // @@protoc_insertion_point(serialize_end:server.TTopicLeave)
}

::google::protobuf::uint8* TTopicLeave::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:server.TTopicLeave)
  // optional .server.TopicId topic = 1;
  if (this->has_topic()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->topic_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:server.TTopicLeave)
  return target;
}

size_t TTopicLeave::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:server.TTopicLeave)
  size_t total_size = 0;

  // optional .server.TopicId topic = 1;
  if (this->has_topic()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->topic_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TTopicLeave::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:server.TTopicLeave)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const TTopicLeave* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TTopicLeave>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:server.TTopicLeave)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:server.TTopicLeave)
    UnsafeMergeFrom(*source);
  }
}

void TTopicLeave::MergeFrom(const TTopicLeave& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:server.TTopicLeave)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void TTopicLeave::UnsafeMergeFrom(const TTopicLeave& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.has_topic()) {
    mutable_topic()->::server::TopicId::MergeFrom(from.topic());
  }
}

void TTopicLeave::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:server.TTopicLeave)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TTopicLeave::CopyFrom(const TTopicLeave& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:server.TTopicLeave)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool TTopicLeave::IsInitialized() const {

  return true;
}

void TTopicLeave::Swap(TTopicLeave* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TTopicLeave::InternalSwap(TTopicLeave* other) {
  std::swap(topic_, other->topic_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TTopicLeave::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TTopicLeave_descriptor_;
  metadata.reflection = TTopicLeave_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TTopicLeave

// optional .server.TopicId topic = 1;
bool TTopicLeave::has_topic() const {
  return this != internal_default_instance() && topic_ != NULL;
}
void TTopicLeave::clear_topic() {
  if (GetArenaNoVirtual() == NULL && topic_ != NULL) delete topic_;
  topic_ = NULL;
}
const ::server::TopicId& TTopicLeave::topic() const {
  // @@protoc_insertion_point(field_get:server.TTopicLeave.topic)
  return topic_ != NULL ? *topic_
                         : *::server::TopicId::internal_default_instance();
}
::server::TopicId* TTopicLeave::mutable_topic() {
  
  if (topic_ == NULL) {
    topic_ = new ::server::TopicId;
  }
  // @@protoc_insertion_point(field_mutable:server.TTopicLeave.topic)
  return topic_;
}
::server::TopicId* TTopicLeave::release_topic() {
  // @@protoc_insertion_point(field_release:server.TTopicLeave.topic)
  
  ::server::TopicId* temp = topic_;
  topic_ = NULL;
  return temp;
}
void TTopicLeave::set_allocated_topic(::server::TopicId* topic) {
  delete topic_;
  topic_ = topic;
  if (topic) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:server.TTopicLeave.topic)
}

inline const TTopicLeave* TTopicLeave::internal_default_instance() {
  return &TTopicLeave_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TTopicMessageSend::kTopicFieldNumber;
const int TTopicMessageSend::kDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TTopicMessageSend::TTopicMessageSend()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_api_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:server.TTopicMessageSend)
}

void TTopicMessageSend::InitAsDefaultInstance() {
  topic_ = const_cast< ::server::TopicId*>(
      ::server::TopicId::internal_default_instance());
}

TTopicMessageSend::TTopicMessageSend(const TTopicMessageSend& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:server.TTopicMessageSend)
}

void TTopicMessageSend::SharedCtor() {
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  topic_ = NULL;
  _cached_size_ = 0;
}

TTopicMessageSend::~TTopicMessageSend() {
  // @@protoc_insertion_point(destructor:server.TTopicMessageSend)
  SharedDtor();
}

void TTopicMessageSend::SharedDtor() {
  data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != &TTopicMessageSend_default_instance_.get()) {
    delete topic_;
  }
}

void TTopicMessageSend::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TTopicMessageSend::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TTopicMessageSend_descriptor_;
}

const TTopicMessageSend& TTopicMessageSend::default_instance() {
  protobuf_InitDefaults_api_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<TTopicMessageSend> TTopicMessageSend_default_instance_;

TTopicMessageSend* TTopicMessageSend::New(::google::protobuf::Arena* arena) const {
  TTopicMessageSend* n = new TTopicMessageSend;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TTopicMessageSend::Clear() {
// @@protoc_insertion_point(message_clear_start:server.TTopicMessageSend)
  if (GetArenaNoVirtual() == NULL && topic_ != NULL) delete topic_;
  topic_ = NULL;
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool TTopicMessageSend::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:server.TTopicMessageSend)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .server.TopicId topic = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_topic()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_data;
        break;
      }

      // optional bytes data = 2;
      case 2: {
        if (tag == 18) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:server.TTopicMessageSend)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:server.TTopicMessageSend)
  return false;
#undef DO_
}

void TTopicMessageSend::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:server.TTopicMessageSend)
  // optional .server.TopicId topic = 1;
  if (this->has_topic()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->topic_, output);
  }

  // optional bytes data = 2;
  if (this->data().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->data(), output);
  }

  // @@protoc_insertion_point(serialize_end:server.TTopicMessageSend)
}

::google::protobuf::uint8* TTopicMessageSend::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:server.TTopicMessageSend)
  // optional .server.TopicId topic = 1;
  if (this->has_topic()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->topic_, false, target);
  }

  // optional bytes data = 2;
  if (this->data().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->data(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:server.TTopicMessageSend)
  return target;
}

size_t TTopicMessageSend::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:server.TTopicMessageSend)
  size_t total_size = 0;

  // optional .server.TopicId topic = 1;
  if (this->has_topic()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->topic_);
  }

  // optional bytes data = 2;
  if (this->data().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->data());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TTopicMessageSend::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:server.TTopicMessageSend)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const TTopicMessageSend* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TTopicMessageSend>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:server.TTopicMessageSend)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:server.TTopicMessageSend)
    UnsafeMergeFrom(*source);
  }
}

void TTopicMessageSend::MergeFrom(const TTopicMessageSend& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:server.TTopicMessageSend)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void TTopicMessageSend::UnsafeMergeFrom(const TTopicMessageSend& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.has_topic()) {
    mutable_topic()->::server::TopicId::MergeFrom(from.topic());
  }
  if (from.data().size() > 0) {

    data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
}

void TTopicMessageSend::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:server.TTopicMessageSend)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TTopicMessageSend::CopyFrom(const TTopicMessageSend& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:server.TTopicMessageSend)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool TTopicMessageSend::IsInitialized() const {

  return true;
}

void TTopicMessageSend::Swap(TTopicMessageSend* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TTopicMessageSend::InternalSwap(TTopicMessageSend* other) {
  std::swap(topic_, other->topic_);
  data_.Swap(&other->data_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TTopicMessageSend::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TTopicMessageSend_descriptor_;
  metadata.reflection = TTopicMessageSend_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TTopicMessageSend

// optional .server.TopicId topic = 1;
bool TTopicMessageSend::has_topic() const {
  return this != internal_default_instance() && topic_ != NULL;
}
void TTopicMessageSend::clear_topic() {
  if (GetArenaNoVirtual() == NULL && topic_ != NULL) delete topic_;
  topic_ = NULL;
}
const ::server::TopicId& TTopicMessageSend::topic() const {
  // @@protoc_insertion_point(field_get:server.TTopicMessageSend.topic)
  return topic_ != NULL ? *topic_
                         : *::server::TopicId::internal_default_instance();
}
::server::TopicId* TTopicMessageSend::mutable_topic() {
  
  if (topic_ == NULL) {
    topic_ = new ::server::TopicId;
  }
  // @@protoc_insertion_point(field_mutable:server.TTopicMessageSend.topic)
  return topic_;
}
::server::TopicId* TTopicMessageSend::release_topic() {
  // @@protoc_insertion_point(field_release:server.TTopicMessageSend.topic)
  
  ::server::TopicId* temp = topic_;
  topic_ = NULL;
  return temp;
}
void TTopicMessageSend::set_allocated_topic(::server::TopicId* topic) {
  delete topic_;
  topic_ = topic;
  if (topic) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:server.TTopicMessageSend.topic)
}

// optional bytes data = 2;
void TTopicMessageSend::clear_data() {
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& TTopicMessageSend::data() const {
  // @@protoc_insertion_point(field_get:server.TTopicMessageSend.data)
  return data_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TTopicMessageSend::set_data(const ::std::string& value) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:server.TTopicMessageSend.data)
}
void TTopicMessageSend::set_data(const char* value) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:server.TTopicMessageSend.data)
}
void TTopicMessageSend::set_data(const void* value, size_t size) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:server.TTopicMessageSend.data)
}
::std::string* TTopicMessageSend::mutable_data() {
  
  // @@protoc_insertion_point(field_mutable:server.TTopicMessageSend.data)
  return data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* TTopicMessageSend::release_data() {
  // @@protoc_insertion_point(field_release:server.TTopicMessageSend.data)
  
  return data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TTopicMessageSend::set_allocated_data(::std::string* data) {
  if (data != NULL) {
    
  } else {
    
  }
  data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:server.TTopicMessageSend.data)
}

inline const TTopicMessageSend* TTopicMessageSend::internal_default_instance() {
  return &TTopicMessageSend_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TTopicMessageAck::kMessageIdFieldNumber;
const int TTopicMessageAck::kCreatedAtFieldNumber;
const int TTopicMessageAck::kExpiresAtFieldNumber;
const int TTopicMessageAck::kHandleFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TTopicMessageAck::TTopicMessageAck()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_api_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:server.TTopicMessageAck)
}

void TTopicMessageAck::InitAsDefaultInstance() {
}

TTopicMessageAck::TTopicMessageAck(const TTopicMessageAck& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:server.TTopicMessageAck)
}

void TTopicMessageAck::SharedCtor() {
  message_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  handle_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&created_at_, 0, reinterpret_cast<char*>(&expires_at_) -
    reinterpret_cast<char*>(&created_at_) + sizeof(expires_at_));
  _cached_size_ = 0;
}

TTopicMessageAck::~TTopicMessageAck() {
  // @@protoc_insertion_point(destructor:server.TTopicMessageAck)
  SharedDtor();
}

void TTopicMessageAck::SharedDtor() {
  message_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  handle_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void TTopicMessageAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TTopicMessageAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TTopicMessageAck_descriptor_;
}

const TTopicMessageAck& TTopicMessageAck::default_instance() {
  protobuf_InitDefaults_api_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<TTopicMessageAck> TTopicMessageAck_default_instance_;

TTopicMessageAck* TTopicMessageAck::New(::google::protobuf::Arena* arena) const {
  TTopicMessageAck* n = new TTopicMessageAck;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TTopicMessageAck::Clear() {
// @@protoc_insertion_point(message_clear_start:server.TTopicMessageAck)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(TTopicMessageAck, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<TTopicMessageAck*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(created_at_, expires_at_);
  message_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  handle_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());

#undef ZR_HELPER_
#undef ZR_

}

bool TTopicMessageAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:server.TTopicMessageAck)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes message_id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_message_id()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_created_at;
        break;
      }

      // optional int64 created_at = 2;
      case 2: {
        if (tag == 16) {
         parse_created_at:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &created_at_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_expires_at;
        break;
      }

      // optional int64 expires_at = 3;
      case 3: {
        if (tag == 24) {
         parse_expires_at:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &expires_at_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_handle;
        break;
      }

      // optional string handle = 4;
      case 4: {
        if (tag == 34) {
         parse_handle:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_handle()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->handle().data(), this->handle().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "server.TTopicMessageAck.handle"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:server.TTopicMessageAck)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:server.TTopicMessageAck)
  return false;
#undef DO_
}

void TTopicMessageAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:server.TTopicMessageAck)
  // optional bytes message_id = 1;
  if (this->message_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->message_id(), output);
  }

  // optional int64 created_at = 2;
  if (this->created_at() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->created_at(), output);
  }

  // optional int64 expires_at = 3;
  if (this->expires_at() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->expires_at(), output);
  }

  // optional string handle = 4;
  if (this->handle().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->handle().data(), this->handle().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server.TTopicMessageAck.handle");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->handle(), output);
  }

  // @@protoc_insertion_point(serialize_end:server.TTopicMessageAck)
}

::google::protobuf::uint8* TTopicMessageAck::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:server.TTopicMessageAck)
  // optional bytes message_id = 1;
  if (this->message_id().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->message_id(), target);
  }

  // optional int64 created_at = 2;
  if (this->created_at() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->created_at(), target);
  }

  // optional int64 expires_at = 3;
  if (this->expires_at() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->expires_at(), target);
  }

  // optional string handle = 4;
  if (this->handle().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->handle().data(), this->handle().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server.TTopicMessageAck.handle");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->handle(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:server.TTopicMessageAck)
  return target;
}

size_t TTopicMessageAck::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:server.TTopicMessageAck)
  size_t total_size = 0;

  // optional bytes message_id = 1;
  if (this->message_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->message_id());
  }

  // optional int64 created_at = 2;
  if (this->created_at() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->created_at());
  }

  // optional int64 expires_at = 3;
  if (this->expires_at() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->expires_at());
  }

  // optional string handle = 4;
  if (this->handle().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->handle());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TTopicMessageAck::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:server.TTopicMessageAck)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const TTopicMessageAck* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TTopicMessageAck>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:server.TTopicMessageAck)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:server.TTopicMessageAck)
    UnsafeMergeFrom(*source);
  }
}

void TTopicMessageAck::MergeFrom(const TTopicMessageAck& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:server.TTopicMessageAck)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void TTopicMessageAck::UnsafeMergeFrom(const TTopicMessageAck& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.message_id().size() > 0) {

    message_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.message_id_);
  }
  if (from.created_at() != 0) {
    set_created_at(from.created_at());
  }
  if (from.expires_at() != 0) {
    set_expires_at(from.expires_at());
  }
  if (from.handle().size() > 0) {

    handle_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.handle_);
  }
}

void TTopicMessageAck::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:server.TTopicMessageAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TTopicMessageAck::CopyFrom(const TTopicMessageAck& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:server.TTopicMessageAck)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool TTopicMessageAck::IsInitialized() const {

  return true;
}

void TTopicMessageAck::Swap(TTopicMessageAck* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TTopicMessageAck::InternalSwap(TTopicMessageAck* other) {
  message_id_.Swap(&other->message_id_);
  std::swap(created_at_, other->created_at_);
  std::swap(expires_at_, other->expires_at_);
  handle_.Swap(&other->handle_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TTopicMessageAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TTopicMessageAck_descriptor_;
  metadata.reflection = TTopicMessageAck_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TTopicMessageAck

// optional bytes message_id = 1;
void TTopicMessageAck::clear_message_id() {
  message_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& TTopicMessageAck::message_id() const {
  // @@protoc_insertion_point(field_get:server.TTopicMessageAck.message_id)
  return message_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TTopicMessageAck::set_message_id(const ::std::string& value) {
  
  message_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:server.TTopicMessageAck.message_id)
}
void TTopicMessageAck::set_message_id(const char* value) {
  
  message_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:server.TTopicMessageAck.message_id)
}
void TTopicMessageAck::set_message_id(const void* value, size_t size) {
  
  message_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:server.TTopicMessageAck.message_id)
}
::std::string* TTopicMessageAck::mutable_message_id() {
  
  // @@protoc_insertion_point(field_mutable:server.TTopicMessageAck.message_id)
  return message_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* TTopicMessageAck::release_message_id() {
  // @@protoc_insertion_point(field_release:server.TTopicMessageAck.message_id)
  
  return message_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TTopicMessageAck::set_allocated_message_id(::std::string* message_id) {
  if (message_id != NULL) {
    
  } else {
    
  }
  message_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), message_id);
  // @@protoc_insertion_point(field_set_allocated:server.TTopicMessageAck.message_id)
}

// optional int64 created_at = 2;
void TTopicMessageAck::clear_created_at() {
  created_at_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 TTopicMessageAck::created_at() const {
  // @@protoc_insertion_point(field_get:server.TTopicMessageAck.created_at)
  return created_at_;
}
void TTopicMessageAck::set_created_at(::google::protobuf::int64 value) {
  
  created_at_ = value;
  // @@protoc_insertion_point(field_set:server.TTopicMessageAck.created_at)
}

// optional int64 expires_at = 3;
void TTopicMessageAck::clear_expires_at() {
  expires_at_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 TTopicMessageAck::expires_at() const {
  // @@protoc_insertion_point(field_get:server.TTopicMessageAck.expires_at)
  return expires_at_;
}
void TTopicMessageAck::set_expires_at(::google::protobuf::int64 value) {
  
  expires_at_ = value;
  // @@protoc_insertion_point(field_set:server.TTopicMessageAck.expires_at)
}

// optional string handle = 4;
void TTopicMessageAck::clear_handle() {
  handle_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& TTopicMessageAck::handle() const {
  // @@protoc_insertion_point(field_get:server.TTopicMessageAck.handle)
  return handle_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TTopicMessageAck::set_handle(const ::std::string& value) {
  
  handle_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:server.TTopicMessageAck.handle)
}
void TTopicMessageAck::set_handle(const char* value) {
  
  handle_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:server.TTopicMessageAck.handle)
}
void TTopicMessageAck::set_handle(const char* value, size_t size) {
  
  handle_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:server.TTopicMessageAck.handle)
}
::std::string* TTopicMessageAck::mutable_handle() {
  
  // @@protoc_insertion_point(field_mutable:server.TTopicMessageAck.handle)
  return handle_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* TTopicMessageAck::release_handle() {
  // @@protoc_insertion_point(field_release:server.TTopicMessageAck.handle)
  
  return handle_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TTopicMessageAck::set_allocated_handle(::std::string* handle) {
  if (handle != NULL) {
    
  } else {
    
  }
  handle_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), handle);
  // @@protoc_insertion_point(field_set_allocated:server.TTopicMessageAck.handle)
}

inline const TTopicMessageAck* TTopicMessageAck::internal_default_instance() {
  return &TTopicMessageAck_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TopicMessage::kTopicFieldNumber;
const int TopicMessage::kUserIdFieldNumber;
const int TopicMessage::kMessageIdFieldNumber;
const int TopicMessage::kCreatedAtFieldNumber;
const int TopicMessage::kExpiresAtFieldNumber;
const int TopicMessage::kHandleFieldNumber;
const int TopicMessage::kTypeFieldNumber;
const int TopicMessage::kDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TopicMessage::TopicMessage()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_api_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:server.TopicMessage)
}

void TopicMessage::InitAsDefaultInstance() {
  topic_ = const_cast< ::server::TopicId*>(
      ::server::TopicId::internal_default_instance());
}

TopicMessage::TopicMessage(const TopicMessage& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:server.TopicMessage)
}

void TopicMessage::SharedCtor() {
  user_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  message_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  handle_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  topic_ = NULL;
  ::memset(&created_at_, 0, reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&created_at_) + sizeof(type_));
  _cached_size_ = 0;
}

TopicMessage::~TopicMessage() {
  // @@protoc_insertion_point(destructor:server.TopicMessage)
  SharedDtor();
}

void TopicMessage::SharedDtor() {
  user_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  message_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  handle_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != &TopicMessage_default_instance_.get()) {
    delete topic_;
  }
}

void TopicMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TopicMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TopicMessage_descriptor_;
}

const TopicMessage& TopicMessage::default_instance() {
  protobuf_InitDefaults_api_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<TopicMessage> TopicMessage_default_instance_;

TopicMessage* TopicMessage::New(::google::protobuf::Arena* arena) const {
  TopicMessage* n = new TopicMessage;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TopicMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:server.TopicMessage)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(TopicMessage, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<TopicMessage*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(created_at_, type_);
  if (GetArenaNoVirtual() == NULL && topic_ != NULL) delete topic_;
  topic_ = NULL;
  user_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  message_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  handle_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());

#undef ZR_HELPER_
#undef ZR_

}

bool TopicMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:server.TopicMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .server.TopicId topic = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_topic()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_user_id;
        break;
      }

      // optional bytes user_id = 2;
      case 2: {
        if (tag == 18) {
         parse_user_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_user_id()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_message_id;
        break;
      }

      // optional bytes message_id = 3;
      case 3: {
        if (tag == 26) {
         parse_message_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_message_id()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_created_at;
        break;
      }

      // optional int64 created_at = 4;
      case 4: {
        if (tag == 32) {
         parse_created_at:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &created_at_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_expires_at;
        break;
      }

      // optional int64 expires_at = 5;
      case 5: {
        if (tag == 40) {
         parse_expires_at:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &expires_at_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_handle;
        break;
      }

      // optional string handle = 6;
      case 6: {
        if (tag == 50) {
         parse_handle:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_handle()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->handle().data(), this->handle().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "server.TopicMessage.handle"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_type;
        break;
      }

      // optional int64 type = 7;
      case 7: {
        if (tag == 56) {
         parse_type:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &type_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_data;
        break;
      }

      // optional bytes data = 8;
      case 8: {
        if (tag == 66) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:server.TopicMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:server.TopicMessage)
  return false;
#undef DO_
}

void TopicMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:server.TopicMessage)
  // optional .server.TopicId topic = 1;
  if (this->has_topic()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->topic_, output);
  }

  // optional bytes user_id = 2;
  if (this->user_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->user_id(), output);
  }

  // optional bytes message_id = 3;
  if (this->message_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->message_id(), output);
  }

  // optional int64 created_at = 4;
  if (this->created_at() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->created_at(), output);
  }

  // optional int64 expires_at = 5;
  if (this->expires_at() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->expires_at(), output);
  }

  // optional string handle = 6;
  if (this->handle().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->handle().data(), this->handle().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server.TopicMessage.handle");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->handle(), output);
  }

  // optional int64 type = 7;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(7, this->type(), output);
  }

  // optional bytes data = 8;
  if (this->data().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      8, this->data(), output);
  }

  // @@protoc_insertion_point(serialize_end:server.TopicMessage)
}

::google::protobuf::uint8* TopicMessage::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:server.TopicMessage)
  // optional .server.TopicId topic = 1;
  if (this->has_topic()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->topic_, false, target);
  }

  // optional bytes user_id = 2;
  if (this->user_id().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->user_id(), target);
  }

  // optional bytes message_id = 3;
  if (this->message_id().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->message_id(), target);
  }

  // optional int64 created_at = 4;
  if (this->created_at() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->created_at(), target);
  }

  // optional int64 expires_at = 5;
  if (this->expires_at() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->expires_at(), target);
  }

  // optional string handle = 6;
  if (this->handle().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->handle().data(), this->handle().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server.TopicMessage.handle");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->handle(), target);
  }

  // optional int64 type = 7;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(7, this->type(), target);
  }

  // optional bytes data = 8;
  if (this->data().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        8, this->data(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:server.TopicMessage)
  return target;
}

size_t TopicMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:server.TopicMessage)
  size_t total_size = 0;

  // optional .server.TopicId topic = 1;
  if (this->has_topic()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->topic_);
  }

  // optional bytes user_id = 2;
  if (this->user_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->user_id());
  }

  // optional bytes message_id = 3;
  if (this->message_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->message_id());
  }

  // optional int64 created_at = 4;
  if (this->created_at() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->created_at());
  }

  // optional int64 expires_at = 5;
  if (this->expires_at() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->expires_at());
  }

  // optional string handle = 6;
  if (this->handle().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->handle());
  }

  // optional int64 type = 7;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->type());
  }

  // optional bytes data = 8;
  if (this->data().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->data());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TopicMessage::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:server.TopicMessage)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const TopicMessage* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TopicMessage>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:server.TopicMessage)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:server.TopicMessage)
    UnsafeMergeFrom(*source);
  }
}

void TopicMessage::MergeFrom(const TopicMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:server.TopicMessage)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void TopicMessage::UnsafeMergeFrom(const TopicMessage& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.has_topic()) {
    mutable_topic()->::server::TopicId::MergeFrom(from.topic());
  }
  if (from.user_id().size() > 0) {

    user_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.user_id_);
  }
  if (from.message_id().size() > 0) {

    message_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.message_id_);
  }
  if (from.created_at() != 0) {
    set_created_at(from.created_at());
  }
  if (from.expires_at() != 0) {
    set_expires_at(from.expires_at());
  }
  if (from.handle().size() > 0) {

    handle_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.handle_);
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
  if (from.data().size() > 0) {

    data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
}

void TopicMessage::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:server.TopicMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TopicMessage::CopyFrom(const TopicMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:server.TopicMessage)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool TopicMessage::IsInitialized() const {

  return true;
}

void TopicMessage::Swap(TopicMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TopicMessage::InternalSwap(TopicMessage* other) {
  std::swap(topic_, other->topic_);
  user_id_.Swap(&other->user_id_);
  message_id_.Swap(&other->message_id_);
  std::swap(created_at_, other->created_at_);
  std::swap(expires_at_, other->expires_at_);
  handle_.Swap(&other->handle_);
  std::swap(type_, other->type_);
  data_.Swap(&other->data_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TopicMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TopicMessage_descriptor_;
  metadata.reflection = TopicMessage_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TopicMessage

// optional .server.TopicId topic = 1;
bool TopicMessage::has_topic() const {
  return this != internal_default_instance() && topic_ != NULL;
}
void TopicMessage::clear_topic() {
  if (GetArenaNoVirtual() == NULL && topic_ != NULL) delete topic_;
  topic_ = NULL;
}
const ::server::TopicId& TopicMessage::topic() const {
  // @@protoc_insertion_point(field_get:server.TopicMessage.topic)
  return topic_ != NULL ? *topic_
                         : *::server::TopicId::internal_default_instance();
}
::server::TopicId* TopicMessage::mutable_topic() {
  
  if (topic_ == NULL) {
    topic_ = new ::server::TopicId;
  }
  // @@protoc_insertion_point(field_mutable:server.TopicMessage.topic)
  return topic_;
}
::server::TopicId* TopicMessage::release_topic() {
  // @@protoc_insertion_point(field_release:server.TopicMessage.topic)
  
  ::server::TopicId* temp = topic_;
  topic_ = NULL;
  return temp;
}
void TopicMessage::set_allocated_topic(::server::TopicId* topic) {
  delete topic_;
  topic_ = topic;
  if (topic) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:server.TopicMessage.topic)
}

// optional bytes user_id = 2;
void TopicMessage::clear_user_id() {
  user_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& TopicMessage::user_id() const {
  // @@protoc_insertion_point(field_get:server.TopicMessage.user_id)
  return user_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TopicMessage::set_user_id(const ::std::string& value) {
  
  user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:server.TopicMessage.user_id)
}
void TopicMessage::set_user_id(const char* value) {
  
  user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:server.TopicMessage.user_id)
}
void TopicMessage::set_user_id(const void* value, size_t size) {
  
  user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:server.TopicMessage.user_id)
}
::std::string* TopicMessage::mutable_user_id() {
  
  // @@protoc_insertion_point(field_mutable:server.TopicMessage.user_id)
  return user_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* TopicMessage::release_user_id() {
  // @@protoc_insertion_point(field_release:server.TopicMessage.user_id)
  
  return user_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TopicMessage::set_allocated_user_id(::std::string* user_id) {
  if (user_id != NULL) {
    
  } else {
    
  }
  user_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), user_id);
  // @@protoc_insertion_point(field_set_allocated:server.TopicMessage.user_id)
}

// optional bytes message_id = 3;
void TopicMessage::clear_message_id() {
  message_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& TopicMessage::message_id() const {
  // @@protoc_insertion_point(field_get:server.TopicMessage.message_id)
  return message_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TopicMessage::set_message_id(const ::std::string& value) {
  
  message_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:server.TopicMessage.message_id)
}
void TopicMessage::set_message_id(const char* value) {
  
  message_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:server.TopicMessage.message_id)
}
void TopicMessage::set_message_id(const void* value, size_t size) {
  
  message_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:server.TopicMessage.message_id)
}
::std::string* TopicMessage::mutable_message_id() {
  
  // @@protoc_insertion_point(field_mutable:server.TopicMessage.message_id)
  return message_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* TopicMessage::release_message_id() {
  // @@protoc_insertion_point(field_release:server.TopicMessage.message_id)
  
  return message_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TopicMessage::set_allocated_message_id(::std::string* message_id) {
  if (message_id != NULL) {
    
  } else {
    
  }
  message_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), message_id);
  // @@protoc_insertion_point(field_set_allocated:server.TopicMessage.message_id)
}

// optional int64 created_at = 4;
void TopicMessage::clear_created_at() {
  created_at_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 TopicMessage::created_at() const {
  // @@protoc_insertion_point(field_get:server.TopicMessage.created_at)
  return created_at_;
}
void TopicMessage::set_created_at(::google::protobuf::int64 value) {
  
  created_at_ = value;
  // @@protoc_insertion_point(field_set:server.TopicMessage.created_at)
}

// optional int64 expires_at = 5;
void TopicMessage::clear_expires_at() {
  expires_at_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 TopicMessage::expires_at() const {
  // @@protoc_insertion_point(field_get:server.TopicMessage.expires_at)
  return expires_at_;
}
void TopicMessage::set_expires_at(::google::protobuf::int64 value) {
  
  expires_at_ = value;
  // @@protoc_insertion_point(field_set:server.TopicMessage.expires_at)
}

// optional string handle = 6;
void TopicMessage::clear_handle() {
  handle_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& TopicMessage::handle() const {
  // @@protoc_insertion_point(field_get:server.TopicMessage.handle)
  return handle_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TopicMessage::set_handle(const ::std::string& value) {
  
  handle_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:server.TopicMessage.handle)
}
void TopicMessage::set_handle(const char* value) {
  
  handle_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:server.TopicMessage.handle)
}
void TopicMessage::set_handle(const char* value, size_t size) {
  
  handle_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:server.TopicMessage.handle)
}
::std::string* TopicMessage::mutable_handle() {
  
  // @@protoc_insertion_point(field_mutable:server.TopicMessage.handle)
  return handle_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* TopicMessage::release_handle() {
  // @@protoc_insertion_point(field_release:server.TopicMessage.handle)
  
  return handle_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TopicMessage::set_allocated_handle(::std::string* handle) {
  if (handle != NULL) {
    
  } else {
    
  }
  handle_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), handle);
  // @@protoc_insertion_point(field_set_allocated:server.TopicMessage.handle)
}

// optional int64 type = 7;
void TopicMessage::clear_type() {
  type_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 TopicMessage::type() const {
  // @@protoc_insertion_point(field_get:server.TopicMessage.type)
  return type_;
}
void TopicMessage::set_type(::google::protobuf::int64 value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:server.TopicMessage.type)
}

// optional bytes data = 8;
void TopicMessage::clear_data() {
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& TopicMessage::data() const {
  // @@protoc_insertion_point(field_get:server.TopicMessage.data)
  return data_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TopicMessage::set_data(const ::std::string& value) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:server.TopicMessage.data)
}
void TopicMessage::set_data(const char* value) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:server.TopicMessage.data)
}
void TopicMessage::set_data(const void* value, size_t size) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:server.TopicMessage.data)
}
::std::string* TopicMessage::mutable_data() {
  
  // @@protoc_insertion_point(field_mutable:server.TopicMessage.data)
  return data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* TopicMessage::release_data() {
  // @@protoc_insertion_point(field_release:server.TopicMessage.data)
  
  return data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TopicMessage::set_allocated_data(::std::string* data) {
  if (data != NULL) {
    
  } else {
    
  }
  data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:server.TopicMessage.data)
}

inline const TopicMessage* TopicMessage::internal_default_instance() {
  return &TopicMessage_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TTopicMessagesList::kUserIdFieldNumber;
const int TTopicMessagesList::kRoomFieldNumber;
const int TTopicMessagesList::kGroupIdFieldNumber;
const int TTopicMessagesList::kCursorFieldNumber;
const int TTopicMessagesList::kForwardFieldNumber;
const int TTopicMessagesList::kLimitFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TTopicMessagesList::TTopicMessagesList()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_api_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:server.TTopicMessagesList)
}

void TTopicMessagesList::InitAsDefaultInstance() {
  TTopicMessagesList_default_oneof_instance_->user_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  TTopicMessagesList_default_oneof_instance_->room_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  TTopicMessagesList_default_oneof_instance_->group_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

TTopicMessagesList::TTopicMessagesList(const TTopicMessagesList& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:server.TTopicMessagesList)
}

void TTopicMessagesList::SharedCtor() {
  cursor_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&limit_, 0, reinterpret_cast<char*>(&forward_) -
    reinterpret_cast<char*>(&limit_) + sizeof(forward_));
  clear_has_id();
  _cached_size_ = 0;
}

TTopicMessagesList::~TTopicMessagesList() {
  // @@protoc_insertion_point(destructor:server.TTopicMessagesList)
  SharedDtor();
}

void TTopicMessagesList::SharedDtor() {
  cursor_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (has_id()) {
    clear_id();
  }
}

void TTopicMessagesList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TTopicMessagesList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TTopicMessagesList_descriptor_;
}

const TTopicMessagesList& TTopicMessagesList::default_instance() {
  protobuf_InitDefaults_api_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<TTopicMessagesList> TTopicMessagesList_default_instance_;

TTopicMessagesList* TTopicMessagesList::New(::google::protobuf::Arena* arena) const {
  TTopicMessagesList* n = new TTopicMessagesList;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TTopicMessagesList::clear_id() {
// @@protoc_insertion_point(one_of_clear_start:server.TTopicMessagesList)
  switch (id_case()) {
    case kUserId: {
      id_.user_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
      break;
    }
    case kRoom: {
      id_.room_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
      break;
    }
    case kGroupId: {
      id_.group_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
      break;
    }
    case ID_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = ID_NOT_SET;
}


void TTopicMessagesList::Clear() {
// @@protoc_insertion_point(message_clear_start:server.TTopicMessagesList)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(TTopicMessagesList, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<TTopicMessagesList*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(limit_, forward_);
  cursor_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());

#undef ZR_HELPER_
#undef ZR_

  clear_id();
}

bool TTopicMessagesList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:server.TTopicMessagesList)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes user_id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_user_id()));
        } else {
          goto handle_unusual;
        }
        goto after_group_id;
        break;
      }

      // optional bytes room = 2;
      case 2: {
        if (tag == 18) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_room()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_group_id;
        break;
      }

      // optional bytes group_id = 3;
      case 3: {
        if (tag == 26) {
         parse_group_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_group_id()));
        } else {
          goto handle_unusual;
        }
       after_group_id:
        if (input->ExpectTag(34)) goto parse_cursor;
        break;
      }

      // optional bytes cursor = 4;
      case 4: {
        if (tag == 34) {
         parse_cursor:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_cursor()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_forward;
        break;
      }

      // optional bool forward = 5;
      case 5: {
        if (tag == 40) {
         parse_forward:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &forward_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_limit;
        break;
      }

      // optional int64 limit = 6;
      case 6: {
        if (tag == 48) {
         parse_limit:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &limit_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:server.TTopicMessagesList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:server.TTopicMessagesList)
  return false;
#undef DO_
}

void TTopicMessagesList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:server.TTopicMessagesList)
  // optional bytes user_id = 1;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->user_id(), output);
  }

  // optional bytes room = 2;
  if (has_room()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->room(), output);
  }

  // optional bytes group_id = 3;
  if (has_group_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->group_id(), output);
  }

  // optional bytes cursor = 4;
  if (this->cursor().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->cursor(), output);
  }

  // optional bool forward = 5;
  if (this->forward() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->forward(), output);
  }

  // optional int64 limit = 6;
  if (this->limit() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->limit(), output);
  }

  // @@protoc_insertion_point(serialize_end:server.TTopicMessagesList)
}

::google::protobuf::uint8* TTopicMessagesList::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:server.TTopicMessagesList)
  // optional bytes user_id = 1;
  if (has_user_id()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->user_id(), target);
  }

  // optional bytes room = 2;
  if (has_room()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->room(), target);
  }

  // optional bytes group_id = 3;
  if (has_group_id()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->group_id(), target);
  }

  // optional bytes cursor = 4;
  if (this->cursor().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->cursor(), target);
  }

  // optional bool forward = 5;
  if (this->forward() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->forward(), target);
  }

  // optional int64 limit = 6;
  if (this->limit() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(6, this->limit(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:server.TTopicMessagesList)
  return target;
}

size_t TTopicMessagesList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:server.TTopicMessagesList)
  size_t total_size = 0;

  // optional bytes cursor = 4;
  if (this->cursor().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->cursor());
  }

  // optional bool forward = 5;
  if (this->forward() != 0) {
    total_size += 1 + 1;
  }

  // optional int64 limit = 6;
  if (this->limit() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->limit());
  }

  switch (id_case()) {
    // optional bytes user_id = 1;
    case kUserId: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->user_id());
      break;
    }
    // optional bytes room = 2;
    case kRoom: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->room());
      break;
    }
    // optional bytes group_id = 3;
    case kGroupId: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->group_id());
      break;
    }
    case ID_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TTopicMessagesList::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:server.TTopicMessagesList)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const TTopicMessagesList* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TTopicMessagesList>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:server.TTopicMessagesList)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:server.TTopicMessagesList)
    UnsafeMergeFrom(*source);
  }
}

void TTopicMessagesList::MergeFrom(const TTopicMessagesList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:server.TTopicMessagesList)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void TTopicMessagesList::UnsafeMergeFrom(const TTopicMessagesList& from) {
  GOOGLE_DCHECK(&from != this);
  switch (from.id_case()) {
    case kUserId: {
      set_user_id(from.user_id());
      break;
    }
    case kRoom: {
      set_room(from.room());
      break;
    }
    case kGroupId: {
      set_group_id(from.group_id());
      break;
    }
    case ID_NOT_SET: {
      break;
    }
  }
  if (from.cursor().size() > 0) {

    cursor_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cursor_);
  }
  if (from.forward() != 0) {
    set_forward(from.forward());
  }
  if (from.limit() != 0) {
    set_limit(from.limit());
  }
}

void TTopicMessagesList::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:server.TTopicMessagesList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TTopicMessagesList::CopyFrom(const TTopicMessagesList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:server.TTopicMessagesList)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool TTopicMessagesList::IsInitialized() const {

  return true;
}

void TTopicMessagesList::Swap(TTopicMessagesList* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TTopicMessagesList::InternalSwap(TTopicMessagesList* other) {
  cursor_.Swap(&other->cursor_);
  std::swap(forward_, other->forward_);
  std::swap(limit_, other->limit_);
  std::swap(id_, other->id_);
  std::swap(_oneof_case_[0], other->_oneof_case_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TTopicMessagesList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TTopicMessagesList_descriptor_;
  metadata.reflection = TTopicMessagesList_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TTopicMessagesList

// optional bytes user_id = 1;
bool TTopicMessagesList::has_user_id() const {
  return id_case() == kUserId;
}
void TTopicMessagesList::set_has_user_id() {
  _oneof_case_[0] = kUserId;
}
void TTopicMessagesList::clear_user_id() {
  if (has_user_id()) {
    id_.user_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_id();
  }
}
const ::std::string& TTopicMessagesList::user_id() const {
  // @@protoc_insertion_point(field_get:server.TTopicMessagesList.user_id)
  if (has_user_id()) {
    return id_.user_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
void TTopicMessagesList::set_user_id(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:server.TTopicMessagesList.user_id)
  if (!has_user_id()) {
    clear_id();
    set_has_user_id();
    id_.user_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  id_.user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:server.TTopicMessagesList.user_id)
}
void TTopicMessagesList::set_user_id(const char* value) {
  if (!has_user_id()) {
    clear_id();
    set_has_user_id();
    id_.user_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  id_.user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:server.TTopicMessagesList.user_id)
}
void TTopicMessagesList::set_user_id(const void* value, size_t size) {
  if (!has_user_id()) {
    clear_id();
    set_has_user_id();
    id_.user_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  id_.user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:server.TTopicMessagesList.user_id)
}
::std::string* TTopicMessagesList::mutable_user_id() {
  if (!has_user_id()) {
    clear_id();
    set_has_user_id();
    id_.user_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:server.TTopicMessagesList.user_id)
  return id_.user_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* TTopicMessagesList::release_user_id() {
  // @@protoc_insertion_point(field_release:server.TTopicMessagesList.user_id)
  if (has_user_id()) {
    clear_has_id();
    return id_.user_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return NULL;
  }
}
void TTopicMessagesList::set_allocated_user_id(::std::string* user_id) {
  if (!has_user_id()) {
    id_.user_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_id();
  if (user_id != NULL) {
    set_has_user_id();
    id_.user_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        user_id);
  }
  // @@protoc_insertion_point(field_set_allocated:server.TTopicMessagesList.user_id)
}

// optional bytes room = 2;
bool TTopicMessagesList::has_room() const {
  return id_case() == kRoom;
}
void TTopicMessagesList::set_has_room() {
  _oneof_case_[0] = kRoom;
}
void TTopicMessagesList::clear_room() {
  if (has_room()) {
    id_.room_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_id();
  }
}
const ::std::string& TTopicMessagesList::room() const {
  // @@protoc_insertion_point(field_get:server.TTopicMessagesList.room)
  if (has_room()) {
    return id_.room_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
void TTopicMessagesList::set_room(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:server.TTopicMessagesList.room)
  if (!has_room()) {
    clear_id();
    set_has_room();
    id_.room_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  id_.room_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:server.TTopicMessagesList.room)
}
void TTopicMessagesList::set_room(const char* value) {
  if (!has_room()) {
    clear_id();
    set_has_room();
    id_.room_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  id_.room_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:server.TTopicMessagesList.room)
}
void TTopicMessagesList::set_room(const void* value, size_t size) {
  if (!has_room()) {
    clear_id();
    set_has_room();
    id_.room_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  id_.room_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:server.TTopicMessagesList.room)
}
::std::string* TTopicMessagesList::mutable_room() {
  if (!has_room()) {
    clear_id();
    set_has_room();
    id_.room_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:server.TTopicMessagesList.room)
  return id_.room_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* TTopicMessagesList::release_room() {
  // @@protoc_insertion_point(field_release:server.TTopicMessagesList.room)
  if (has_room()) {
    clear_has_id();
    return id_.room_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return NULL;
  }
}
void TTopicMessagesList::set_allocated_room(::std::string* room) {
  if (!has_room()) {
    id_.room_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_id();
  if (room != NULL) {
    set_has_room();
    id_.room_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        room);
  }
  // @@protoc_insertion_point(field_set_allocated:server.TTopicMessagesList.room)
}

// optional bytes group_id = 3;
bool TTopicMessagesList::has_group_id() const {
  return id_case() == kGroupId;
}
void TTopicMessagesList::set_has_group_id() {
  _oneof_case_[0] = kGroupId;
}
void TTopicMessagesList::clear_group_id() {
  if (has_group_id()) {
    id_.group_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_id();
  }
}
const ::std::string& TTopicMessagesList::group_id() const {
  // @@protoc_insertion_point(field_get:server.TTopicMessagesList.group_id)
  if (has_group_id()) {
    return id_.group_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
void TTopicMessagesList::set_group_id(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:server.TTopicMessagesList.group_id)
  if (!has_group_id()) {
    clear_id();
    set_has_group_id();
    id_.group_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  id_.group_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:server.TTopicMessagesList.group_id)
}
void TTopicMessagesList::set_group_id(const char* value) {
  if (!has_group_id()) {
    clear_id();
    set_has_group_id();
    id_.group_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  id_.group_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:server.TTopicMessagesList.group_id)
}
void TTopicMessagesList::set_group_id(const void* value, size_t size) {
  if (!has_group_id()) {
    clear_id();
    set_has_group_id();
    id_.group_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  id_.group_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:server.TTopicMessagesList.group_id)
}
::std::string* TTopicMessagesList::mutable_group_id() {
  if (!has_group_id()) {
    clear_id();
    set_has_group_id();
    id_.group_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:server.TTopicMessagesList.group_id)
  return id_.group_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* TTopicMessagesList::release_group_id() {
  // @@protoc_insertion_point(field_release:server.TTopicMessagesList.group_id)
  if (has_group_id()) {
    clear_has_id();
    return id_.group_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return NULL;
  }
}
void TTopicMessagesList::set_allocated_group_id(::std::string* group_id) {
  if (!has_group_id()) {
    id_.group_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_id();
  if (group_id != NULL) {
    set_has_group_id();
    id_.group_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        group_id);
  }
  // @@protoc_insertion_point(field_set_allocated:server.TTopicMessagesList.group_id)
}

// optional bytes cursor = 4;
void TTopicMessagesList::clear_cursor() {
  cursor_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& TTopicMessagesList::cursor() const {
  // @@protoc_insertion_point(field_get:server.TTopicMessagesList.cursor)
  return cursor_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TTopicMessagesList::set_cursor(const ::std::string& value) {
  
  cursor_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:server.TTopicMessagesList.cursor)
}
void TTopicMessagesList::set_cursor(const char* value) {
  
  cursor_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:server.TTopicMessagesList.cursor)
}
void TTopicMessagesList::set_cursor(const void* value, size_t size) {
  
  cursor_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:server.TTopicMessagesList.cursor)
}
::std::string* TTopicMessagesList::mutable_cursor() {
  
  // @@protoc_insertion_point(field_mutable:server.TTopicMessagesList.cursor)
  return cursor_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* TTopicMessagesList::release_cursor() {
  // @@protoc_insertion_point(field_release:server.TTopicMessagesList.cursor)
  
  return cursor_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TTopicMessagesList::set_allocated_cursor(::std::string* cursor) {
  if (cursor != NULL) {
    
  } else {
    
  }
  cursor_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cursor);
  // @@protoc_insertion_point(field_set_allocated:server.TTopicMessagesList.cursor)
}

// optional bool forward = 5;
void TTopicMessagesList::clear_forward() {
  forward_ = false;
}
bool TTopicMessagesList::forward() const {
  // @@protoc_insertion_point(field_get:server.TTopicMessagesList.forward)
  return forward_;
}
void TTopicMessagesList::set_forward(bool value) {
  
  forward_ = value;
  // @@protoc_insertion_point(field_set:server.TTopicMessagesList.forward)
}

// optional int64 limit = 6;
void TTopicMessagesList::clear_limit() {
  limit_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 TTopicMessagesList::limit() const {
  // @@protoc_insertion_point(field_get:server.TTopicMessagesList.limit)
  return limit_;
}
void TTopicMessagesList::set_limit(::google::protobuf::int64 value) {
  
  limit_ = value;
  // @@protoc_insertion_point(field_set:server.TTopicMessagesList.limit)
}

bool TTopicMessagesList::has_id() const {
  return id_case() != ID_NOT_SET;
}
void TTopicMessagesList::clear_has_id() {
  _oneof_case_[0] = ID_NOT_SET;
}
TTopicMessagesList::IdCase TTopicMessagesList::id_case() const {
  return TTopicMessagesList::IdCase(_oneof_case_[0]);
}
inline const TTopicMessagesList* TTopicMessagesList::internal_default_instance() {
  return &TTopicMessagesList_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TTopicMessages::kMessagesFieldNumber;
const int TTopicMessages::kCursorFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TTopicMessages::TTopicMessages()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_api_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:server.TTopicMessages)
}

void TTopicMessages::InitAsDefaultInstance() {
}

TTopicMessages::TTopicMessages(const TTopicMessages& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:server.TTopicMessages)
}

void TTopicMessages::SharedCtor() {
  cursor_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

TTopicMessages::~TTopicMessages() {
  // @@protoc_insertion_point(destructor:server.TTopicMessages)
  SharedDtor();
}

void TTopicMessages::SharedDtor() {
  cursor_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void TTopicMessages::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TTopicMessages::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TTopicMessages_descriptor_;
}

const TTopicMessages& TTopicMessages::default_instance() {
  protobuf_InitDefaults_api_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<TTopicMessages> TTopicMessages_default_instance_;

TTopicMessages* TTopicMessages::New(::google::protobuf::Arena* arena) const {
  TTopicMessages* n = new TTopicMessages;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TTopicMessages::Clear() {
// @@protoc_insertion_point(message_clear_start:server.TTopicMessages)
  cursor_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  messages_.Clear();
}

bool TTopicMessages::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:server.TTopicMessages)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .server.TopicMessage messages = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_messages:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_messages()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_messages;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(18)) goto parse_cursor;
        break;
      }

      // optional bytes cursor = 2;
      case 2: {
        if (tag == 18) {
         parse_cursor:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_cursor()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:server.TTopicMessages)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:server.TTopicMessages)
  return false;
#undef DO_
}

void TTopicMessages::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:server.TTopicMessages)
  // repeated .server.TopicMessage messages = 1;
  for (unsigned int i = 0, n = this->messages_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->messages(i), output);
  }

  // optional bytes cursor = 2;
  if (this->cursor().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->cursor(), output);
  }

  // @@protoc_insertion_point(serialize_end:server.TTopicMessages)
}

::google::protobuf::uint8* TTopicMessages::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:server.TTopicMessages)
  // repeated .server.TopicMessage messages = 1;
  for (unsigned int i = 0, n = this->messages_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->messages(i), false, target);
  }

  // optional bytes cursor = 2;
  if (this->cursor().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->cursor(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:server.TTopicMessages)
  return target;
}

size_t TTopicMessages::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:server.TTopicMessages)
  size_t total_size = 0;

  // optional bytes cursor = 2;
  if (this->cursor().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->cursor());
  }

  // repeated .server.TopicMessage messages = 1;
  {
    unsigned int count = this->messages_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->messages(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TTopicMessages::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:server.TTopicMessages)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const TTopicMessages* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TTopicMessages>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:server.TTopicMessages)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:server.TTopicMessages)
    UnsafeMergeFrom(*source);
  }
}

void TTopicMessages::MergeFrom(const TTopicMessages& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:server.TTopicMessages)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void TTopicMessages::UnsafeMergeFrom(const TTopicMessages& from) {
  GOOGLE_DCHECK(&from != this);
  messages_.MergeFrom(from.messages_);
  if (from.cursor().size() > 0) {

    cursor_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cursor_);
  }
}

void TTopicMessages::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:server.TTopicMessages)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TTopicMessages::CopyFrom(const TTopicMessages& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:server.TTopicMessages)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool TTopicMessages::IsInitialized() const {

  return true;
}

void TTopicMessages::Swap(TTopicMessages* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TTopicMessages::InternalSwap(TTopicMessages* other) {
  messages_.UnsafeArenaSwap(&other->messages_);
  cursor_.Swap(&other->cursor_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TTopicMessages::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TTopicMessages_descriptor_;
  metadata.reflection = TTopicMessages_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TTopicMessages

// repeated .server.TopicMessage messages = 1;
int TTopicMessages::messages_size() const {
  return messages_.size();
}
void TTopicMessages::clear_messages() {
  messages_.Clear();
}
const ::server::TopicMessage& TTopicMessages::messages(int index) const {
  // @@protoc_insertion_point(field_get:server.TTopicMessages.messages)
  return messages_.Get(index);
}
::server::TopicMessage* TTopicMessages::mutable_messages(int index) {
  // @@protoc_insertion_point(field_mutable:server.TTopicMessages.messages)
  return messages_.Mutable(index);
}
::server::TopicMessage* TTopicMessages::add_messages() {
  // @@protoc_insertion_point(field_add:server.TTopicMessages.messages)
  return messages_.Add();
}
::google::protobuf::RepeatedPtrField< ::server::TopicMessage >*
TTopicMessages::mutable_messages() {
  // @@protoc_insertion_point(field_mutable_list:server.TTopicMessages.messages)
  return &messages_;
}
const ::google::protobuf::RepeatedPtrField< ::server::TopicMessage >&
TTopicMessages::messages() const {
  // @@protoc_insertion_point(field_list:server.TTopicMessages.messages)
  return messages_;
}

// optional bytes cursor = 2;
void TTopicMessages::clear_cursor() {
  cursor_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& TTopicMessages::cursor() const {
  // @@protoc_insertion_point(field_get:server.TTopicMessages.cursor)
  return cursor_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TTopicMessages::set_cursor(const ::std::string& value) {
  
  cursor_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:server.TTopicMessages.cursor)
}
void TTopicMessages::set_cursor(const char* value) {
  
  cursor_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:server.TTopicMessages.cursor)
}
void TTopicMessages::set_cursor(const void* value, size_t size) {
  
  cursor_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:server.TTopicMessages.cursor)
}
::std::string* TTopicMessages::mutable_cursor() {
  
  // @@protoc_insertion_point(field_mutable:server.TTopicMessages.cursor)
  return cursor_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* TTopicMessages::release_cursor() {
  // @@protoc_insertion_point(field_release:server.TTopicMessages.cursor)
  
  return cursor_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TTopicMessages::set_allocated_cursor(::std::string* cursor) {
  if (cursor != NULL) {
    
  } else {
    
  }
  cursor_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cursor);
  // @@protoc_insertion_point(field_set_allocated:server.TTopicMessages.cursor)
}

inline const TTopicMessages* TTopicMessages::internal_default_instance() {
  return &TTopicMessages_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TopicPresence::kTopicFieldNumber;
const int TopicPresence::kJoinsFieldNumber;
const int TopicPresence::kLeavesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TopicPresence::TopicPresence()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_api_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:server.TopicPresence)
}

void TopicPresence::InitAsDefaultInstance() {
  topic_ = const_cast< ::server::TopicId*>(
      ::server::TopicId::internal_default_instance());
}

TopicPresence::TopicPresence(const TopicPresence& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:server.TopicPresence)
}

void TopicPresence::SharedCtor() {
  topic_ = NULL;
  _cached_size_ = 0;
}

TopicPresence::~TopicPresence() {
  // @@protoc_insertion_point(destructor:server.TopicPresence)
  SharedDtor();
}

void TopicPresence::SharedDtor() {
  if (this != &TopicPresence_default_instance_.get()) {
    delete topic_;
  }
}

void TopicPresence::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TopicPresence::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TopicPresence_descriptor_;
}

const TopicPresence& TopicPresence::default_instance() {
  protobuf_InitDefaults_api_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<TopicPresence> TopicPresence_default_instance_;

TopicPresence* TopicPresence::New(::google::protobuf::Arena* arena) const {
  TopicPresence* n = new TopicPresence;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TopicPresence::Clear() {
// @@protoc_insertion_point(message_clear_start:server.TopicPresence)
  if (GetArenaNoVirtual() == NULL && topic_ != NULL) delete topic_;
  topic_ = NULL;
  joins_.Clear();
  leaves_.Clear();
}

bool TopicPresence::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:server.TopicPresence)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .server.TopicId topic = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_topic()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_joins;
        break;
      }

      // repeated .server.UserPresence joins = 2;
      case 2: {
        if (tag == 18) {
         parse_joins:
          DO_(input->IncrementRecursionDepth());
         parse_loop_joins:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_joins()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_loop_joins;
        if (input->ExpectTag(26)) goto parse_loop_leaves;
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .server.UserPresence leaves = 3;
      case 3: {
        if (tag == 26) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_leaves:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_leaves()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_loop_leaves;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:server.TopicPresence)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:server.TopicPresence)
  return false;
#undef DO_
}

void TopicPresence::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:server.TopicPresence)
  // optional .server.TopicId topic = 1;
  if (this->has_topic()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->topic_, output);
  }

  // repeated .server.UserPresence joins = 2;
  for (unsigned int i = 0, n = this->joins_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->joins(i), output);
  }

  // repeated .server.UserPresence leaves = 3;
  for (unsigned int i = 0, n = this->leaves_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->leaves(i), output);
  }

  // @@protoc_insertion_point(serialize_end:server.TopicPresence)
}

::google::protobuf::uint8* TopicPresence::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:server.TopicPresence)
  // optional .server.TopicId topic = 1;
  if (this->has_topic()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->topic_, false, target);
  }

  // repeated .server.UserPresence joins = 2;
  for (unsigned int i = 0, n = this->joins_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->joins(i), false, target);
  }

  // repeated .server.UserPresence leaves = 3;
  for (unsigned int i = 0, n = this->leaves_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->leaves(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:server.TopicPresence)
  return target;
}

size_t TopicPresence::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:server.TopicPresence)
  size_t total_size = 0;

  // optional .server.TopicId topic = 1;
  if (this->has_topic()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->topic_);
  }

  // repeated .server.UserPresence joins = 2;
  {
    unsigned int count = this->joins_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->joins(i));
    }
  }

  // repeated .server.UserPresence leaves = 3;
  {
    unsigned int count = this->leaves_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->leaves(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TopicPresence::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:server.TopicPresence)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const TopicPresence* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TopicPresence>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:server.TopicPresence)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:server.TopicPresence)
    UnsafeMergeFrom(*source);
  }
}

void TopicPresence::MergeFrom(const TopicPresence& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:server.TopicPresence)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void TopicPresence::UnsafeMergeFrom(const TopicPresence& from) {
  GOOGLE_DCHECK(&from != this);
  joins_.MergeFrom(from.joins_);
  leaves_.MergeFrom(from.leaves_);
  if (from.has_topic()) {
    mutable_topic()->::server::TopicId::MergeFrom(from.topic());
  }
}

void TopicPresence::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:server.TopicPresence)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TopicPresence::CopyFrom(const TopicPresence& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:server.TopicPresence)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool TopicPresence::IsInitialized() const {

  return true;
}

void TopicPresence::Swap(TopicPresence* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TopicPresence::InternalSwap(TopicPresence* other) {
  std::swap(topic_, other->topic_);
  joins_.UnsafeArenaSwap(&other->joins_);
  leaves_.UnsafeArenaSwap(&other->leaves_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TopicPresence::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TopicPresence_descriptor_;
  metadata.reflection = TopicPresence_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TopicPresence

// optional .server.TopicId topic = 1;
bool TopicPresence::has_topic() const {
  return this != internal_default_instance() && topic_ != NULL;
}
void TopicPresence::clear_topic() {
  if (GetArenaNoVirtual() == NULL && topic_ != NULL) delete topic_;
  topic_ = NULL;
}
const ::server::TopicId& TopicPresence::topic() const {
  // @@protoc_insertion_point(field_get:server.TopicPresence.topic)
  return topic_ != NULL ? *topic_
                         : *::server::TopicId::internal_default_instance();
}
::server::TopicId* TopicPresence::mutable_topic() {
  
  if (topic_ == NULL) {
    topic_ = new ::server::TopicId;
  }
  // @@protoc_insertion_point(field_mutable:server.TopicPresence.topic)
  return topic_;
}
::server::TopicId* TopicPresence::release_topic() {
  // @@protoc_insertion_point(field_release:server.TopicPresence.topic)
  
  ::server::TopicId* temp = topic_;
  topic_ = NULL;
  return temp;
}
void TopicPresence::set_allocated_topic(::server::TopicId* topic) {
  delete topic_;
  topic_ = topic;
  if (topic) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:server.TopicPresence.topic)
}

// repeated .server.UserPresence joins = 2;
int TopicPresence::joins_size() const {
  return joins_.size();
}
void TopicPresence::clear_joins() {
  joins_.Clear();
}
const ::server::UserPresence& TopicPresence::joins(int index) const {
  // @@protoc_insertion_point(field_get:server.TopicPresence.joins)
  return joins_.Get(index);
}
::server::UserPresence* TopicPresence::mutable_joins(int index) {
  // @@protoc_insertion_point(field_mutable:server.TopicPresence.joins)
  return joins_.Mutable(index);
}
::server::UserPresence* TopicPresence::add_joins() {
  // @@protoc_insertion_point(field_add:server.TopicPresence.joins)
  return joins_.Add();
}
::google::protobuf::RepeatedPtrField< ::server::UserPresence >*
TopicPresence::mutable_joins() {
  // @@protoc_insertion_point(field_mutable_list:server.TopicPresence.joins)
  return &joins_;
}
const ::google::protobuf::RepeatedPtrField< ::server::UserPresence >&
TopicPresence::joins() const {
  // @@protoc_insertion_point(field_list:server.TopicPresence.joins)
  return joins_;
}

// repeated .server.UserPresence leaves = 3;
int TopicPresence::leaves_size() const {
  return leaves_.size();
}
void TopicPresence::clear_leaves() {
  leaves_.Clear();
}
const ::server::UserPresence& TopicPresence::leaves(int index) const {
  // @@protoc_insertion_point(field_get:server.TopicPresence.leaves)
  return leaves_.Get(index);
}
::server::UserPresence* TopicPresence::mutable_leaves(int index) {
  // @@protoc_insertion_point(field_mutable:server.TopicPresence.leaves)
  return leaves_.Mutable(index);
}
::server::UserPresence* TopicPresence::add_leaves() {
  // @@protoc_insertion_point(field_add:server.TopicPresence.leaves)
  return leaves_.Add();
}
::google::protobuf::RepeatedPtrField< ::server::UserPresence >*
TopicPresence::mutable_leaves() {
  // @@protoc_insertion_point(field_mutable_list:server.TopicPresence.leaves)
  return &leaves_;
}
const ::google::protobuf::RepeatedPtrField< ::server::UserPresence >&
TopicPresence::leaves() const {
  // @@protoc_insertion_point(field_list:server.TopicPresence.leaves)
  return leaves_;
}

inline const TopicPresence* TopicPresence::internal_default_instance() {
  return &TopicPresence_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TMatchCreate::TMatchCreate()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_api_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:server.TMatchCreate)
}

void TMatchCreate::InitAsDefaultInstance() {
}

TMatchCreate::TMatchCreate(const TMatchCreate& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:server.TMatchCreate)
}

void TMatchCreate::SharedCtor() {
  _cached_size_ = 0;
}

TMatchCreate::~TMatchCreate() {
  // @@protoc_insertion_point(destructor:server.TMatchCreate)
  SharedDtor();
}

void TMatchCreate::SharedDtor() {
}

void TMatchCreate::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TMatchCreate::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TMatchCreate_descriptor_;
}

const TMatchCreate& TMatchCreate::default_instance() {
  protobuf_InitDefaults_api_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<TMatchCreate> TMatchCreate_default_instance_;

TMatchCreate* TMatchCreate::New(::google::protobuf::Arena* arena) const {
  TMatchCreate* n = new TMatchCreate;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TMatchCreate::Clear() {
// @@protoc_insertion_point(message_clear_start:server.TMatchCreate)
}

bool TMatchCreate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:server.TMatchCreate)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
  }
success:
  // @@protoc_insertion_point(parse_success:server.TMatchCreate)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:server.TMatchCreate)
  return false;
#undef DO_
}

void TMatchCreate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:server.TMatchCreate)
  // @@protoc_insertion_point(serialize_end:server.TMatchCreate)
}

::google::protobuf::uint8* TMatchCreate::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:server.TMatchCreate)
  // @@protoc_insertion_point(serialize_to_array_end:server.TMatchCreate)
  return target;
}

size_t TMatchCreate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:server.TMatchCreate)
  size_t total_size = 0;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TMatchCreate::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:server.TMatchCreate)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const TMatchCreate* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TMatchCreate>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:server.TMatchCreate)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:server.TMatchCreate)
    UnsafeMergeFrom(*source);
  }
}

void TMatchCreate::MergeFrom(const TMatchCreate& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:server.TMatchCreate)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void TMatchCreate::UnsafeMergeFrom(const TMatchCreate& from) {
  GOOGLE_DCHECK(&from != this);
}

void TMatchCreate::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:server.TMatchCreate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TMatchCreate::CopyFrom(const TMatchCreate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:server.TMatchCreate)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool TMatchCreate::IsInitialized() const {

  return true;
}

void TMatchCreate::Swap(TMatchCreate* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TMatchCreate::InternalSwap(TMatchCreate* other) {
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TMatchCreate::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TMatchCreate_descriptor_;
  metadata.reflection = TMatchCreate_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TMatchCreate

inline const TMatchCreate* TMatchCreate::internal_default_instance() {
  return &TMatchCreate_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TMatchJoin::kMatchIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TMatchJoin::TMatchJoin()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_api_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:server.TMatchJoin)
}

void TMatchJoin::InitAsDefaultInstance() {
}

TMatchJoin::TMatchJoin(const TMatchJoin& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:server.TMatchJoin)
}

void TMatchJoin::SharedCtor() {
  match_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

TMatchJoin::~TMatchJoin() {
  // @@protoc_insertion_point(destructor:server.TMatchJoin)
  SharedDtor();
}

void TMatchJoin::SharedDtor() {
  match_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void TMatchJoin::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TMatchJoin::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TMatchJoin_descriptor_;
}

const TMatchJoin& TMatchJoin::default_instance() {
  protobuf_InitDefaults_api_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<TMatchJoin> TMatchJoin_default_instance_;

TMatchJoin* TMatchJoin::New(::google::protobuf::Arena* arena) const {
  TMatchJoin* n = new TMatchJoin;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TMatchJoin::Clear() {
// @@protoc_insertion_point(message_clear_start:server.TMatchJoin)
  match_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool TMatchJoin::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:server.TMatchJoin)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes match_id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_match_id()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:server.TMatchJoin)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:server.TMatchJoin)
  return false;
#undef DO_
}

void TMatchJoin::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:server.TMatchJoin)
  // optional bytes match_id = 1;
  if (this->match_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->match_id(), output);
  }

  // @@protoc_insertion_point(serialize_end:server.TMatchJoin)
}

::google::protobuf::uint8* TMatchJoin::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:server.TMatchJoin)
  // optional bytes match_id = 1;
  if (this->match_id().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->match_id(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:server.TMatchJoin)
  return target;
}

size_t TMatchJoin::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:server.TMatchJoin)
  size_t total_size = 0;

  // optional bytes match_id = 1;
  if (this->match_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->match_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TMatchJoin::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:server.TMatchJoin)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const TMatchJoin* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TMatchJoin>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:server.TMatchJoin)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:server.TMatchJoin)
    UnsafeMergeFrom(*source);
  }
}

void TMatchJoin::MergeFrom(const TMatchJoin& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:server.TMatchJoin)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void TMatchJoin::UnsafeMergeFrom(const TMatchJoin& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.match_id().size() > 0) {

    match_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.match_id_);
  }
}

void TMatchJoin::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:server.TMatchJoin)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TMatchJoin::CopyFrom(const TMatchJoin& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:server.TMatchJoin)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool TMatchJoin::IsInitialized() const {

  return true;
}

void TMatchJoin::Swap(TMatchJoin* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TMatchJoin::InternalSwap(TMatchJoin* other) {
  match_id_.Swap(&other->match_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TMatchJoin::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TMatchJoin_descriptor_;
  metadata.reflection = TMatchJoin_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TMatchJoin

// optional bytes match_id = 1;
void TMatchJoin::clear_match_id() {
  match_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& TMatchJoin::match_id() const {
  // @@protoc_insertion_point(field_get:server.TMatchJoin.match_id)
  return match_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TMatchJoin::set_match_id(const ::std::string& value) {
  
  match_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:server.TMatchJoin.match_id)
}
void TMatchJoin::set_match_id(const char* value) {
  
  match_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:server.TMatchJoin.match_id)
}
void TMatchJoin::set_match_id(const void* value, size_t size) {
  
  match_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:server.TMatchJoin.match_id)
}
::std::string* TMatchJoin::mutable_match_id() {
  
  // @@protoc_insertion_point(field_mutable:server.TMatchJoin.match_id)
  return match_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* TMatchJoin::release_match_id() {
  // @@protoc_insertion_point(field_release:server.TMatchJoin.match_id)
  
  return match_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TMatchJoin::set_allocated_match_id(::std::string* match_id) {
  if (match_id != NULL) {
    
  } else {
    
  }
  match_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), match_id);
  // @@protoc_insertion_point(field_set_allocated:server.TMatchJoin.match_id)
}

inline const TMatchJoin* TMatchJoin::internal_default_instance() {
  return &TMatchJoin_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TMatch::kMatchIdFieldNumber;
const int TMatch::kPresencesFieldNumber;
const int TMatch::kSelfFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TMatch::TMatch()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_api_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:server.TMatch)
}

void TMatch::InitAsDefaultInstance() {
  self_ = const_cast< ::server::UserPresence*>(
      ::server::UserPresence::internal_default_instance());
}

TMatch::TMatch(const TMatch& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:server.TMatch)
}

void TMatch::SharedCtor() {
  match_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  self_ = NULL;
  _cached_size_ = 0;
}

TMatch::~TMatch() {
  // @@protoc_insertion_point(destructor:server.TMatch)
  SharedDtor();
}

void TMatch::SharedDtor() {
  match_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != &TMatch_default_instance_.get()) {
    delete self_;
  }
}

void TMatch::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TMatch::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TMatch_descriptor_;
}

const TMatch& TMatch::default_instance() {
  protobuf_InitDefaults_api_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<TMatch> TMatch_default_instance_;

TMatch* TMatch::New(::google::protobuf::Arena* arena) const {
  TMatch* n = new TMatch;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TMatch::Clear() {
// @@protoc_insertion_point(message_clear_start:server.TMatch)
  match_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && self_ != NULL) delete self_;
  self_ = NULL;
  presences_.Clear();
}

bool TMatch::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:server.TMatch)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes match_id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_match_id()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_presences;
        break;
      }

      // repeated .server.UserPresence presences = 2;
      case 2: {
        if (tag == 18) {
         parse_presences:
          DO_(input->IncrementRecursionDepth());
         parse_loop_presences:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_presences()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_loop_presences;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(26)) goto parse_self;
        break;
      }

      // optional .server.UserPresence self = 3;
      case 3: {
        if (tag == 26) {
         parse_self:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_self()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:server.TMatch)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:server.TMatch)
  return false;
#undef DO_
}

void TMatch::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:server.TMatch)
  // optional bytes match_id = 1;
  if (this->match_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->match_id(), output);
  }

  // repeated .server.UserPresence presences = 2;
  for (unsigned int i = 0, n = this->presences_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->presences(i), output);
  }

  // optional .server.UserPresence self = 3;
  if (this->has_self()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->self_, output);
  }

  // @@protoc_insertion_point(serialize_end:server.TMatch)
}

::google::protobuf::uint8* TMatch::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:server.TMatch)
  // optional bytes match_id = 1;
  if (this->match_id().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->match_id(), target);
  }

  // repeated .server.UserPresence presences = 2;
  for (unsigned int i = 0, n = this->presences_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->presences(i), false, target);
  }

  // optional .server.UserPresence self = 3;
  if (this->has_self()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->self_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:server.TMatch)
  return target;
}

size_t TMatch::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:server.TMatch)
  size_t total_size = 0;

  // optional bytes match_id = 1;
  if (this->match_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->match_id());
  }

  // optional .server.UserPresence self = 3;
  if (this->has_self()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->self_);
  }

  // repeated .server.UserPresence presences = 2;
  {
    unsigned int count = this->presences_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->presences(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TMatch::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:server.TMatch)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const TMatch* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TMatch>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:server.TMatch)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:server.TMatch)
    UnsafeMergeFrom(*source);
  }
}

void TMatch::MergeFrom(const TMatch& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:server.TMatch)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void TMatch::UnsafeMergeFrom(const TMatch& from) {
  GOOGLE_DCHECK(&from != this);
  presences_.MergeFrom(from.presences_);
  if (from.match_id().size() > 0) {

    match_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.match_id_);
  }
  if (from.has_self()) {
    mutable_self()->::server::UserPresence::MergeFrom(from.self());
  }
}

void TMatch::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:server.TMatch)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TMatch::CopyFrom(const TMatch& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:server.TMatch)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool TMatch::IsInitialized() const {

  return true;
}

void TMatch::Swap(TMatch* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TMatch::InternalSwap(TMatch* other) {
  match_id_.Swap(&other->match_id_);
  presences_.UnsafeArenaSwap(&other->presences_);
  std::swap(self_, other->self_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TMatch::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TMatch_descriptor_;
  metadata.reflection = TMatch_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TMatch

// optional bytes match_id = 1;
void TMatch::clear_match_id() {
  match_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& TMatch::match_id() const {
  // @@protoc_insertion_point(field_get:server.TMatch.match_id)
  return match_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TMatch::set_match_id(const ::std::string& value) {
  
  match_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:server.TMatch.match_id)
}
void TMatch::set_match_id(const char* value) {
  
  match_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:server.TMatch.match_id)
}
void TMatch::set_match_id(const void* value, size_t size) {
  
  match_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:server.TMatch.match_id)
}
::std::string* TMatch::mutable_match_id() {
  
  // @@protoc_insertion_point(field_mutable:server.TMatch.match_id)
  return match_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* TMatch::release_match_id() {
  // @@protoc_insertion_point(field_release:server.TMatch.match_id)
  
  return match_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TMatch::set_allocated_match_id(::std::string* match_id) {
  if (match_id != NULL) {
    
  } else {
    
  }
  match_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), match_id);
  // @@protoc_insertion_point(field_set_allocated:server.TMatch.match_id)
}

// repeated .server.UserPresence presences = 2;
int TMatch::presences_size() const {
  return presences_.size();
}
void TMatch::clear_presences() {
  presences_.Clear();
}
const ::server::UserPresence& TMatch::presences(int index) const {
  // @@protoc_insertion_point(field_get:server.TMatch.presences)
  return presences_.Get(index);
}
::server::UserPresence* TMatch::mutable_presences(int index) {
  // @@protoc_insertion_point(field_mutable:server.TMatch.presences)
  return presences_.Mutable(index);
}
::server::UserPresence* TMatch::add_presences() {
  // @@protoc_insertion_point(field_add:server.TMatch.presences)
  return presences_.Add();
}
::google::protobuf::RepeatedPtrField< ::server::UserPresence >*
TMatch::mutable_presences() {
  // @@protoc_insertion_point(field_mutable_list:server.TMatch.presences)
  return &presences_;
}
const ::google::protobuf::RepeatedPtrField< ::server::UserPresence >&
TMatch::presences() const {
  // @@protoc_insertion_point(field_list:server.TMatch.presences)
  return presences_;
}

// optional .server.UserPresence self = 3;
bool TMatch::has_self() const {
  return this != internal_default_instance() && self_ != NULL;
}
void TMatch::clear_self() {
  if (GetArenaNoVirtual() == NULL && self_ != NULL) delete self_;
  self_ = NULL;
}
const ::server::UserPresence& TMatch::self() const {
  // @@protoc_insertion_point(field_get:server.TMatch.self)
  return self_ != NULL ? *self_
                         : *::server::UserPresence::internal_default_instance();
}
::server::UserPresence* TMatch::mutable_self() {
  
  if (self_ == NULL) {
    self_ = new ::server::UserPresence;
  }
  // @@protoc_insertion_point(field_mutable:server.TMatch.self)
  return self_;
}
::server::UserPresence* TMatch::release_self() {
  // @@protoc_insertion_point(field_release:server.TMatch.self)
  
  ::server::UserPresence* temp = self_;
  self_ = NULL;
  return temp;
}
void TMatch::set_allocated_self(::server::UserPresence* self) {
  delete self_;
  self_ = self;
  if (self) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:server.TMatch.self)
}

inline const TMatch* TMatch::internal_default_instance() {
  return &TMatch_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TMatchDataSend::kMatchIdFieldNumber;
const int TMatchDataSend::kOpCodeFieldNumber;
const int TMatchDataSend::kDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TMatchDataSend::TMatchDataSend()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_api_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:server.TMatchDataSend)
}

void TMatchDataSend::InitAsDefaultInstance() {
}

TMatchDataSend::TMatchDataSend(const TMatchDataSend& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:server.TMatchDataSend)
}

void TMatchDataSend::SharedCtor() {
  match_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  op_code_ = GOOGLE_LONGLONG(0);
  _cached_size_ = 0;
}

TMatchDataSend::~TMatchDataSend() {
  // @@protoc_insertion_point(destructor:server.TMatchDataSend)
  SharedDtor();
}

void TMatchDataSend::SharedDtor() {
  match_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void TMatchDataSend::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TMatchDataSend::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TMatchDataSend_descriptor_;
}

const TMatchDataSend& TMatchDataSend::default_instance() {
  protobuf_InitDefaults_api_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<TMatchDataSend> TMatchDataSend_default_instance_;

TMatchDataSend* TMatchDataSend::New(::google::protobuf::Arena* arena) const {
  TMatchDataSend* n = new TMatchDataSend;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TMatchDataSend::Clear() {
// @@protoc_insertion_point(message_clear_start:server.TMatchDataSend)
  match_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  op_code_ = GOOGLE_LONGLONG(0);
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool TMatchDataSend::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:server.TMatchDataSend)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes match_id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_match_id()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_op_code;
        break;
      }

      // optional int64 op_code = 2;
      case 2: {
        if (tag == 16) {
         parse_op_code:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &op_code_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_data;
        break;
      }

      // optional bytes data = 3;
      case 3: {
        if (tag == 26) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:server.TMatchDataSend)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:server.TMatchDataSend)
  return false;
#undef DO_
}

void TMatchDataSend::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:server.TMatchDataSend)
  // optional bytes match_id = 1;
  if (this->match_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->match_id(), output);
  }

  // optional int64 op_code = 2;
  if (this->op_code() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->op_code(), output);
  }

  // optional bytes data = 3;
  if (this->data().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->data(), output);
  }

  // @@protoc_insertion_point(serialize_end:server.TMatchDataSend)
}

::google::protobuf::uint8* TMatchDataSend::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:server.TMatchDataSend)
  // optional bytes match_id = 1;
  if (this->match_id().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->match_id(), target);
  }

  // optional int64 op_code = 2;
  if (this->op_code() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->op_code(), target);
  }

  // optional bytes data = 3;
  if (this->data().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->data(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:server.TMatchDataSend)
  return target;
}

size_t TMatchDataSend::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:server.TMatchDataSend)
  size_t total_size = 0;

  // optional bytes match_id = 1;
  if (this->match_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->match_id());
  }

  // optional int64 op_code = 2;
  if (this->op_code() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->op_code());
  }

  // optional bytes data = 3;
  if (this->data().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->data());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TMatchDataSend::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:server.TMatchDataSend)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const TMatchDataSend* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TMatchDataSend>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:server.TMatchDataSend)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:server.TMatchDataSend)
    UnsafeMergeFrom(*source);
  }
}

void TMatchDataSend::MergeFrom(const TMatchDataSend& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:server.TMatchDataSend)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void TMatchDataSend::UnsafeMergeFrom(const TMatchDataSend& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.match_id().size() > 0) {

    match_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.match_id_);
  }
  if (from.op_code() != 0) {
    set_op_code(from.op_code());
  }
  if (from.data().size() > 0) {

    data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
}

void TMatchDataSend::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:server.TMatchDataSend)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TMatchDataSend::CopyFrom(const TMatchDataSend& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:server.TMatchDataSend)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool TMatchDataSend::IsInitialized() const {

  return true;
}

void TMatchDataSend::Swap(TMatchDataSend* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TMatchDataSend::InternalSwap(TMatchDataSend* other) {
  match_id_.Swap(&other->match_id_);
  std::swap(op_code_, other->op_code_);
  data_.Swap(&other->data_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TMatchDataSend::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TMatchDataSend_descriptor_;
  metadata.reflection = TMatchDataSend_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TMatchDataSend

// optional bytes match_id = 1;
void TMatchDataSend::clear_match_id() {
  match_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& TMatchDataSend::match_id() const {
  // @@protoc_insertion_point(field_get:server.TMatchDataSend.match_id)
  return match_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TMatchDataSend::set_match_id(const ::std::string& value) {
  
  match_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:server.TMatchDataSend.match_id)
}
void TMatchDataSend::set_match_id(const char* value) {
  
  match_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:server.TMatchDataSend.match_id)
}
void TMatchDataSend::set_match_id(const void* value, size_t size) {
  
  match_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:server.TMatchDataSend.match_id)
}
::std::string* TMatchDataSend::mutable_match_id() {
  
  // @@protoc_insertion_point(field_mutable:server.TMatchDataSend.match_id)
  return match_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* TMatchDataSend::release_match_id() {
  // @@protoc_insertion_point(field_release:server.TMatchDataSend.match_id)
  
  return match_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TMatchDataSend::set_allocated_match_id(::std::string* match_id) {
  if (match_id != NULL) {
    
  } else {
    
  }
  match_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), match_id);
  // @@protoc_insertion_point(field_set_allocated:server.TMatchDataSend.match_id)
}

// optional int64 op_code = 2;
void TMatchDataSend::clear_op_code() {
  op_code_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 TMatchDataSend::op_code() const {
  // @@protoc_insertion_point(field_get:server.TMatchDataSend.op_code)
  return op_code_;
}
void TMatchDataSend::set_op_code(::google::protobuf::int64 value) {
  
  op_code_ = value;
  // @@protoc_insertion_point(field_set:server.TMatchDataSend.op_code)
}

// optional bytes data = 3;
void TMatchDataSend::clear_data() {
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& TMatchDataSend::data() const {
  // @@protoc_insertion_point(field_get:server.TMatchDataSend.data)
  return data_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TMatchDataSend::set_data(const ::std::string& value) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:server.TMatchDataSend.data)
}
void TMatchDataSend::set_data(const char* value) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:server.TMatchDataSend.data)
}
void TMatchDataSend::set_data(const void* value, size_t size) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:server.TMatchDataSend.data)
}
::std::string* TMatchDataSend::mutable_data() {
  
  // @@protoc_insertion_point(field_mutable:server.TMatchDataSend.data)
  return data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* TMatchDataSend::release_data() {
  // @@protoc_insertion_point(field_release:server.TMatchDataSend.data)
  
  return data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TMatchDataSend::set_allocated_data(::std::string* data) {
  if (data != NULL) {
    
  } else {
    
  }
  data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:server.TMatchDataSend.data)
}

inline const TMatchDataSend* TMatchDataSend::internal_default_instance() {
  return &TMatchDataSend_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MatchData::kMatchIdFieldNumber;
const int MatchData::kPresenceFieldNumber;
const int MatchData::kOpCodeFieldNumber;
const int MatchData::kDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MatchData::MatchData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_api_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:server.MatchData)
}

void MatchData::InitAsDefaultInstance() {
  presence_ = const_cast< ::server::UserPresence*>(
      ::server::UserPresence::internal_default_instance());
}

MatchData::MatchData(const MatchData& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:server.MatchData)
}

void MatchData::SharedCtor() {
  match_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  presence_ = NULL;
  op_code_ = GOOGLE_LONGLONG(0);
  _cached_size_ = 0;
}

MatchData::~MatchData() {
  // @@protoc_insertion_point(destructor:server.MatchData)
  SharedDtor();
}

void MatchData::SharedDtor() {
  match_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != &MatchData_default_instance_.get()) {
    delete presence_;
  }
}

void MatchData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MatchData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MatchData_descriptor_;
}

const MatchData& MatchData::default_instance() {
  protobuf_InitDefaults_api_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<MatchData> MatchData_default_instance_;

MatchData* MatchData::New(::google::protobuf::Arena* arena) const {
  MatchData* n = new MatchData;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MatchData::Clear() {
// @@protoc_insertion_point(message_clear_start:server.MatchData)
  match_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && presence_ != NULL) delete presence_;
  presence_ = NULL;
  op_code_ = GOOGLE_LONGLONG(0);
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool MatchData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:server.MatchData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes match_id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_match_id()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_presence;
        break;
      }

      // optional .server.UserPresence presence = 2;
      case 2: {
        if (tag == 18) {
         parse_presence:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_presence()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_op_code;
        break;
      }

      // optional int64 op_code = 3;
      case 3: {
        if (tag == 24) {
         parse_op_code:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &op_code_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_data;
        break;
      }

      // optional bytes data = 4;
      case 4: {
        if (tag == 34) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:server.MatchData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:server.MatchData)
  return false;
#undef DO_
}

void MatchData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:server.MatchData)
  // optional bytes match_id = 1;
  if (this->match_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->match_id(), output);
  }

  // optional .server.UserPresence presence = 2;
  if (this->has_presence()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->presence_, output);
  }

  // optional int64 op_code = 3;
  if (this->op_code() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->op_code(), output);
  }

  // optional bytes data = 4;
  if (this->data().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->data(), output);
  }

  // @@protoc_insertion_point(serialize_end:server.MatchData)
}

::google::protobuf::uint8* MatchData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:server.MatchData)
  // optional bytes match_id = 1;
  if (this->match_id().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->match_id(), target);
  }

  // optional .server.UserPresence presence = 2;
  if (this->has_presence()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->presence_, false, target);
  }

  // optional int64 op_code = 3;
  if (this->op_code() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->op_code(), target);
  }

  // optional bytes data = 4;
  if (this->data().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->data(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:server.MatchData)
  return target;
}

size_t MatchData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:server.MatchData)
  size_t total_size = 0;

  // optional bytes match_id = 1;
  if (this->match_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->match_id());
  }

  // optional .server.UserPresence presence = 2;
  if (this->has_presence()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->presence_);
  }

  // optional int64 op_code = 3;
  if (this->op_code() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->op_code());
  }

  // optional bytes data = 4;
  if (this->data().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->data());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MatchData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:server.MatchData)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const MatchData* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MatchData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:server.MatchData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:server.MatchData)
    UnsafeMergeFrom(*source);
  }
}

void MatchData::MergeFrom(const MatchData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:server.MatchData)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void MatchData::UnsafeMergeFrom(const MatchData& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.match_id().size() > 0) {

    match_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.match_id_);
  }
  if (from.has_presence()) {
    mutable_presence()->::server::UserPresence::MergeFrom(from.presence());
  }
  if (from.op_code() != 0) {
    set_op_code(from.op_code());
  }
  if (from.data().size() > 0) {

    data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
}

void MatchData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:server.MatchData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MatchData::CopyFrom(const MatchData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:server.MatchData)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool MatchData::IsInitialized() const {

  return true;
}

void MatchData::Swap(MatchData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MatchData::InternalSwap(MatchData* other) {
  match_id_.Swap(&other->match_id_);
  std::swap(presence_, other->presence_);
  std::swap(op_code_, other->op_code_);
  data_.Swap(&other->data_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MatchData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MatchData_descriptor_;
  metadata.reflection = MatchData_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MatchData

// optional bytes match_id = 1;
void MatchData::clear_match_id() {
  match_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& MatchData::match_id() const {
  // @@protoc_insertion_point(field_get:server.MatchData.match_id)
  return match_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void MatchData::set_match_id(const ::std::string& value) {
  
  match_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:server.MatchData.match_id)
}
void MatchData::set_match_id(const char* value) {
  
  match_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:server.MatchData.match_id)
}
void MatchData::set_match_id(const void* value, size_t size) {
  
  match_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:server.MatchData.match_id)
}
::std::string* MatchData::mutable_match_id() {
  
  // @@protoc_insertion_point(field_mutable:server.MatchData.match_id)
  return match_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* MatchData::release_match_id() {
  // @@protoc_insertion_point(field_release:server.MatchData.match_id)
  
  return match_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void MatchData::set_allocated_match_id(::std::string* match_id) {
  if (match_id != NULL) {
    
  } else {
    
  }
  match_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), match_id);
  // @@protoc_insertion_point(field_set_allocated:server.MatchData.match_id)
}

// optional .server.UserPresence presence = 2;
bool MatchData::has_presence() const {
  return this != internal_default_instance() && presence_ != NULL;
}
void MatchData::clear_presence() {
  if (GetArenaNoVirtual() == NULL && presence_ != NULL) delete presence_;
  presence_ = NULL;
}
const ::server::UserPresence& MatchData::presence() const {
  // @@protoc_insertion_point(field_get:server.MatchData.presence)
  return presence_ != NULL ? *presence_
                         : *::server::UserPresence::internal_default_instance();
}
::server::UserPresence* MatchData::mutable_presence() {
  
  if (presence_ == NULL) {
    presence_ = new ::server::UserPresence;
  }
  // @@protoc_insertion_point(field_mutable:server.MatchData.presence)
  return presence_;
}
::server::UserPresence* MatchData::release_presence() {
  // @@protoc_insertion_point(field_release:server.MatchData.presence)
  
  ::server::UserPresence* temp = presence_;
  presence_ = NULL;
  return temp;
}
void MatchData::set_allocated_presence(::server::UserPresence* presence) {
  delete presence_;
  presence_ = presence;
  if (presence) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:server.MatchData.presence)
}

// optional int64 op_code = 3;
void MatchData::clear_op_code() {
  op_code_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 MatchData::op_code() const {
  // @@protoc_insertion_point(field_get:server.MatchData.op_code)
  return op_code_;
}
void MatchData::set_op_code(::google::protobuf::int64 value) {
  
  op_code_ = value;
  // @@protoc_insertion_point(field_set:server.MatchData.op_code)
}

// optional bytes data = 4;
void MatchData::clear_data() {
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& MatchData::data() const {
  // @@protoc_insertion_point(field_get:server.MatchData.data)
  return data_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void MatchData::set_data(const ::std::string& value) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:server.MatchData.data)
}
void MatchData::set_data(const char* value) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:server.MatchData.data)
}
void MatchData::set_data(const void* value, size_t size) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:server.MatchData.data)
}
::std::string* MatchData::mutable_data() {
  
  // @@protoc_insertion_point(field_mutable:server.MatchData.data)
  return data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* MatchData::release_data() {
  // @@protoc_insertion_point(field_release:server.MatchData.data)
  
  return data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void MatchData::set_allocated_data(::std::string* data) {
  if (data != NULL) {
    
  } else {
    
  }
  data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:server.MatchData.data)
}

inline const MatchData* MatchData::internal_default_instance() {
  return &MatchData_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TMatchLeave::kMatchIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TMatchLeave::TMatchLeave()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_api_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:server.TMatchLeave)
}

void TMatchLeave::InitAsDefaultInstance() {
}

TMatchLeave::TMatchLeave(const TMatchLeave& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:server.TMatchLeave)
}

void TMatchLeave::SharedCtor() {
  match_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

TMatchLeave::~TMatchLeave() {
  // @@protoc_insertion_point(destructor:server.TMatchLeave)
  SharedDtor();
}

void TMatchLeave::SharedDtor() {
  match_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void TMatchLeave::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TMatchLeave::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TMatchLeave_descriptor_;
}

const TMatchLeave& TMatchLeave::default_instance() {
  protobuf_InitDefaults_api_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<TMatchLeave> TMatchLeave_default_instance_;

TMatchLeave* TMatchLeave::New(::google::protobuf::Arena* arena) const {
  TMatchLeave* n = new TMatchLeave;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TMatchLeave::Clear() {
// @@protoc_insertion_point(message_clear_start:server.TMatchLeave)
  match_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool TMatchLeave::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:server.TMatchLeave)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes match_id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_match_id()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:server.TMatchLeave)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:server.TMatchLeave)
  return false;
#undef DO_
}

void TMatchLeave::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:server.TMatchLeave)
  // optional bytes match_id = 1;
  if (this->match_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->match_id(), output);
  }

  // @@protoc_insertion_point(serialize_end:server.TMatchLeave)
}

::google::protobuf::uint8* TMatchLeave::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:server.TMatchLeave)
  // optional bytes match_id = 1;
  if (this->match_id().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->match_id(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:server.TMatchLeave)
  return target;
}

size_t TMatchLeave::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:server.TMatchLeave)
  size_t total_size = 0;

  // optional bytes match_id = 1;
  if (this->match_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->match_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TMatchLeave::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:server.TMatchLeave)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const TMatchLeave* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TMatchLeave>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:server.TMatchLeave)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:server.TMatchLeave)
    UnsafeMergeFrom(*source);
  }
}

void TMatchLeave::MergeFrom(const TMatchLeave& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:server.TMatchLeave)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void TMatchLeave::UnsafeMergeFrom(const TMatchLeave& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.match_id().size() > 0) {

    match_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.match_id_);
  }
}

void TMatchLeave::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:server.TMatchLeave)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TMatchLeave::CopyFrom(const TMatchLeave& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:server.TMatchLeave)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool TMatchLeave::IsInitialized() const {

  return true;
}

void TMatchLeave::Swap(TMatchLeave* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TMatchLeave::InternalSwap(TMatchLeave* other) {
  match_id_.Swap(&other->match_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TMatchLeave::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TMatchLeave_descriptor_;
  metadata.reflection = TMatchLeave_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TMatchLeave

// optional bytes match_id = 1;
void TMatchLeave::clear_match_id() {
  match_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& TMatchLeave::match_id() const {
  // @@protoc_insertion_point(field_get:server.TMatchLeave.match_id)
  return match_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TMatchLeave::set_match_id(const ::std::string& value) {
  
  match_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:server.TMatchLeave.match_id)
}
void TMatchLeave::set_match_id(const char* value) {
  
  match_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:server.TMatchLeave.match_id)
}
void TMatchLeave::set_match_id(const void* value, size_t size) {
  
  match_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:server.TMatchLeave.match_id)
}
::std::string* TMatchLeave::mutable_match_id() {
  
  // @@protoc_insertion_point(field_mutable:server.TMatchLeave.match_id)
  return match_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* TMatchLeave::release_match_id() {
  // @@protoc_insertion_point(field_release:server.TMatchLeave.match_id)
  
  return match_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TMatchLeave::set_allocated_match_id(::std::string* match_id) {
  if (match_id != NULL) {
    
  } else {
    
  }
  match_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), match_id);
  // @@protoc_insertion_point(field_set_allocated:server.TMatchLeave.match_id)
}

inline const TMatchLeave* TMatchLeave::internal_default_instance() {
  return &TMatchLeave_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MatchPresence::kMatchIdFieldNumber;
const int MatchPresence::kJoinsFieldNumber;
const int MatchPresence::kLeavesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MatchPresence::MatchPresence()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_api_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:server.MatchPresence)
}

void MatchPresence::InitAsDefaultInstance() {
}

MatchPresence::MatchPresence(const MatchPresence& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:server.MatchPresence)
}

void MatchPresence::SharedCtor() {
  match_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

MatchPresence::~MatchPresence() {
  // @@protoc_insertion_point(destructor:server.MatchPresence)
  SharedDtor();
}

void MatchPresence::SharedDtor() {
  match_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void MatchPresence::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MatchPresence::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MatchPresence_descriptor_;
}

const MatchPresence& MatchPresence::default_instance() {
  protobuf_InitDefaults_api_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<MatchPresence> MatchPresence_default_instance_;

MatchPresence* MatchPresence::New(::google::protobuf::Arena* arena) const {
  MatchPresence* n = new MatchPresence;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MatchPresence::Clear() {
// @@protoc_insertion_point(message_clear_start:server.MatchPresence)
  match_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  joins_.Clear();
  leaves_.Clear();
}

bool MatchPresence::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:server.MatchPresence)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes match_id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_match_id()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_joins;
        break;
      }

      // repeated .server.UserPresence joins = 2;
      case 2: {
        if (tag == 18) {
         parse_joins:
          DO_(input->IncrementRecursionDepth());
         parse_loop_joins:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_joins()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_loop_joins;
        if (input->ExpectTag(26)) goto parse_loop_leaves;
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .server.UserPresence leaves = 3;
      case 3: {
        if (tag == 26) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_leaves:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_leaves()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_loop_leaves;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:server.MatchPresence)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:server.MatchPresence)
  return false;
#undef DO_
}

void MatchPresence::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:server.MatchPresence)
  // optional bytes match_id = 1;
  if (this->match_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->match_id(), output);
  }

  // repeated .server.UserPresence joins = 2;
  for (unsigned int i = 0, n = this->joins_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->joins(i), output);
  }

  // repeated .server.UserPresence leaves = 3;
  for (unsigned int i = 0, n = this->leaves_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->leaves(i), output);
  }

  // @@protoc_insertion_point(serialize_end:server.MatchPresence)
}

::google::protobuf::uint8* MatchPresence::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:server.MatchPresence)
  // optional bytes match_id = 1;
  if (this->match_id().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->match_id(), target);
  }

  // repeated .server.UserPresence joins = 2;
  for (unsigned int i = 0, n = this->joins_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->joins(i), false, target);
  }

  // repeated .server.UserPresence leaves = 3;
  for (unsigned int i = 0, n = this->leaves_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->leaves(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:server.MatchPresence)
  return target;
}

size_t MatchPresence::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:server.MatchPresence)
  size_t total_size = 0;

  // optional bytes match_id = 1;
  if (this->match_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->match_id());
  }

  // repeated .server.UserPresence joins = 2;
  {
    unsigned int count = this->joins_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->joins(i));
    }
  }

  // repeated .server.UserPresence leaves = 3;
  {
    unsigned int count = this->leaves_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->leaves(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MatchPresence::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:server.MatchPresence)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const MatchPresence* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MatchPresence>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:server.MatchPresence)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:server.MatchPresence)
    UnsafeMergeFrom(*source);
  }
}

void MatchPresence::MergeFrom(const MatchPresence& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:server.MatchPresence)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void MatchPresence::UnsafeMergeFrom(const MatchPresence& from) {
  GOOGLE_DCHECK(&from != this);
  joins_.MergeFrom(from.joins_);
  leaves_.MergeFrom(from.leaves_);
  if (from.match_id().size() > 0) {

    match_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.match_id_);
  }
}

void MatchPresence::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:server.MatchPresence)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MatchPresence::CopyFrom(const MatchPresence& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:server.MatchPresence)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool MatchPresence::IsInitialized() const {

  return true;
}

void MatchPresence::Swap(MatchPresence* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MatchPresence::InternalSwap(MatchPresence* other) {
  match_id_.Swap(&other->match_id_);
  joins_.UnsafeArenaSwap(&other->joins_);
  leaves_.UnsafeArenaSwap(&other->leaves_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MatchPresence::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MatchPresence_descriptor_;
  metadata.reflection = MatchPresence_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MatchPresence

// optional bytes match_id = 1;
void MatchPresence::clear_match_id() {
  match_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& MatchPresence::match_id() const {
  // @@protoc_insertion_point(field_get:server.MatchPresence.match_id)
  return match_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void MatchPresence::set_match_id(const ::std::string& value) {
  
  match_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:server.MatchPresence.match_id)
}
void MatchPresence::set_match_id(const char* value) {
  
  match_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:server.MatchPresence.match_id)
}
void MatchPresence::set_match_id(const void* value, size_t size) {
  
  match_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:server.MatchPresence.match_id)
}
::std::string* MatchPresence::mutable_match_id() {
  
  // @@protoc_insertion_point(field_mutable:server.MatchPresence.match_id)
  return match_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* MatchPresence::release_match_id() {
  // @@protoc_insertion_point(field_release:server.MatchPresence.match_id)
  
  return match_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void MatchPresence::set_allocated_match_id(::std::string* match_id) {
  if (match_id != NULL) {
    
  } else {
    
  }
  match_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), match_id);
  // @@protoc_insertion_point(field_set_allocated:server.MatchPresence.match_id)
}

// repeated .server.UserPresence joins = 2;
int MatchPresence::joins_size() const {
  return joins_.size();
}
void MatchPresence::clear_joins() {
  joins_.Clear();
}
const ::server::UserPresence& MatchPresence::joins(int index) const {
  // @@protoc_insertion_point(field_get:server.MatchPresence.joins)
  return joins_.Get(index);
}
::server::UserPresence* MatchPresence::mutable_joins(int index) {
  // @@protoc_insertion_point(field_mutable:server.MatchPresence.joins)
  return joins_.Mutable(index);
}
::server::UserPresence* MatchPresence::add_joins() {
  // @@protoc_insertion_point(field_add:server.MatchPresence.joins)
  return joins_.Add();
}
::google::protobuf::RepeatedPtrField< ::server::UserPresence >*
MatchPresence::mutable_joins() {
  // @@protoc_insertion_point(field_mutable_list:server.MatchPresence.joins)
  return &joins_;
}
const ::google::protobuf::RepeatedPtrField< ::server::UserPresence >&
MatchPresence::joins() const {
  // @@protoc_insertion_point(field_list:server.MatchPresence.joins)
  return joins_;
}

// repeated .server.UserPresence leaves = 3;
int MatchPresence::leaves_size() const {
  return leaves_.size();
}
void MatchPresence::clear_leaves() {
  leaves_.Clear();
}
const ::server::UserPresence& MatchPresence::leaves(int index) const {
  // @@protoc_insertion_point(field_get:server.MatchPresence.leaves)
  return leaves_.Get(index);
}
::server::UserPresence* MatchPresence::mutable_leaves(int index) {
  // @@protoc_insertion_point(field_mutable:server.MatchPresence.leaves)
  return leaves_.Mutable(index);
}
::server::UserPresence* MatchPresence::add_leaves() {
  // @@protoc_insertion_point(field_add:server.MatchPresence.leaves)
  return leaves_.Add();
}
::google::protobuf::RepeatedPtrField< ::server::UserPresence >*
MatchPresence::mutable_leaves() {
  // @@protoc_insertion_point(field_mutable_list:server.MatchPresence.leaves)
  return &leaves_;
}
const ::google::protobuf::RepeatedPtrField< ::server::UserPresence >&
MatchPresence::leaves() const {
  // @@protoc_insertion_point(field_list:server.MatchPresence.leaves)
  return leaves_;
}

inline const MatchPresence* MatchPresence::internal_default_instance() {
  return &MatchPresence_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TStorageFetch_StorageKey::kBucketFieldNumber;
const int TStorageFetch_StorageKey::kCollectionFieldNumber;
const int TStorageFetch_StorageKey::kRecordFieldNumber;
const int TStorageFetch_StorageKey::kUserIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TStorageFetch_StorageKey::TStorageFetch_StorageKey()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_api_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:server.TStorageFetch.StorageKey)
}

void TStorageFetch_StorageKey::InitAsDefaultInstance() {
}

TStorageFetch_StorageKey::TStorageFetch_StorageKey(const TStorageFetch_StorageKey& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:server.TStorageFetch.StorageKey)
}

void TStorageFetch_StorageKey::SharedCtor() {
  bucket_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  collection_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  record_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  user_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

TStorageFetch_StorageKey::~TStorageFetch_StorageKey() {
  // @@protoc_insertion_point(destructor:server.TStorageFetch.StorageKey)
  SharedDtor();
}

void TStorageFetch_StorageKey::SharedDtor() {
  bucket_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  collection_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  record_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  user_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void TStorageFetch_StorageKey::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TStorageFetch_StorageKey::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TStorageFetch_StorageKey_descriptor_;
}

const TStorageFetch_StorageKey& TStorageFetch_StorageKey::default_instance() {
  protobuf_InitDefaults_api_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<TStorageFetch_StorageKey> TStorageFetch_StorageKey_default_instance_;

TStorageFetch_StorageKey* TStorageFetch_StorageKey::New(::google::protobuf::Arena* arena) const {
  TStorageFetch_StorageKey* n = new TStorageFetch_StorageKey;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TStorageFetch_StorageKey::Clear() {
// @@protoc_insertion_point(message_clear_start:server.TStorageFetch.StorageKey)
  bucket_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  collection_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  record_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  user_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool TStorageFetch_StorageKey::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:server.TStorageFetch.StorageKey)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string bucket = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_bucket()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->bucket().data(), this->bucket().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "server.TStorageFetch.StorageKey.bucket"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_collection;
        break;
      }

      // optional string collection = 2;
      case 2: {
        if (tag == 18) {
         parse_collection:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_collection()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->collection().data(), this->collection().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "server.TStorageFetch.StorageKey.collection"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_record;
        break;
      }

      // optional string record = 3;
      case 3: {
        if (tag == 26) {
         parse_record:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_record()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->record().data(), this->record().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "server.TStorageFetch.StorageKey.record"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_user_id;
        break;
      }

      // optional bytes user_id = 4;
      case 4: {
        if (tag == 34) {
         parse_user_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_user_id()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:server.TStorageFetch.StorageKey)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:server.TStorageFetch.StorageKey)
  return false;
#undef DO_
}

void TStorageFetch_StorageKey::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:server.TStorageFetch.StorageKey)
  // optional string bucket = 1;
  if (this->bucket().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->bucket().data(), this->bucket().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server.TStorageFetch.StorageKey.bucket");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->bucket(), output);
  }

  // optional string collection = 2;
  if (this->collection().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->collection().data(), this->collection().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server.TStorageFetch.StorageKey.collection");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->collection(), output);
  }

  // optional string record = 3;
  if (this->record().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->record().data(), this->record().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server.TStorageFetch.StorageKey.record");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->record(), output);
  }

  // optional bytes user_id = 4;
  if (this->user_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->user_id(), output);
  }

  // @@protoc_insertion_point(serialize_end:server.TStorageFetch.StorageKey)
}

::google::protobuf::uint8* TStorageFetch_StorageKey::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:server.TStorageFetch.StorageKey)
  // optional string bucket = 1;
  if (this->bucket().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->bucket().data(), this->bucket().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server.TStorageFetch.StorageKey.bucket");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->bucket(), target);
  }

  // optional string collection = 2;
  if (this->collection().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->collection().data(), this->collection().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server.TStorageFetch.StorageKey.collection");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->collection(), target);
  }

  // optional string record = 3;
  if (this->record().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->record().data(), this->record().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server.TStorageFetch.StorageKey.record");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->record(), target);
  }

  // optional bytes user_id = 4;
  if (this->user_id().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->user_id(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:server.TStorageFetch.StorageKey)
  return target;
}

size_t TStorageFetch_StorageKey::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:server.TStorageFetch.StorageKey)
  size_t total_size = 0;

  // optional string bucket = 1;
  if (this->bucket().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->bucket());
  }

  // optional string collection = 2;
  if (this->collection().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->collection());
  }

  // optional string record = 3;
  if (this->record().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->record());
  }

  // optional bytes user_id = 4;
  if (this->user_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->user_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TStorageFetch_StorageKey::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:server.TStorageFetch.StorageKey)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const TStorageFetch_StorageKey* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TStorageFetch_StorageKey>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:server.TStorageFetch.StorageKey)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:server.TStorageFetch.StorageKey)
    UnsafeMergeFrom(*source);
  }
}

void TStorageFetch_StorageKey::MergeFrom(const TStorageFetch_StorageKey& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:server.TStorageFetch.StorageKey)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void TStorageFetch_StorageKey::UnsafeMergeFrom(const TStorageFetch_StorageKey& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.bucket().size() > 0) {

    bucket_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.bucket_);
  }
  if (from.collection().size() > 0) {

    collection_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.collection_);
  }
  if (from.record().size() > 0) {

    record_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.record_);
  }
  if (from.user_id().size() > 0) {

    user_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.user_id_);
  }
}

void TStorageFetch_StorageKey::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:server.TStorageFetch.StorageKey)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TStorageFetch_StorageKey::CopyFrom(const TStorageFetch_StorageKey& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:server.TStorageFetch.StorageKey)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool TStorageFetch_StorageKey::IsInitialized() const {

  return true;
}

void TStorageFetch_StorageKey::Swap(TStorageFetch_StorageKey* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TStorageFetch_StorageKey::InternalSwap(TStorageFetch_StorageKey* other) {
  bucket_.Swap(&other->bucket_);
  collection_.Swap(&other->collection_);
  record_.Swap(&other->record_);
  user_id_.Swap(&other->user_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TStorageFetch_StorageKey::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TStorageFetch_StorageKey_descriptor_;
  metadata.reflection = TStorageFetch_StorageKey_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TStorageFetch::kKeysFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TStorageFetch::TStorageFetch()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_api_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:server.TStorageFetch)
}

void TStorageFetch::InitAsDefaultInstance() {
}

TStorageFetch::TStorageFetch(const TStorageFetch& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:server.TStorageFetch)
}

void TStorageFetch::SharedCtor() {
  _cached_size_ = 0;
}

TStorageFetch::~TStorageFetch() {
  // @@protoc_insertion_point(destructor:server.TStorageFetch)
  SharedDtor();
}

void TStorageFetch::SharedDtor() {
}

void TStorageFetch::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TStorageFetch::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TStorageFetch_descriptor_;
}

const TStorageFetch& TStorageFetch::default_instance() {
  protobuf_InitDefaults_api_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<TStorageFetch> TStorageFetch_default_instance_;

TStorageFetch* TStorageFetch::New(::google::protobuf::Arena* arena) const {
  TStorageFetch* n = new TStorageFetch;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TStorageFetch::Clear() {
// @@protoc_insertion_point(message_clear_start:server.TStorageFetch)
  keys_.Clear();
}

bool TStorageFetch::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:server.TStorageFetch)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .server.TStorageFetch.StorageKey keys = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_keys:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_keys()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_keys;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:server.TStorageFetch)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:server.TStorageFetch)
  return false;
#undef DO_
}

void TStorageFetch::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:server.TStorageFetch)
  // repeated .server.TStorageFetch.StorageKey keys = 1;
  for (unsigned int i = 0, n = this->keys_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->keys(i), output);
  }

  // @@protoc_insertion_point(serialize_end:server.TStorageFetch)
}

::google::protobuf::uint8* TStorageFetch::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:server.TStorageFetch)
  // repeated .server.TStorageFetch.StorageKey keys = 1;
  for (unsigned int i = 0, n = this->keys_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->keys(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:server.TStorageFetch)
  return target;
}

size_t TStorageFetch::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:server.TStorageFetch)
  size_t total_size = 0;

  // repeated .server.TStorageFetch.StorageKey keys = 1;
  {
    unsigned int count = this->keys_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->keys(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TStorageFetch::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:server.TStorageFetch)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const TStorageFetch* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TStorageFetch>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:server.TStorageFetch)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:server.TStorageFetch)
    UnsafeMergeFrom(*source);
  }
}

void TStorageFetch::MergeFrom(const TStorageFetch& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:server.TStorageFetch)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void TStorageFetch::UnsafeMergeFrom(const TStorageFetch& from) {
  GOOGLE_DCHECK(&from != this);
  keys_.MergeFrom(from.keys_);
}

void TStorageFetch::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:server.TStorageFetch)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TStorageFetch::CopyFrom(const TStorageFetch& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:server.TStorageFetch)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool TStorageFetch::IsInitialized() const {

  return true;
}

void TStorageFetch::Swap(TStorageFetch* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TStorageFetch::InternalSwap(TStorageFetch* other) {
  keys_.UnsafeArenaSwap(&other->keys_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TStorageFetch::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TStorageFetch_descriptor_;
  metadata.reflection = TStorageFetch_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TStorageFetch_StorageKey

// optional string bucket = 1;
void TStorageFetch_StorageKey::clear_bucket() {
  bucket_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& TStorageFetch_StorageKey::bucket() const {
  // @@protoc_insertion_point(field_get:server.TStorageFetch.StorageKey.bucket)
  return bucket_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TStorageFetch_StorageKey::set_bucket(const ::std::string& value) {
  
  bucket_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:server.TStorageFetch.StorageKey.bucket)
}
void TStorageFetch_StorageKey::set_bucket(const char* value) {
  
  bucket_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:server.TStorageFetch.StorageKey.bucket)
}
void TStorageFetch_StorageKey::set_bucket(const char* value, size_t size) {
  
  bucket_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:server.TStorageFetch.StorageKey.bucket)
}
::std::string* TStorageFetch_StorageKey::mutable_bucket() {
  
  // @@protoc_insertion_point(field_mutable:server.TStorageFetch.StorageKey.bucket)
  return bucket_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* TStorageFetch_StorageKey::release_bucket() {
  // @@protoc_insertion_point(field_release:server.TStorageFetch.StorageKey.bucket)
  
  return bucket_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TStorageFetch_StorageKey::set_allocated_bucket(::std::string* bucket) {
  if (bucket != NULL) {
    
  } else {
    
  }
  bucket_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), bucket);
  // @@protoc_insertion_point(field_set_allocated:server.TStorageFetch.StorageKey.bucket)
}

// optional string collection = 2;
void TStorageFetch_StorageKey::clear_collection() {
  collection_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& TStorageFetch_StorageKey::collection() const {
  // @@protoc_insertion_point(field_get:server.TStorageFetch.StorageKey.collection)
  return collection_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TStorageFetch_StorageKey::set_collection(const ::std::string& value) {
  
  collection_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:server.TStorageFetch.StorageKey.collection)
}
void TStorageFetch_StorageKey::set_collection(const char* value) {
  
  collection_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:server.TStorageFetch.StorageKey.collection)
}
void TStorageFetch_StorageKey::set_collection(const char* value, size_t size) {
  
  collection_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:server.TStorageFetch.StorageKey.collection)
}
::std::string* TStorageFetch_StorageKey::mutable_collection() {
  
  // @@protoc_insertion_point(field_mutable:server.TStorageFetch.StorageKey.collection)
  return collection_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* TStorageFetch_StorageKey::release_collection() {
  // @@protoc_insertion_point(field_release:server.TStorageFetch.StorageKey.collection)
  
  return collection_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TStorageFetch_StorageKey::set_allocated_collection(::std::string* collection) {
  if (collection != NULL) {
    
  } else {
    
  }
  collection_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), collection);
  // @@protoc_insertion_point(field_set_allocated:server.TStorageFetch.StorageKey.collection)
}

// optional string record = 3;
void TStorageFetch_StorageKey::clear_record() {
  record_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& TStorageFetch_StorageKey::record() const {
  // @@protoc_insertion_point(field_get:server.TStorageFetch.StorageKey.record)
  return record_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TStorageFetch_StorageKey::set_record(const ::std::string& value) {
  
  record_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:server.TStorageFetch.StorageKey.record)
}
void TStorageFetch_StorageKey::set_record(const char* value) {
  
  record_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:server.TStorageFetch.StorageKey.record)
}
void TStorageFetch_StorageKey::set_record(const char* value, size_t size) {
  
  record_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:server.TStorageFetch.StorageKey.record)
}
::std::string* TStorageFetch_StorageKey::mutable_record() {
  
  // @@protoc_insertion_point(field_mutable:server.TStorageFetch.StorageKey.record)
  return record_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* TStorageFetch_StorageKey::release_record() {
  // @@protoc_insertion_point(field_release:server.TStorageFetch.StorageKey.record)
  
  return record_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TStorageFetch_StorageKey::set_allocated_record(::std::string* record) {
  if (record != NULL) {
    
  } else {
    
  }
  record_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), record);
  // @@protoc_insertion_point(field_set_allocated:server.TStorageFetch.StorageKey.record)
}

// optional bytes user_id = 4;
void TStorageFetch_StorageKey::clear_user_id() {
  user_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& TStorageFetch_StorageKey::user_id() const {
  // @@protoc_insertion_point(field_get:server.TStorageFetch.StorageKey.user_id)
  return user_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TStorageFetch_StorageKey::set_user_id(const ::std::string& value) {
  
  user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:server.TStorageFetch.StorageKey.user_id)
}
void TStorageFetch_StorageKey::set_user_id(const char* value) {
  
  user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:server.TStorageFetch.StorageKey.user_id)
}
void TStorageFetch_StorageKey::set_user_id(const void* value, size_t size) {
  
  user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:server.TStorageFetch.StorageKey.user_id)
}
::std::string* TStorageFetch_StorageKey::mutable_user_id() {
  
  // @@protoc_insertion_point(field_mutable:server.TStorageFetch.StorageKey.user_id)
  return user_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* TStorageFetch_StorageKey::release_user_id() {
  // @@protoc_insertion_point(field_release:server.TStorageFetch.StorageKey.user_id)
  
  return user_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TStorageFetch_StorageKey::set_allocated_user_id(::std::string* user_id) {
  if (user_id != NULL) {
    
  } else {
    
  }
  user_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), user_id);
  // @@protoc_insertion_point(field_set_allocated:server.TStorageFetch.StorageKey.user_id)
}

inline const TStorageFetch_StorageKey* TStorageFetch_StorageKey::internal_default_instance() {
  return &TStorageFetch_StorageKey_default_instance_.get();
}
// -------------------------------------------------------------------

// TStorageFetch

// repeated .server.TStorageFetch.StorageKey keys = 1;
int TStorageFetch::keys_size() const {
  return keys_.size();
}
void TStorageFetch::clear_keys() {
  keys_.Clear();
}
const ::server::TStorageFetch_StorageKey& TStorageFetch::keys(int index) const {
  // @@protoc_insertion_point(field_get:server.TStorageFetch.keys)
  return keys_.Get(index);
}
::server::TStorageFetch_StorageKey* TStorageFetch::mutable_keys(int index) {
  // @@protoc_insertion_point(field_mutable:server.TStorageFetch.keys)
  return keys_.Mutable(index);
}
::server::TStorageFetch_StorageKey* TStorageFetch::add_keys() {
  // @@protoc_insertion_point(field_add:server.TStorageFetch.keys)
  return keys_.Add();
}
::google::protobuf::RepeatedPtrField< ::server::TStorageFetch_StorageKey >*
TStorageFetch::mutable_keys() {
  // @@protoc_insertion_point(field_mutable_list:server.TStorageFetch.keys)
  return &keys_;
}
const ::google::protobuf::RepeatedPtrField< ::server::TStorageFetch_StorageKey >&
TStorageFetch::keys() const {
  // @@protoc_insertion_point(field_list:server.TStorageFetch.keys)
  return keys_;
}

inline const TStorageFetch* TStorageFetch::internal_default_instance() {
  return &TStorageFetch_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TStorageData_StorageData::kBucketFieldNumber;
const int TStorageData_StorageData::kCollectionFieldNumber;
const int TStorageData_StorageData::kRecordFieldNumber;
const int TStorageData_StorageData::kUserIdFieldNumber;
const int TStorageData_StorageData::kValueFieldNumber;
const int TStorageData_StorageData::kVersionFieldNumber;
const int TStorageData_StorageData::kPermissionReadFieldNumber;
const int TStorageData_StorageData::kPermissionWriteFieldNumber;
const int TStorageData_StorageData::kCreatedAtFieldNumber;
const int TStorageData_StorageData::kUpdatedAtFieldNumber;
const int TStorageData_StorageData::kExpiresAtFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TStorageData_StorageData::TStorageData_StorageData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_api_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:server.TStorageData.StorageData)
}

void TStorageData_StorageData::InitAsDefaultInstance() {
}

TStorageData_StorageData::TStorageData_StorageData(const TStorageData_StorageData& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:server.TStorageData.StorageData)
}

void TStorageData_StorageData::SharedCtor() {
  bucket_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  collection_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  record_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  user_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&permission_read_, 0, reinterpret_cast<char*>(&expires_at_) -
    reinterpret_cast<char*>(&permission_read_) + sizeof(expires_at_));
  _cached_size_ = 0;
}

TStorageData_StorageData::~TStorageData_StorageData() {
  // @@protoc_insertion_point(destructor:server.TStorageData.StorageData)
  SharedDtor();
}

void TStorageData_StorageData::SharedDtor() {
  bucket_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  collection_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  record_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  user_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  version_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void TStorageData_StorageData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TStorageData_StorageData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TStorageData_StorageData_descriptor_;
}

const TStorageData_StorageData& TStorageData_StorageData::default_instance() {
  protobuf_InitDefaults_api_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<TStorageData_StorageData> TStorageData_StorageData_default_instance_;

TStorageData_StorageData* TStorageData_StorageData::New(::google::protobuf::Arena* arena) const {
  TStorageData_StorageData* n = new TStorageData_StorageData;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TStorageData_StorageData::Clear() {
// @@protoc_insertion_point(message_clear_start:server.TStorageData.StorageData)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(TStorageData_StorageData, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<TStorageData_StorageData*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(permission_read_, permission_write_);
  bucket_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  collection_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  record_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  user_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ZR_(created_at_, expires_at_);

#undef ZR_HELPER_
#undef ZR_

}

bool TStorageData_StorageData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:server.TStorageData.StorageData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string bucket = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_bucket()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->bucket().data(), this->bucket().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "server.TStorageData.StorageData.bucket"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_collection;
        break;
      }

      // optional string collection = 2;
      case 2: {
        if (tag == 18) {
         parse_collection:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_collection()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->collection().data(), this->collection().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "server.TStorageData.StorageData.collection"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_record;
        break;
      }

      // optional string record = 3;
      case 3: {
        if (tag == 26) {
         parse_record:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_record()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->record().data(), this->record().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "server.TStorageData.StorageData.record"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_user_id;
        break;
      }

      // optional bytes user_id = 4;
      case 4: {
        if (tag == 34) {
         parse_user_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_user_id()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_value;
        break;
      }

      // optional bytes value = 5;
      case 5: {
        if (tag == 42) {
         parse_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_value()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_version;
        break;
      }

      // optional bytes version = 6;
      case 6: {
        if (tag == 50) {
         parse_version:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_version()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_permission_read;
        break;
      }

      // optional int64 permission_read = 7;
      case 7: {
        if (tag == 56) {
         parse_permission_read:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &permission_read_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_permission_write;
        break;
      }

      // optional int64 permission_write = 8;
      case 8: {
        if (tag == 64) {
         parse_permission_write:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &permission_write_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_created_at;
        break;
      }

      // optional int64 created_at = 9;
      case 9: {
        if (tag == 72) {
         parse_created_at:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &created_at_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_updated_at;
        break;
      }

      // optional int64 updated_at = 10;
      case 10: {
        if (tag == 80) {
         parse_updated_at:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &updated_at_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_expires_at;
        break;
      }

      // optional int64 expires_at = 11;
      case 11: {
        if (tag == 88) {
         parse_expires_at:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &expires_at_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:server.TStorageData.StorageData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:server.TStorageData.StorageData)
  return false;
#undef DO_
}

void TStorageData_StorageData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:server.TStorageData.StorageData)
  // optional string bucket = 1;
  if (this->bucket().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->bucket().data(), this->bucket().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server.TStorageData.StorageData.bucket");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->bucket(), output);
  }

  // optional string collection = 2;
  if (this->collection().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->collection().data(), this->collection().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server.TStorageData.StorageData.collection");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->collection(), output);
  }

  // optional string record = 3;
  if (this->record().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->record().data(), this->record().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server.TStorageData.StorageData.record");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->record(), output);
  }

  // optional bytes user_id = 4;
  if (this->user_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->user_id(), output);
  }

  // optional bytes value = 5;
  if (this->value().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      5, this->value(), output);
  }

  // optional bytes version = 6;
  if (this->version().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      6, this->version(), output);
  }

  // optional int64 permission_read = 7;
  if (this->permission_read() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(7, this->permission_read(), output);
  }

  // optional int64 permission_write = 8;
  if (this->permission_write() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(8, this->permission_write(), output);
  }

  // optional int64 created_at = 9;
  if (this->created_at() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(9, this->created_at(), output);
  }

  // optional int64 updated_at = 10;
  if (this->updated_at() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(10, this->updated_at(), output);
  }

  // optional int64 expires_at = 11;
  if (this->expires_at() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(11, this->expires_at(), output);
  }

  // @@protoc_insertion_point(serialize_end:server.TStorageData.StorageData)
}

::google::protobuf::uint8* TStorageData_StorageData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:server.TStorageData.StorageData)
  // optional string bucket = 1;
  if (this->bucket().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->bucket().data(), this->bucket().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server.TStorageData.StorageData.bucket");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->bucket(), target);
  }

  // optional string collection = 2;
  if (this->collection().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->collection().data(), this->collection().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server.TStorageData.StorageData.collection");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->collection(), target);
  }

  // optional string record = 3;
  if (this->record().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->record().data(), this->record().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server.TStorageData.StorageData.record");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->record(), target);
  }

  // optional bytes user_id = 4;
  if (this->user_id().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->user_id(), target);
  }

  // optional bytes value = 5;
  if (this->value().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->value(), target);
  }

  // optional bytes version = 6;
  if (this->version().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        6, this->version(), target);
  }

  // optional int64 permission_read = 7;
  if (this->permission_read() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(7, this->permission_read(), target);
  }

  // optional int64 permission_write = 8;
  if (this->permission_write() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(8, this->permission_write(), target);
  }

  // optional int64 created_at = 9;
  if (this->created_at() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(9, this->created_at(), target);
  }

  // optional int64 updated_at = 10;
  if (this->updated_at() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(10, this->updated_at(), target);
  }

  // optional int64 expires_at = 11;
  if (this->expires_at() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(11, this->expires_at(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:server.TStorageData.StorageData)
  return target;
}

size_t TStorageData_StorageData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:server.TStorageData.StorageData)
  size_t total_size = 0;

  // optional string bucket = 1;
  if (this->bucket().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->bucket());
  }

  // optional string collection = 2;
  if (this->collection().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->collection());
  }

  // optional string record = 3;
  if (this->record().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->record());
  }

  // optional bytes user_id = 4;
  if (this->user_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->user_id());
  }

  // optional bytes value = 5;
  if (this->value().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->value());
  }

  // optional bytes version = 6;
  if (this->version().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->version());
  }

  // optional int64 permission_read = 7;
  if (this->permission_read() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->permission_read());
  }

  // optional int64 permission_write = 8;
  if (this->permission_write() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->permission_write());
  }

  // optional int64 created_at = 9;
  if (this->created_at() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->created_at());
  }

  // optional int64 updated_at = 10;
  if (this->updated_at() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->updated_at());
  }

  // optional int64 expires_at = 11;
  if (this->expires_at() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->expires_at());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TStorageData_StorageData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:server.TStorageData.StorageData)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const TStorageData_StorageData* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TStorageData_StorageData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:server.TStorageData.StorageData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:server.TStorageData.StorageData)
    UnsafeMergeFrom(*source);
  }
}

void TStorageData_StorageData::MergeFrom(const TStorageData_StorageData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:server.TStorageData.StorageData)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void TStorageData_StorageData::UnsafeMergeFrom(const TStorageData_StorageData& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.bucket().size() > 0) {

    bucket_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.bucket_);
  }
  if (from.collection().size() > 0) {

    collection_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.collection_);
  }
  if (from.record().size() > 0) {

    record_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.record_);
  }
  if (from.user_id().size() > 0) {

    user_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.user_id_);
  }
  if (from.value().size() > 0) {

    value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.value_);
  }
  if (from.version().size() > 0) {

    version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.version_);
  }
  if (from.permission_read() != 0) {
    set_permission_read(from.permission_read());
  }
  if (from.permission_write() != 0) {
    set_permission_write(from.permission_write());
  }
  if (from.created_at() != 0) {
    set_created_at(from.created_at());
  }
  if (from.updated_at() != 0) {
    set_updated_at(from.updated_at());
  }
  if (from.expires_at() != 0) {
    set_expires_at(from.expires_at());
  }
}

void TStorageData_StorageData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:server.TStorageData.StorageData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TStorageData_StorageData::CopyFrom(const TStorageData_StorageData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:server.TStorageData.StorageData)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool TStorageData_StorageData::IsInitialized() const {

  return true;
}

void TStorageData_StorageData::Swap(TStorageData_StorageData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TStorageData_StorageData::InternalSwap(TStorageData_StorageData* other) {
  bucket_.Swap(&other->bucket_);
  collection_.Swap(&other->collection_);
  record_.Swap(&other->record_);
  user_id_.Swap(&other->user_id_);
  value_.Swap(&other->value_);
  version_.Swap(&other->version_);
  std::swap(permission_read_, other->permission_read_);
  std::swap(permission_write_, other->permission_write_);
  std::swap(created_at_, other->created_at_);
  std::swap(updated_at_, other->updated_at_);
  std::swap(expires_at_, other->expires_at_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TStorageData_StorageData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TStorageData_StorageData_descriptor_;
  metadata.reflection = TStorageData_StorageData_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TStorageData::kDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TStorageData::TStorageData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_api_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:server.TStorageData)
}

void TStorageData::InitAsDefaultInstance() {
}

TStorageData::TStorageData(const TStorageData& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:server.TStorageData)
}

void TStorageData::SharedCtor() {
  _cached_size_ = 0;
}

TStorageData::~TStorageData() {
  // @@protoc_insertion_point(destructor:server.TStorageData)
  SharedDtor();
}

void TStorageData::SharedDtor() {
}

void TStorageData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TStorageData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TStorageData_descriptor_;
}

const TStorageData& TStorageData::default_instance() {
  protobuf_InitDefaults_api_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<TStorageData> TStorageData_default_instance_;

TStorageData* TStorageData::New(::google::protobuf::Arena* arena) const {
  TStorageData* n = new TStorageData;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TStorageData::Clear() {
// @@protoc_insertion_point(message_clear_start:server.TStorageData)
  data_.Clear();
}

bool TStorageData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:server.TStorageData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .server.TStorageData.StorageData data = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_data;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:server.TStorageData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:server.TStorageData)
  return false;
#undef DO_
}

void TStorageData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:server.TStorageData)
  // repeated .server.TStorageData.StorageData data = 1;
  for (unsigned int i = 0, n = this->data_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->data(i), output);
  }

  // @@protoc_insertion_point(serialize_end:server.TStorageData)
}

::google::protobuf::uint8* TStorageData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:server.TStorageData)
  // repeated .server.TStorageData.StorageData data = 1;
  for (unsigned int i = 0, n = this->data_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->data(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:server.TStorageData)
  return target;
}

size_t TStorageData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:server.TStorageData)
  size_t total_size = 0;

  // repeated .server.TStorageData.StorageData data = 1;
  {
    unsigned int count = this->data_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->data(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TStorageData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:server.TStorageData)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const TStorageData* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TStorageData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:server.TStorageData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:server.TStorageData)
    UnsafeMergeFrom(*source);
  }
}

void TStorageData::MergeFrom(const TStorageData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:server.TStorageData)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void TStorageData::UnsafeMergeFrom(const TStorageData& from) {
  GOOGLE_DCHECK(&from != this);
  data_.MergeFrom(from.data_);
}

void TStorageData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:server.TStorageData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TStorageData::CopyFrom(const TStorageData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:server.TStorageData)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool TStorageData::IsInitialized() const {

  return true;
}

void TStorageData::Swap(TStorageData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TStorageData::InternalSwap(TStorageData* other) {
  data_.UnsafeArenaSwap(&other->data_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TStorageData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TStorageData_descriptor_;
  metadata.reflection = TStorageData_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TStorageData_StorageData

// optional string bucket = 1;
void TStorageData_StorageData::clear_bucket() {
  bucket_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& TStorageData_StorageData::bucket() const {
  // @@protoc_insertion_point(field_get:server.TStorageData.StorageData.bucket)
  return bucket_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TStorageData_StorageData::set_bucket(const ::std::string& value) {
  
  bucket_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:server.TStorageData.StorageData.bucket)
}
void TStorageData_StorageData::set_bucket(const char* value) {
  
  bucket_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:server.TStorageData.StorageData.bucket)
}
void TStorageData_StorageData::set_bucket(const char* value, size_t size) {
  
  bucket_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:server.TStorageData.StorageData.bucket)
}
::std::string* TStorageData_StorageData::mutable_bucket() {
  
  // @@protoc_insertion_point(field_mutable:server.TStorageData.StorageData.bucket)
  return bucket_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* TStorageData_StorageData::release_bucket() {
  // @@protoc_insertion_point(field_release:server.TStorageData.StorageData.bucket)
  
  return bucket_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TStorageData_StorageData::set_allocated_bucket(::std::string* bucket) {
  if (bucket != NULL) {
    
  } else {
    
  }
  bucket_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), bucket);
  // @@protoc_insertion_point(field_set_allocated:server.TStorageData.StorageData.bucket)
}

// optional string collection = 2;
void TStorageData_StorageData::clear_collection() {
  collection_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& TStorageData_StorageData::collection() const {
  // @@protoc_insertion_point(field_get:server.TStorageData.StorageData.collection)
  return collection_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TStorageData_StorageData::set_collection(const ::std::string& value) {
  
  collection_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:server.TStorageData.StorageData.collection)
}
void TStorageData_StorageData::set_collection(const char* value) {
  
  collection_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:server.TStorageData.StorageData.collection)
}
void TStorageData_StorageData::set_collection(const char* value, size_t size) {
  
  collection_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:server.TStorageData.StorageData.collection)
}
::std::string* TStorageData_StorageData::mutable_collection() {
  
  // @@protoc_insertion_point(field_mutable:server.TStorageData.StorageData.collection)
  return collection_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* TStorageData_StorageData::release_collection() {
  // @@protoc_insertion_point(field_release:server.TStorageData.StorageData.collection)
  
  return collection_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TStorageData_StorageData::set_allocated_collection(::std::string* collection) {
  if (collection != NULL) {
    
  } else {
    
  }
  collection_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), collection);
  // @@protoc_insertion_point(field_set_allocated:server.TStorageData.StorageData.collection)
}

// optional string record = 3;
void TStorageData_StorageData::clear_record() {
  record_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& TStorageData_StorageData::record() const {
  // @@protoc_insertion_point(field_get:server.TStorageData.StorageData.record)
  return record_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TStorageData_StorageData::set_record(const ::std::string& value) {
  
  record_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:server.TStorageData.StorageData.record)
}
void TStorageData_StorageData::set_record(const char* value) {
  
  record_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:server.TStorageData.StorageData.record)
}
void TStorageData_StorageData::set_record(const char* value, size_t size) {
  
  record_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:server.TStorageData.StorageData.record)
}
::std::string* TStorageData_StorageData::mutable_record() {
  
  // @@protoc_insertion_point(field_mutable:server.TStorageData.StorageData.record)
  return record_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* TStorageData_StorageData::release_record() {
  // @@protoc_insertion_point(field_release:server.TStorageData.StorageData.record)
  
  return record_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TStorageData_StorageData::set_allocated_record(::std::string* record) {
  if (record != NULL) {
    
  } else {
    
  }
  record_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), record);
  // @@protoc_insertion_point(field_set_allocated:server.TStorageData.StorageData.record)
}

// optional bytes user_id = 4;
void TStorageData_StorageData::clear_user_id() {
  user_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& TStorageData_StorageData::user_id() const {
  // @@protoc_insertion_point(field_get:server.TStorageData.StorageData.user_id)
  return user_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TStorageData_StorageData::set_user_id(const ::std::string& value) {
  
  user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:server.TStorageData.StorageData.user_id)
}
void TStorageData_StorageData::set_user_id(const char* value) {
  
  user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:server.TStorageData.StorageData.user_id)
}
void TStorageData_StorageData::set_user_id(const void* value, size_t size) {
  
  user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:server.TStorageData.StorageData.user_id)
}
::std::string* TStorageData_StorageData::mutable_user_id() {
  
  // @@protoc_insertion_point(field_mutable:server.TStorageData.StorageData.user_id)
  return user_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* TStorageData_StorageData::release_user_id() {
  // @@protoc_insertion_point(field_release:server.TStorageData.StorageData.user_id)
  
  return user_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TStorageData_StorageData::set_allocated_user_id(::std::string* user_id) {
  if (user_id != NULL) {
    
  } else {
    
  }
  user_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), user_id);
  // @@protoc_insertion_point(field_set_allocated:server.TStorageData.StorageData.user_id)
}

// optional bytes value = 5;
void TStorageData_StorageData::clear_value() {
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& TStorageData_StorageData::value() const {
  // @@protoc_insertion_point(field_get:server.TStorageData.StorageData.value)
  return value_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TStorageData_StorageData::set_value(const ::std::string& value) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:server.TStorageData.StorageData.value)
}
void TStorageData_StorageData::set_value(const char* value) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:server.TStorageData.StorageData.value)
}
void TStorageData_StorageData::set_value(const void* value, size_t size) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:server.TStorageData.StorageData.value)
}
::std::string* TStorageData_StorageData::mutable_value() {
  
  // @@protoc_insertion_point(field_mutable:server.TStorageData.StorageData.value)
  return value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* TStorageData_StorageData::release_value() {
  // @@protoc_insertion_point(field_release:server.TStorageData.StorageData.value)
  
  return value_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TStorageData_StorageData::set_allocated_value(::std::string* value) {
  if (value != NULL) {
    
  } else {
    
  }
  value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:server.TStorageData.StorageData.value)
}

// optional bytes version = 6;
void TStorageData_StorageData::clear_version() {
  version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& TStorageData_StorageData::version() const {
  // @@protoc_insertion_point(field_get:server.TStorageData.StorageData.version)
  return version_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TStorageData_StorageData::set_version(const ::std::string& value) {
  
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:server.TStorageData.StorageData.version)
}
void TStorageData_StorageData::set_version(const char* value) {
  
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:server.TStorageData.StorageData.version)
}
void TStorageData_StorageData::set_version(const void* value, size_t size) {
  
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:server.TStorageData.StorageData.version)
}
::std::string* TStorageData_StorageData::mutable_version() {
  
  // @@protoc_insertion_point(field_mutable:server.TStorageData.StorageData.version)
  return version_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* TStorageData_StorageData::release_version() {
  // @@protoc_insertion_point(field_release:server.TStorageData.StorageData.version)
  
  return version_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TStorageData_StorageData::set_allocated_version(::std::string* version) {
  if (version != NULL) {
    
  } else {
    
  }
  version_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), version);
  // @@protoc_insertion_point(field_set_allocated:server.TStorageData.StorageData.version)
}

// optional int64 permission_read = 7;
void TStorageData_StorageData::clear_permission_read() {
  permission_read_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 TStorageData_StorageData::permission_read() const {
  // @@protoc_insertion_point(field_get:server.TStorageData.StorageData.permission_read)
  return permission_read_;
}
void TStorageData_StorageData::set_permission_read(::google::protobuf::int64 value) {
  
  permission_read_ = value;
  // @@protoc_insertion_point(field_set:server.TStorageData.StorageData.permission_read)
}

// optional int64 permission_write = 8;
void TStorageData_StorageData::clear_permission_write() {
  permission_write_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 TStorageData_StorageData::permission_write() const {
  // @@protoc_insertion_point(field_get:server.TStorageData.StorageData.permission_write)
  return permission_write_;
}
void TStorageData_StorageData::set_permission_write(::google::protobuf::int64 value) {
  
  permission_write_ = value;
  // @@protoc_insertion_point(field_set:server.TStorageData.StorageData.permission_write)
}

// optional int64 created_at = 9;
void TStorageData_StorageData::clear_created_at() {
  created_at_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 TStorageData_StorageData::created_at() const {
  // @@protoc_insertion_point(field_get:server.TStorageData.StorageData.created_at)
  return created_at_;
}
void TStorageData_StorageData::set_created_at(::google::protobuf::int64 value) {
  
  created_at_ = value;
  // @@protoc_insertion_point(field_set:server.TStorageData.StorageData.created_at)
}

// optional int64 updated_at = 10;
void TStorageData_StorageData::clear_updated_at() {
  updated_at_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 TStorageData_StorageData::updated_at() const {
  // @@protoc_insertion_point(field_get:server.TStorageData.StorageData.updated_at)
  return updated_at_;
}
void TStorageData_StorageData::set_updated_at(::google::protobuf::int64 value) {
  
  updated_at_ = value;
  // @@protoc_insertion_point(field_set:server.TStorageData.StorageData.updated_at)
}

// optional int64 expires_at = 11;
void TStorageData_StorageData::clear_expires_at() {
  expires_at_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 TStorageData_StorageData::expires_at() const {
  // @@protoc_insertion_point(field_get:server.TStorageData.StorageData.expires_at)
  return expires_at_;
}
void TStorageData_StorageData::set_expires_at(::google::protobuf::int64 value) {
  
  expires_at_ = value;
  // @@protoc_insertion_point(field_set:server.TStorageData.StorageData.expires_at)
}

inline const TStorageData_StorageData* TStorageData_StorageData::internal_default_instance() {
  return &TStorageData_StorageData_default_instance_.get();
}
// -------------------------------------------------------------------

// TStorageData

// repeated .server.TStorageData.StorageData data = 1;
int TStorageData::data_size() const {
  return data_.size();
}
void TStorageData::clear_data() {
  data_.Clear();
}
const ::server::TStorageData_StorageData& TStorageData::data(int index) const {
  // @@protoc_insertion_point(field_get:server.TStorageData.data)
  return data_.Get(index);
}
::server::TStorageData_StorageData* TStorageData::mutable_data(int index) {
  // @@protoc_insertion_point(field_mutable:server.TStorageData.data)
  return data_.Mutable(index);
}
::server::TStorageData_StorageData* TStorageData::add_data() {
  // @@protoc_insertion_point(field_add:server.TStorageData.data)
  return data_.Add();
}
::google::protobuf::RepeatedPtrField< ::server::TStorageData_StorageData >*
TStorageData::mutable_data() {
  // @@protoc_insertion_point(field_mutable_list:server.TStorageData.data)
  return &data_;
}
const ::google::protobuf::RepeatedPtrField< ::server::TStorageData_StorageData >&
TStorageData::data() const {
  // @@protoc_insertion_point(field_list:server.TStorageData.data)
  return data_;
}

inline const TStorageData* TStorageData::internal_default_instance() {
  return &TStorageData_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TStorageWrite_StorageData::kBucketFieldNumber;
const int TStorageWrite_StorageData::kCollectionFieldNumber;
const int TStorageWrite_StorageData::kRecordFieldNumber;
const int TStorageWrite_StorageData::kValueFieldNumber;
const int TStorageWrite_StorageData::kVersionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TStorageWrite_StorageData::TStorageWrite_StorageData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_api_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:server.TStorageWrite.StorageData)
}

void TStorageWrite_StorageData::InitAsDefaultInstance() {
}

TStorageWrite_StorageData::TStorageWrite_StorageData(const TStorageWrite_StorageData& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:server.TStorageWrite.StorageData)
}

void TStorageWrite_StorageData::SharedCtor() {
  bucket_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  collection_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  record_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

TStorageWrite_StorageData::~TStorageWrite_StorageData() {
  // @@protoc_insertion_point(destructor:server.TStorageWrite.StorageData)
  SharedDtor();
}

void TStorageWrite_StorageData::SharedDtor() {
  bucket_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  collection_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  record_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  version_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void TStorageWrite_StorageData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TStorageWrite_StorageData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TStorageWrite_StorageData_descriptor_;
}

const TStorageWrite_StorageData& TStorageWrite_StorageData::default_instance() {
  protobuf_InitDefaults_api_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<TStorageWrite_StorageData> TStorageWrite_StorageData_default_instance_;

TStorageWrite_StorageData* TStorageWrite_StorageData::New(::google::protobuf::Arena* arena) const {
  TStorageWrite_StorageData* n = new TStorageWrite_StorageData;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TStorageWrite_StorageData::Clear() {
// @@protoc_insertion_point(message_clear_start:server.TStorageWrite.StorageData)
  bucket_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  collection_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  record_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool TStorageWrite_StorageData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:server.TStorageWrite.StorageData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string bucket = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_bucket()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->bucket().data(), this->bucket().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "server.TStorageWrite.StorageData.bucket"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_collection;
        break;
      }

      // optional string collection = 2;
      case 2: {
        if (tag == 18) {
         parse_collection:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_collection()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->collection().data(), this->collection().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "server.TStorageWrite.StorageData.collection"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_record;
        break;
      }

      // optional string record = 3;
      case 3: {
        if (tag == 26) {
         parse_record:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_record()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->record().data(), this->record().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "server.TStorageWrite.StorageData.record"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_value;
        break;
      }

      // optional bytes value = 4;
      case 4: {
        if (tag == 34) {
         parse_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_value()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_version;
        break;
      }

      // optional bytes version = 5;
      case 5: {
        if (tag == 42) {
         parse_version:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_version()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:server.TStorageWrite.StorageData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:server.TStorageWrite.StorageData)
  return false;
#undef DO_
}

void TStorageWrite_StorageData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:server.TStorageWrite.StorageData)
  // optional string bucket = 1;
  if (this->bucket().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->bucket().data(), this->bucket().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server.TStorageWrite.StorageData.bucket");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->bucket(), output);
  }

  // optional string collection = 2;
  if (this->collection().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->collection().data(), this->collection().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server.TStorageWrite.StorageData.collection");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->collection(), output);
  }

  // optional string record = 3;
  if (this->record().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->record().data(), this->record().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server.TStorageWrite.StorageData.record");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->record(), output);
  }

  // optional bytes value = 4;
  if (this->value().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->value(), output);
  }

  // optional bytes version = 5;
  if (this->version().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      5, this->version(), output);
  }

  // @@protoc_insertion_point(serialize_end:server.TStorageWrite.StorageData)
}

::google::protobuf::uint8* TStorageWrite_StorageData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:server.TStorageWrite.StorageData)
  // optional string bucket = 1;
  if (this->bucket().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->bucket().data(), this->bucket().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server.TStorageWrite.StorageData.bucket");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->bucket(), target);
  }

  // optional string collection = 2;
  if (this->collection().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->collection().data(), this->collection().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server.TStorageWrite.StorageData.collection");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->collection(), target);
  }

  // optional string record = 3;
  if (this->record().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->record().data(), this->record().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server.TStorageWrite.StorageData.record");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->record(), target);
  }

  // optional bytes value = 4;
  if (this->value().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->value(), target);
  }

  // optional bytes version = 5;
  if (this->version().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->version(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:server.TStorageWrite.StorageData)
  return target;
}

size_t TStorageWrite_StorageData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:server.TStorageWrite.StorageData)
  size_t total_size = 0;

  // optional string bucket = 1;
  if (this->bucket().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->bucket());
  }

  // optional string collection = 2;
  if (this->collection().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->collection());
  }

  // optional string record = 3;
  if (this->record().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->record());
  }

  // optional bytes value = 4;
  if (this->value().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->value());
  }

  // optional bytes version = 5;
  if (this->version().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->version());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TStorageWrite_StorageData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:server.TStorageWrite.StorageData)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const TStorageWrite_StorageData* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TStorageWrite_StorageData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:server.TStorageWrite.StorageData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:server.TStorageWrite.StorageData)
    UnsafeMergeFrom(*source);
  }
}

void TStorageWrite_StorageData::MergeFrom(const TStorageWrite_StorageData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:server.TStorageWrite.StorageData)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void TStorageWrite_StorageData::UnsafeMergeFrom(const TStorageWrite_StorageData& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.bucket().size() > 0) {

    bucket_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.bucket_);
  }
  if (from.collection().size() > 0) {

    collection_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.collection_);
  }
  if (from.record().size() > 0) {

    record_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.record_);
  }
  if (from.value().size() > 0) {

    value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.value_);
  }
  if (from.version().size() > 0) {

    version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.version_);
  }
}

void TStorageWrite_StorageData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:server.TStorageWrite.StorageData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TStorageWrite_StorageData::CopyFrom(const TStorageWrite_StorageData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:server.TStorageWrite.StorageData)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool TStorageWrite_StorageData::IsInitialized() const {

  return true;
}

void TStorageWrite_StorageData::Swap(TStorageWrite_StorageData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TStorageWrite_StorageData::InternalSwap(TStorageWrite_StorageData* other) {
  bucket_.Swap(&other->bucket_);
  collection_.Swap(&other->collection_);
  record_.Swap(&other->record_);
  value_.Swap(&other->value_);
  version_.Swap(&other->version_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TStorageWrite_StorageData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TStorageWrite_StorageData_descriptor_;
  metadata.reflection = TStorageWrite_StorageData_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TStorageWrite::kDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TStorageWrite::TStorageWrite()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_api_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:server.TStorageWrite)
}

void TStorageWrite::InitAsDefaultInstance() {
}

TStorageWrite::TStorageWrite(const TStorageWrite& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:server.TStorageWrite)
}

void TStorageWrite::SharedCtor() {
  _cached_size_ = 0;
}

TStorageWrite::~TStorageWrite() {
  // @@protoc_insertion_point(destructor:server.TStorageWrite)
  SharedDtor();
}

void TStorageWrite::SharedDtor() {
}

void TStorageWrite::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TStorageWrite::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TStorageWrite_descriptor_;
}

const TStorageWrite& TStorageWrite::default_instance() {
  protobuf_InitDefaults_api_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<TStorageWrite> TStorageWrite_default_instance_;

TStorageWrite* TStorageWrite::New(::google::protobuf::Arena* arena) const {
  TStorageWrite* n = new TStorageWrite;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TStorageWrite::Clear() {
// @@protoc_insertion_point(message_clear_start:server.TStorageWrite)
  data_.Clear();
}

bool TStorageWrite::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:server.TStorageWrite)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .server.TStorageWrite.StorageData data = 3;
      case 3: {
        if (tag == 26) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_loop_data;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:server.TStorageWrite)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:server.TStorageWrite)
  return false;
#undef DO_
}

void TStorageWrite::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:server.TStorageWrite)
  // repeated .server.TStorageWrite.StorageData data = 3;
  for (unsigned int i = 0, n = this->data_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->data(i), output);
  }

  // @@protoc_insertion_point(serialize_end:server.TStorageWrite)
}

::google::protobuf::uint8* TStorageWrite::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:server.TStorageWrite)
  // repeated .server.TStorageWrite.StorageData data = 3;
  for (unsigned int i = 0, n = this->data_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->data(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:server.TStorageWrite)
  return target;
}

size_t TStorageWrite::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:server.TStorageWrite)
  size_t total_size = 0;

  // repeated .server.TStorageWrite.StorageData data = 3;
  {
    unsigned int count = this->data_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->data(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TStorageWrite::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:server.TStorageWrite)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const TStorageWrite* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TStorageWrite>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:server.TStorageWrite)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:server.TStorageWrite)
    UnsafeMergeFrom(*source);
  }
}

void TStorageWrite::MergeFrom(const TStorageWrite& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:server.TStorageWrite)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void TStorageWrite::UnsafeMergeFrom(const TStorageWrite& from) {
  GOOGLE_DCHECK(&from != this);
  data_.MergeFrom(from.data_);
}

void TStorageWrite::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:server.TStorageWrite)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TStorageWrite::CopyFrom(const TStorageWrite& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:server.TStorageWrite)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool TStorageWrite::IsInitialized() const {

  return true;
}

void TStorageWrite::Swap(TStorageWrite* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TStorageWrite::InternalSwap(TStorageWrite* other) {
  data_.UnsafeArenaSwap(&other->data_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TStorageWrite::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TStorageWrite_descriptor_;
  metadata.reflection = TStorageWrite_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TStorageWrite_StorageData

// optional string bucket = 1;
void TStorageWrite_StorageData::clear_bucket() {
  bucket_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& TStorageWrite_StorageData::bucket() const {
  // @@protoc_insertion_point(field_get:server.TStorageWrite.StorageData.bucket)
  return bucket_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TStorageWrite_StorageData::set_bucket(const ::std::string& value) {
  
  bucket_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:server.TStorageWrite.StorageData.bucket)
}
void TStorageWrite_StorageData::set_bucket(const char* value) {
  
  bucket_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:server.TStorageWrite.StorageData.bucket)
}
void TStorageWrite_StorageData::set_bucket(const char* value, size_t size) {
  
  bucket_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:server.TStorageWrite.StorageData.bucket)
}
::std::string* TStorageWrite_StorageData::mutable_bucket() {
  
  // @@protoc_insertion_point(field_mutable:server.TStorageWrite.StorageData.bucket)
  return bucket_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* TStorageWrite_StorageData::release_bucket() {
  // @@protoc_insertion_point(field_release:server.TStorageWrite.StorageData.bucket)
  
  return bucket_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TStorageWrite_StorageData::set_allocated_bucket(::std::string* bucket) {
  if (bucket != NULL) {
    
  } else {
    
  }
  bucket_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), bucket);
  // @@protoc_insertion_point(field_set_allocated:server.TStorageWrite.StorageData.bucket)
}

// optional string collection = 2;
void TStorageWrite_StorageData::clear_collection() {
  collection_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& TStorageWrite_StorageData::collection() const {
  // @@protoc_insertion_point(field_get:server.TStorageWrite.StorageData.collection)
  return collection_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TStorageWrite_StorageData::set_collection(const ::std::string& value) {
  
  collection_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:server.TStorageWrite.StorageData.collection)
}
void TStorageWrite_StorageData::set_collection(const char* value) {
  
  collection_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:server.TStorageWrite.StorageData.collection)
}
void TStorageWrite_StorageData::set_collection(const char* value, size_t size) {
  
  collection_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:server.TStorageWrite.StorageData.collection)
}
::std::string* TStorageWrite_StorageData::mutable_collection() {
  
  // @@protoc_insertion_point(field_mutable:server.TStorageWrite.StorageData.collection)
  return collection_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* TStorageWrite_StorageData::release_collection() {
  // @@protoc_insertion_point(field_release:server.TStorageWrite.StorageData.collection)
  
  return collection_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TStorageWrite_StorageData::set_allocated_collection(::std::string* collection) {
  if (collection != NULL) {
    
  } else {
    
  }
  collection_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), collection);
  // @@protoc_insertion_point(field_set_allocated:server.TStorageWrite.StorageData.collection)
}

// optional string record = 3;
void TStorageWrite_StorageData::clear_record() {
  record_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& TStorageWrite_StorageData::record() const {
  // @@protoc_insertion_point(field_get:server.TStorageWrite.StorageData.record)
  return record_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TStorageWrite_StorageData::set_record(const ::std::string& value) {
  
  record_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:server.TStorageWrite.StorageData.record)
}
void TStorageWrite_StorageData::set_record(const char* value) {
  
  record_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:server.TStorageWrite.StorageData.record)
}
void TStorageWrite_StorageData::set_record(const char* value, size_t size) {
  
  record_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:server.TStorageWrite.StorageData.record)
}
::std::string* TStorageWrite_StorageData::mutable_record() {
  
  // @@protoc_insertion_point(field_mutable:server.TStorageWrite.StorageData.record)
  return record_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* TStorageWrite_StorageData::release_record() {
  // @@protoc_insertion_point(field_release:server.TStorageWrite.StorageData.record)
  
  return record_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TStorageWrite_StorageData::set_allocated_record(::std::string* record) {
  if (record != NULL) {
    
  } else {
    
  }
  record_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), record);
  // @@protoc_insertion_point(field_set_allocated:server.TStorageWrite.StorageData.record)
}

// optional bytes value = 4;
void TStorageWrite_StorageData::clear_value() {
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& TStorageWrite_StorageData::value() const {
  // @@protoc_insertion_point(field_get:server.TStorageWrite.StorageData.value)
  return value_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TStorageWrite_StorageData::set_value(const ::std::string& value) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:server.TStorageWrite.StorageData.value)
}
void TStorageWrite_StorageData::set_value(const char* value) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:server.TStorageWrite.StorageData.value)
}
void TStorageWrite_StorageData::set_value(const void* value, size_t size) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:server.TStorageWrite.StorageData.value)
}
::std::string* TStorageWrite_StorageData::mutable_value() {
  
  // @@protoc_insertion_point(field_mutable:server.TStorageWrite.StorageData.value)
  return value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* TStorageWrite_StorageData::release_value() {
  // @@protoc_insertion_point(field_release:server.TStorageWrite.StorageData.value)
  
  return value_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TStorageWrite_StorageData::set_allocated_value(::std::string* value) {
  if (value != NULL) {
    
  } else {
    
  }
  value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:server.TStorageWrite.StorageData.value)
}

// optional bytes version = 5;
void TStorageWrite_StorageData::clear_version() {
  version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& TStorageWrite_StorageData::version() const {
  // @@protoc_insertion_point(field_get:server.TStorageWrite.StorageData.version)
  return version_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TStorageWrite_StorageData::set_version(const ::std::string& value) {
  
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:server.TStorageWrite.StorageData.version)
}
void TStorageWrite_StorageData::set_version(const char* value) {
  
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:server.TStorageWrite.StorageData.version)
}
void TStorageWrite_StorageData::set_version(const void* value, size_t size) {
  
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:server.TStorageWrite.StorageData.version)
}
::std::string* TStorageWrite_StorageData::mutable_version() {
  
  // @@protoc_insertion_point(field_mutable:server.TStorageWrite.StorageData.version)
  return version_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* TStorageWrite_StorageData::release_version() {
  // @@protoc_insertion_point(field_release:server.TStorageWrite.StorageData.version)
  
  return version_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TStorageWrite_StorageData::set_allocated_version(::std::string* version) {
  if (version != NULL) {
    
  } else {
    
  }
  version_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), version);
  // @@protoc_insertion_point(field_set_allocated:server.TStorageWrite.StorageData.version)
}

inline const TStorageWrite_StorageData* TStorageWrite_StorageData::internal_default_instance() {
  return &TStorageWrite_StorageData_default_instance_.get();
}
// -------------------------------------------------------------------

// TStorageWrite

// repeated .server.TStorageWrite.StorageData data = 3;
int TStorageWrite::data_size() const {
  return data_.size();
}
void TStorageWrite::clear_data() {
  data_.Clear();
}
const ::server::TStorageWrite_StorageData& TStorageWrite::data(int index) const {
  // @@protoc_insertion_point(field_get:server.TStorageWrite.data)
  return data_.Get(index);
}
::server::TStorageWrite_StorageData* TStorageWrite::mutable_data(int index) {
  // @@protoc_insertion_point(field_mutable:server.TStorageWrite.data)
  return data_.Mutable(index);
}
::server::TStorageWrite_StorageData* TStorageWrite::add_data() {
  // @@protoc_insertion_point(field_add:server.TStorageWrite.data)
  return data_.Add();
}
::google::protobuf::RepeatedPtrField< ::server::TStorageWrite_StorageData >*
TStorageWrite::mutable_data() {
  // @@protoc_insertion_point(field_mutable_list:server.TStorageWrite.data)
  return &data_;
}
const ::google::protobuf::RepeatedPtrField< ::server::TStorageWrite_StorageData >&
TStorageWrite::data() const {
  // @@protoc_insertion_point(field_list:server.TStorageWrite.data)
  return data_;
}

inline const TStorageWrite* TStorageWrite::internal_default_instance() {
  return &TStorageWrite_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TStorageKey_StorageKey::kBucketFieldNumber;
const int TStorageKey_StorageKey::kCollectionFieldNumber;
const int TStorageKey_StorageKey::kRecordFieldNumber;
const int TStorageKey_StorageKey::kVersionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TStorageKey_StorageKey::TStorageKey_StorageKey()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_api_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:server.TStorageKey.StorageKey)
}

void TStorageKey_StorageKey::InitAsDefaultInstance() {
}

TStorageKey_StorageKey::TStorageKey_StorageKey(const TStorageKey_StorageKey& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:server.TStorageKey.StorageKey)
}

void TStorageKey_StorageKey::SharedCtor() {
  bucket_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  collection_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  record_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

TStorageKey_StorageKey::~TStorageKey_StorageKey() {
  // @@protoc_insertion_point(destructor:server.TStorageKey.StorageKey)
  SharedDtor();
}

void TStorageKey_StorageKey::SharedDtor() {
  bucket_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  collection_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  record_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  version_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void TStorageKey_StorageKey::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TStorageKey_StorageKey::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TStorageKey_StorageKey_descriptor_;
}

const TStorageKey_StorageKey& TStorageKey_StorageKey::default_instance() {
  protobuf_InitDefaults_api_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<TStorageKey_StorageKey> TStorageKey_StorageKey_default_instance_;

TStorageKey_StorageKey* TStorageKey_StorageKey::New(::google::protobuf::Arena* arena) const {
  TStorageKey_StorageKey* n = new TStorageKey_StorageKey;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TStorageKey_StorageKey::Clear() {
// @@protoc_insertion_point(message_clear_start:server.TStorageKey.StorageKey)
  bucket_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  collection_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  record_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool TStorageKey_StorageKey::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:server.TStorageKey.StorageKey)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string bucket = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_bucket()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->bucket().data(), this->bucket().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "server.TStorageKey.StorageKey.bucket"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_collection;
        break;
      }

      // optional string collection = 2;
      case 2: {
        if (tag == 18) {
         parse_collection:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_collection()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->collection().data(), this->collection().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "server.TStorageKey.StorageKey.collection"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_record;
        break;
      }

      // optional string record = 3;
      case 3: {
        if (tag == 26) {
         parse_record:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_record()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->record().data(), this->record().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "server.TStorageKey.StorageKey.record"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_version;
        break;
      }

      // optional bytes version = 4;
      case 4: {
        if (tag == 34) {
         parse_version:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_version()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:server.TStorageKey.StorageKey)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:server.TStorageKey.StorageKey)
  return false;
#undef DO_
}

void TStorageKey_StorageKey::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:server.TStorageKey.StorageKey)
  // optional string bucket = 1;
  if (this->bucket().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->bucket().data(), this->bucket().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server.TStorageKey.StorageKey.bucket");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->bucket(), output);
  }

  // optional string collection = 2;
  if (this->collection().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->collection().data(), this->collection().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server.TStorageKey.StorageKey.collection");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->collection(), output);
  }

  // optional string record = 3;
  if (this->record().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->record().data(), this->record().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server.TStorageKey.StorageKey.record");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->record(), output);
  }

  // optional bytes version = 4;
  if (this->version().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->version(), output);
  }

  // @@protoc_insertion_point(serialize_end:server.TStorageKey.StorageKey)
}

::google::protobuf::uint8* TStorageKey_StorageKey::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:server.TStorageKey.StorageKey)
  // optional string bucket = 1;
  if (this->bucket().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->bucket().data(), this->bucket().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server.TStorageKey.StorageKey.bucket");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->bucket(), target);
  }

  // optional string collection = 2;
  if (this->collection().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->collection().data(), this->collection().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server.TStorageKey.StorageKey.collection");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->collection(), target);
  }

  // optional string record = 3;
  if (this->record().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->record().data(), this->record().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server.TStorageKey.StorageKey.record");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->record(), target);
  }

  // optional bytes version = 4;
  if (this->version().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->version(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:server.TStorageKey.StorageKey)
  return target;
}

size_t TStorageKey_StorageKey::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:server.TStorageKey.StorageKey)
  size_t total_size = 0;

  // optional string bucket = 1;
  if (this->bucket().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->bucket());
  }

  // optional string collection = 2;
  if (this->collection().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->collection());
  }

  // optional string record = 3;
  if (this->record().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->record());
  }

  // optional bytes version = 4;
  if (this->version().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->version());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TStorageKey_StorageKey::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:server.TStorageKey.StorageKey)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const TStorageKey_StorageKey* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TStorageKey_StorageKey>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:server.TStorageKey.StorageKey)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:server.TStorageKey.StorageKey)
    UnsafeMergeFrom(*source);
  }
}

void TStorageKey_StorageKey::MergeFrom(const TStorageKey_StorageKey& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:server.TStorageKey.StorageKey)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void TStorageKey_StorageKey::UnsafeMergeFrom(const TStorageKey_StorageKey& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.bucket().size() > 0) {

    bucket_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.bucket_);
  }
  if (from.collection().size() > 0) {

    collection_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.collection_);
  }
  if (from.record().size() > 0) {

    record_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.record_);
  }
  if (from.version().size() > 0) {

    version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.version_);
  }
}

void TStorageKey_StorageKey::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:server.TStorageKey.StorageKey)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TStorageKey_StorageKey::CopyFrom(const TStorageKey_StorageKey& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:server.TStorageKey.StorageKey)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool TStorageKey_StorageKey::IsInitialized() const {

  return true;
}

void TStorageKey_StorageKey::Swap(TStorageKey_StorageKey* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TStorageKey_StorageKey::InternalSwap(TStorageKey_StorageKey* other) {
  bucket_.Swap(&other->bucket_);
  collection_.Swap(&other->collection_);
  record_.Swap(&other->record_);
  version_.Swap(&other->version_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TStorageKey_StorageKey::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TStorageKey_StorageKey_descriptor_;
  metadata.reflection = TStorageKey_StorageKey_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TStorageKey::kKeysFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TStorageKey::TStorageKey()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_api_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:server.TStorageKey)
}

void TStorageKey::InitAsDefaultInstance() {
}

TStorageKey::TStorageKey(const TStorageKey& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:server.TStorageKey)
}

void TStorageKey::SharedCtor() {
  _cached_size_ = 0;
}

TStorageKey::~TStorageKey() {
  // @@protoc_insertion_point(destructor:server.TStorageKey)
  SharedDtor();
}

void TStorageKey::SharedDtor() {
}

void TStorageKey::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TStorageKey::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TStorageKey_descriptor_;
}

const TStorageKey& TStorageKey::default_instance() {
  protobuf_InitDefaults_api_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<TStorageKey> TStorageKey_default_instance_;

TStorageKey* TStorageKey::New(::google::protobuf::Arena* arena) const {
  TStorageKey* n = new TStorageKey;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TStorageKey::Clear() {
// @@protoc_insertion_point(message_clear_start:server.TStorageKey)
  keys_.Clear();
}

bool TStorageKey::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:server.TStorageKey)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .server.TStorageKey.StorageKey keys = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_keys:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_keys()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_keys;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:server.TStorageKey)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:server.TStorageKey)
  return false;
#undef DO_
}

void TStorageKey::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:server.TStorageKey)
  // repeated .server.TStorageKey.StorageKey keys = 1;
  for (unsigned int i = 0, n = this->keys_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->keys(i), output);
  }

  // @@protoc_insertion_point(serialize_end:server.TStorageKey)
}

::google::protobuf::uint8* TStorageKey::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:server.TStorageKey)
  // repeated .server.TStorageKey.StorageKey keys = 1;
  for (unsigned int i = 0, n = this->keys_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->keys(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:server.TStorageKey)
  return target;
}

size_t TStorageKey::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:server.TStorageKey)
  size_t total_size = 0;

  // repeated .server.TStorageKey.StorageKey keys = 1;
  {
    unsigned int count = this->keys_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->keys(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TStorageKey::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:server.TStorageKey)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const TStorageKey* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TStorageKey>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:server.TStorageKey)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:server.TStorageKey)
    UnsafeMergeFrom(*source);
  }
}

void TStorageKey::MergeFrom(const TStorageKey& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:server.TStorageKey)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void TStorageKey::UnsafeMergeFrom(const TStorageKey& from) {
  GOOGLE_DCHECK(&from != this);
  keys_.MergeFrom(from.keys_);
}

void TStorageKey::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:server.TStorageKey)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TStorageKey::CopyFrom(const TStorageKey& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:server.TStorageKey)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool TStorageKey::IsInitialized() const {

  return true;
}

void TStorageKey::Swap(TStorageKey* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TStorageKey::InternalSwap(TStorageKey* other) {
  keys_.UnsafeArenaSwap(&other->keys_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TStorageKey::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TStorageKey_descriptor_;
  metadata.reflection = TStorageKey_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TStorageKey_StorageKey

// optional string bucket = 1;
void TStorageKey_StorageKey::clear_bucket() {
  bucket_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& TStorageKey_StorageKey::bucket() const {
  // @@protoc_insertion_point(field_get:server.TStorageKey.StorageKey.bucket)
  return bucket_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TStorageKey_StorageKey::set_bucket(const ::std::string& value) {
  
  bucket_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:server.TStorageKey.StorageKey.bucket)
}
void TStorageKey_StorageKey::set_bucket(const char* value) {
  
  bucket_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:server.TStorageKey.StorageKey.bucket)
}
void TStorageKey_StorageKey::set_bucket(const char* value, size_t size) {
  
  bucket_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:server.TStorageKey.StorageKey.bucket)
}
::std::string* TStorageKey_StorageKey::mutable_bucket() {
  
  // @@protoc_insertion_point(field_mutable:server.TStorageKey.StorageKey.bucket)
  return bucket_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* TStorageKey_StorageKey::release_bucket() {
  // @@protoc_insertion_point(field_release:server.TStorageKey.StorageKey.bucket)
  
  return bucket_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TStorageKey_StorageKey::set_allocated_bucket(::std::string* bucket) {
  if (bucket != NULL) {
    
  } else {
    
  }
  bucket_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), bucket);
  // @@protoc_insertion_point(field_set_allocated:server.TStorageKey.StorageKey.bucket)
}

// optional string collection = 2;
void TStorageKey_StorageKey::clear_collection() {
  collection_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& TStorageKey_StorageKey::collection() const {
  // @@protoc_insertion_point(field_get:server.TStorageKey.StorageKey.collection)
  return collection_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TStorageKey_StorageKey::set_collection(const ::std::string& value) {
  
  collection_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:server.TStorageKey.StorageKey.collection)
}
void TStorageKey_StorageKey::set_collection(const char* value) {
  
  collection_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:server.TStorageKey.StorageKey.collection)
}
void TStorageKey_StorageKey::set_collection(const char* value, size_t size) {
  
  collection_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:server.TStorageKey.StorageKey.collection)
}
::std::string* TStorageKey_StorageKey::mutable_collection() {
  
  // @@protoc_insertion_point(field_mutable:server.TStorageKey.StorageKey.collection)
  return collection_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* TStorageKey_StorageKey::release_collection() {
  // @@protoc_insertion_point(field_release:server.TStorageKey.StorageKey.collection)
  
  return collection_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TStorageKey_StorageKey::set_allocated_collection(::std::string* collection) {
  if (collection != NULL) {
    
  } else {
    
  }
  collection_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), collection);
  // @@protoc_insertion_point(field_set_allocated:server.TStorageKey.StorageKey.collection)
}

// optional string record = 3;
void TStorageKey_StorageKey::clear_record() {
  record_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& TStorageKey_StorageKey::record() const {
  // @@protoc_insertion_point(field_get:server.TStorageKey.StorageKey.record)
  return record_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TStorageKey_StorageKey::set_record(const ::std::string& value) {
  
  record_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:server.TStorageKey.StorageKey.record)
}
void TStorageKey_StorageKey::set_record(const char* value) {
  
  record_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:server.TStorageKey.StorageKey.record)
}
void TStorageKey_StorageKey::set_record(const char* value, size_t size) {
  
  record_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:server.TStorageKey.StorageKey.record)
}
::std::string* TStorageKey_StorageKey::mutable_record() {
  
  // @@protoc_insertion_point(field_mutable:server.TStorageKey.StorageKey.record)
  return record_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* TStorageKey_StorageKey::release_record() {
  // @@protoc_insertion_point(field_release:server.TStorageKey.StorageKey.record)
  
  return record_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TStorageKey_StorageKey::set_allocated_record(::std::string* record) {
  if (record != NULL) {
    
  } else {
    
  }
  record_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), record);
  // @@protoc_insertion_point(field_set_allocated:server.TStorageKey.StorageKey.record)
}

// optional bytes version = 4;
void TStorageKey_StorageKey::clear_version() {
  version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& TStorageKey_StorageKey::version() const {
  // @@protoc_insertion_point(field_get:server.TStorageKey.StorageKey.version)
  return version_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TStorageKey_StorageKey::set_version(const ::std::string& value) {
  
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:server.TStorageKey.StorageKey.version)
}
void TStorageKey_StorageKey::set_version(const char* value) {
  
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:server.TStorageKey.StorageKey.version)
}
void TStorageKey_StorageKey::set_version(const void* value, size_t size) {
  
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:server.TStorageKey.StorageKey.version)
}
::std::string* TStorageKey_StorageKey::mutable_version() {
  
  // @@protoc_insertion_point(field_mutable:server.TStorageKey.StorageKey.version)
  return version_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* TStorageKey_StorageKey::release_version() {
  // @@protoc_insertion_point(field_release:server.TStorageKey.StorageKey.version)
  
  return version_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TStorageKey_StorageKey::set_allocated_version(::std::string* version) {
  if (version != NULL) {
    
  } else {
    
  }
  version_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), version);
  // @@protoc_insertion_point(field_set_allocated:server.TStorageKey.StorageKey.version)
}

inline const TStorageKey_StorageKey* TStorageKey_StorageKey::internal_default_instance() {
  return &TStorageKey_StorageKey_default_instance_.get();
}
// -------------------------------------------------------------------

// TStorageKey

// repeated .server.TStorageKey.StorageKey keys = 1;
int TStorageKey::keys_size() const {
  return keys_.size();
}
void TStorageKey::clear_keys() {
  keys_.Clear();
}
const ::server::TStorageKey_StorageKey& TStorageKey::keys(int index) const {
  // @@protoc_insertion_point(field_get:server.TStorageKey.keys)
  return keys_.Get(index);
}
::server::TStorageKey_StorageKey* TStorageKey::mutable_keys(int index) {
  // @@protoc_insertion_point(field_mutable:server.TStorageKey.keys)
  return keys_.Mutable(index);
}
::server::TStorageKey_StorageKey* TStorageKey::add_keys() {
  // @@protoc_insertion_point(field_add:server.TStorageKey.keys)
  return keys_.Add();
}
::google::protobuf::RepeatedPtrField< ::server::TStorageKey_StorageKey >*
TStorageKey::mutable_keys() {
  // @@protoc_insertion_point(field_mutable_list:server.TStorageKey.keys)
  return &keys_;
}
const ::google::protobuf::RepeatedPtrField< ::server::TStorageKey_StorageKey >&
TStorageKey::keys() const {
  // @@protoc_insertion_point(field_list:server.TStorageKey.keys)
  return keys_;
}

inline const TStorageKey* TStorageKey::internal_default_instance() {
  return &TStorageKey_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TStorageRemove_StorageKey::kBucketFieldNumber;
const int TStorageRemove_StorageKey::kCollectionFieldNumber;
const int TStorageRemove_StorageKey::kRecordFieldNumber;
const int TStorageRemove_StorageKey::kVersionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TStorageRemove_StorageKey::TStorageRemove_StorageKey()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_api_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:server.TStorageRemove.StorageKey)
}

void TStorageRemove_StorageKey::InitAsDefaultInstance() {
}

TStorageRemove_StorageKey::TStorageRemove_StorageKey(const TStorageRemove_StorageKey& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:server.TStorageRemove.StorageKey)
}

void TStorageRemove_StorageKey::SharedCtor() {
  bucket_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  collection_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  record_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

TStorageRemove_StorageKey::~TStorageRemove_StorageKey() {
  // @@protoc_insertion_point(destructor:server.TStorageRemove.StorageKey)
  SharedDtor();
}

void TStorageRemove_StorageKey::SharedDtor() {
  bucket_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  collection_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  record_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  version_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void TStorageRemove_StorageKey::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TStorageRemove_StorageKey::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TStorageRemove_StorageKey_descriptor_;
}

const TStorageRemove_StorageKey& TStorageRemove_StorageKey::default_instance() {
  protobuf_InitDefaults_api_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<TStorageRemove_StorageKey> TStorageRemove_StorageKey_default_instance_;

TStorageRemove_StorageKey* TStorageRemove_StorageKey::New(::google::protobuf::Arena* arena) const {
  TStorageRemove_StorageKey* n = new TStorageRemove_StorageKey;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TStorageRemove_StorageKey::Clear() {
// @@protoc_insertion_point(message_clear_start:server.TStorageRemove.StorageKey)
  bucket_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  collection_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  record_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool TStorageRemove_StorageKey::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:server.TStorageRemove.StorageKey)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string bucket = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_bucket()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->bucket().data(), this->bucket().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "server.TStorageRemove.StorageKey.bucket"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_collection;
        break;
      }

      // optional string collection = 2;
      case 2: {
        if (tag == 18) {
         parse_collection:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_collection()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->collection().data(), this->collection().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "server.TStorageRemove.StorageKey.collection"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_record;
        break;
      }

      // optional string record = 3;
      case 3: {
        if (tag == 26) {
         parse_record:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_record()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->record().data(), this->record().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "server.TStorageRemove.StorageKey.record"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_version;
        break;
      }

      // optional bytes version = 4;
      case 4: {
        if (tag == 34) {
         parse_version:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_version()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:server.TStorageRemove.StorageKey)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:server.TStorageRemove.StorageKey)
  return false;
#undef DO_
}

void TStorageRemove_StorageKey::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:server.TStorageRemove.StorageKey)
  // optional string bucket = 1;
  if (this->bucket().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->bucket().data(), this->bucket().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server.TStorageRemove.StorageKey.bucket");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->bucket(), output);
  }

  // optional string collection = 2;
  if (this->collection().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->collection().data(), this->collection().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server.TStorageRemove.StorageKey.collection");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->collection(), output);
  }

  // optional string record = 3;
  if (this->record().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->record().data(), this->record().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server.TStorageRemove.StorageKey.record");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->record(), output);
  }

  // optional bytes version = 4;
  if (this->version().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->version(), output);
  }

  // @@protoc_insertion_point(serialize_end:server.TStorageRemove.StorageKey)
}

::google::protobuf::uint8* TStorageRemove_StorageKey::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:server.TStorageRemove.StorageKey)
  // optional string bucket = 1;
  if (this->bucket().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->bucket().data(), this->bucket().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server.TStorageRemove.StorageKey.bucket");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->bucket(), target);
  }

  // optional string collection = 2;
  if (this->collection().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->collection().data(), this->collection().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server.TStorageRemove.StorageKey.collection");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->collection(), target);
  }

  // optional string record = 3;
  if (this->record().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->record().data(), this->record().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server.TStorageRemove.StorageKey.record");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->record(), target);
  }

  // optional bytes version = 4;
  if (this->version().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->version(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:server.TStorageRemove.StorageKey)
  return target;
}

size_t TStorageRemove_StorageKey::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:server.TStorageRemove.StorageKey)
  size_t total_size = 0;

  // optional string bucket = 1;
  if (this->bucket().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->bucket());
  }

  // optional string collection = 2;
  if (this->collection().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->collection());
  }

  // optional string record = 3;
  if (this->record().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->record());
  }

  // optional bytes version = 4;
  if (this->version().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->version());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TStorageRemove_StorageKey::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:server.TStorageRemove.StorageKey)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const TStorageRemove_StorageKey* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TStorageRemove_StorageKey>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:server.TStorageRemove.StorageKey)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:server.TStorageRemove.StorageKey)
    UnsafeMergeFrom(*source);
  }
}

void TStorageRemove_StorageKey::MergeFrom(const TStorageRemove_StorageKey& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:server.TStorageRemove.StorageKey)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void TStorageRemove_StorageKey::UnsafeMergeFrom(const TStorageRemove_StorageKey& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.bucket().size() > 0) {

    bucket_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.bucket_);
  }
  if (from.collection().size() > 0) {

    collection_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.collection_);
  }
  if (from.record().size() > 0) {

    record_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.record_);
  }
  if (from.version().size() > 0) {

    version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.version_);
  }
}

void TStorageRemove_StorageKey::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:server.TStorageRemove.StorageKey)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TStorageRemove_StorageKey::CopyFrom(const TStorageRemove_StorageKey& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:server.TStorageRemove.StorageKey)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool TStorageRemove_StorageKey::IsInitialized() const {

  return true;
}

void TStorageRemove_StorageKey::Swap(TStorageRemove_StorageKey* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TStorageRemove_StorageKey::InternalSwap(TStorageRemove_StorageKey* other) {
  bucket_.Swap(&other->bucket_);
  collection_.Swap(&other->collection_);
  record_.Swap(&other->record_);
  version_.Swap(&other->version_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TStorageRemove_StorageKey::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TStorageRemove_StorageKey_descriptor_;
  metadata.reflection = TStorageRemove_StorageKey_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TStorageRemove::kKeysFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TStorageRemove::TStorageRemove()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_api_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:server.TStorageRemove)
}

void TStorageRemove::InitAsDefaultInstance() {
}

TStorageRemove::TStorageRemove(const TStorageRemove& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:server.TStorageRemove)
}

void TStorageRemove::SharedCtor() {
  _cached_size_ = 0;
}

TStorageRemove::~TStorageRemove() {
  // @@protoc_insertion_point(destructor:server.TStorageRemove)
  SharedDtor();
}

void TStorageRemove::SharedDtor() {
}

void TStorageRemove::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TStorageRemove::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TStorageRemove_descriptor_;
}

const TStorageRemove& TStorageRemove::default_instance() {
  protobuf_InitDefaults_api_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<TStorageRemove> TStorageRemove_default_instance_;

TStorageRemove* TStorageRemove::New(::google::protobuf::Arena* arena) const {
  TStorageRemove* n = new TStorageRemove;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TStorageRemove::Clear() {
// @@protoc_insertion_point(message_clear_start:server.TStorageRemove)
  keys_.Clear();
}

bool TStorageRemove::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:server.TStorageRemove)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .server.TStorageRemove.StorageKey keys = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_keys:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_keys()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_keys;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:server.TStorageRemove)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:server.TStorageRemove)
  return false;
#undef DO_
}

void TStorageRemove::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:server.TStorageRemove)
  // repeated .server.TStorageRemove.StorageKey keys = 1;
  for (unsigned int i = 0, n = this->keys_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->keys(i), output);
  }

  // @@protoc_insertion_point(serialize_end:server.TStorageRemove)
}

::google::protobuf::uint8* TStorageRemove::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:server.TStorageRemove)
  // repeated .server.TStorageRemove.StorageKey keys = 1;
  for (unsigned int i = 0, n = this->keys_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->keys(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:server.TStorageRemove)
  return target;
}

size_t TStorageRemove::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:server.TStorageRemove)
  size_t total_size = 0;

  // repeated .server.TStorageRemove.StorageKey keys = 1;
  {
    unsigned int count = this->keys_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->keys(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TStorageRemove::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:server.TStorageRemove)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const TStorageRemove* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TStorageRemove>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:server.TStorageRemove)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:server.TStorageRemove)
    UnsafeMergeFrom(*source);
  }
}

void TStorageRemove::MergeFrom(const TStorageRemove& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:server.TStorageRemove)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void TStorageRemove::UnsafeMergeFrom(const TStorageRemove& from) {
  GOOGLE_DCHECK(&from != this);
  keys_.MergeFrom(from.keys_);
}

void TStorageRemove::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:server.TStorageRemove)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TStorageRemove::CopyFrom(const TStorageRemove& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:server.TStorageRemove)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool TStorageRemove::IsInitialized() const {

  return true;
}

void TStorageRemove::Swap(TStorageRemove* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TStorageRemove::InternalSwap(TStorageRemove* other) {
  keys_.UnsafeArenaSwap(&other->keys_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TStorageRemove::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TStorageRemove_descriptor_;
  metadata.reflection = TStorageRemove_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TStorageRemove_StorageKey

// optional string bucket = 1;
void TStorageRemove_StorageKey::clear_bucket() {
  bucket_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& TStorageRemove_StorageKey::bucket() const {
  // @@protoc_insertion_point(field_get:server.TStorageRemove.StorageKey.bucket)
  return bucket_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TStorageRemove_StorageKey::set_bucket(const ::std::string& value) {
  
  bucket_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:server.TStorageRemove.StorageKey.bucket)
}
void TStorageRemove_StorageKey::set_bucket(const char* value) {
  
  bucket_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:server.TStorageRemove.StorageKey.bucket)
}
void TStorageRemove_StorageKey::set_bucket(const char* value, size_t size) {
  
  bucket_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:server.TStorageRemove.StorageKey.bucket)
}
::std::string* TStorageRemove_StorageKey::mutable_bucket() {
  
  // @@protoc_insertion_point(field_mutable:server.TStorageRemove.StorageKey.bucket)
  return bucket_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* TStorageRemove_StorageKey::release_bucket() {
  // @@protoc_insertion_point(field_release:server.TStorageRemove.StorageKey.bucket)
  
  return bucket_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TStorageRemove_StorageKey::set_allocated_bucket(::std::string* bucket) {
  if (bucket != NULL) {
    
  } else {
    
  }
  bucket_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), bucket);
  // @@protoc_insertion_point(field_set_allocated:server.TStorageRemove.StorageKey.bucket)
}

// optional string collection = 2;
void TStorageRemove_StorageKey::clear_collection() {
  collection_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& TStorageRemove_StorageKey::collection() const {
  // @@protoc_insertion_point(field_get:server.TStorageRemove.StorageKey.collection)
  return collection_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TStorageRemove_StorageKey::set_collection(const ::std::string& value) {
  
  collection_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:server.TStorageRemove.StorageKey.collection)
}
void TStorageRemove_StorageKey::set_collection(const char* value) {
  
  collection_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:server.TStorageRemove.StorageKey.collection)
}
void TStorageRemove_StorageKey::set_collection(const char* value, size_t size) {
  
  collection_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:server.TStorageRemove.StorageKey.collection)
}
::std::string* TStorageRemove_StorageKey::mutable_collection() {
  
  // @@protoc_insertion_point(field_mutable:server.TStorageRemove.StorageKey.collection)
  return collection_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* TStorageRemove_StorageKey::release_collection() {
  // @@protoc_insertion_point(field_release:server.TStorageRemove.StorageKey.collection)
  
  return collection_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TStorageRemove_StorageKey::set_allocated_collection(::std::string* collection) {
  if (collection != NULL) {
    
  } else {
    
  }
  collection_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), collection);
  // @@protoc_insertion_point(field_set_allocated:server.TStorageRemove.StorageKey.collection)
}

// optional string record = 3;
void TStorageRemove_StorageKey::clear_record() {
  record_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& TStorageRemove_StorageKey::record() const {
  // @@protoc_insertion_point(field_get:server.TStorageRemove.StorageKey.record)
  return record_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TStorageRemove_StorageKey::set_record(const ::std::string& value) {
  
  record_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:server.TStorageRemove.StorageKey.record)
}
void TStorageRemove_StorageKey::set_record(const char* value) {
  
  record_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:server.TStorageRemove.StorageKey.record)
}
void TStorageRemove_StorageKey::set_record(const char* value, size_t size) {
  
  record_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:server.TStorageRemove.StorageKey.record)
}
::std::string* TStorageRemove_StorageKey::mutable_record() {
  
  // @@protoc_insertion_point(field_mutable:server.TStorageRemove.StorageKey.record)
  return record_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* TStorageRemove_StorageKey::release_record() {
  // @@protoc_insertion_point(field_release:server.TStorageRemove.StorageKey.record)
  
  return record_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TStorageRemove_StorageKey::set_allocated_record(::std::string* record) {
  if (record != NULL) {
    
  } else {
    
  }
  record_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), record);
  // @@protoc_insertion_point(field_set_allocated:server.TStorageRemove.StorageKey.record)
}

// optional bytes version = 4;
void TStorageRemove_StorageKey::clear_version() {
  version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& TStorageRemove_StorageKey::version() const {
  // @@protoc_insertion_point(field_get:server.TStorageRemove.StorageKey.version)
  return version_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TStorageRemove_StorageKey::set_version(const ::std::string& value) {
  
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:server.TStorageRemove.StorageKey.version)
}
void TStorageRemove_StorageKey::set_version(const char* value) {
  
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:server.TStorageRemove.StorageKey.version)
}
void TStorageRemove_StorageKey::set_version(const void* value, size_t size) {
  
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:server.TStorageRemove.StorageKey.version)
}
::std::string* TStorageRemove_StorageKey::mutable_version() {
  
  // @@protoc_insertion_point(field_mutable:server.TStorageRemove.StorageKey.version)
  return version_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* TStorageRemove_StorageKey::release_version() {
  // @@protoc_insertion_point(field_release:server.TStorageRemove.StorageKey.version)
  
  return version_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TStorageRemove_StorageKey::set_allocated_version(::std::string* version) {
  if (version != NULL) {
    
  } else {
    
  }
  version_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), version);
  // @@protoc_insertion_point(field_set_allocated:server.TStorageRemove.StorageKey.version)
}

inline const TStorageRemove_StorageKey* TStorageRemove_StorageKey::internal_default_instance() {
  return &TStorageRemove_StorageKey_default_instance_.get();
}
// -------------------------------------------------------------------

// TStorageRemove

// repeated .server.TStorageRemove.StorageKey keys = 1;
int TStorageRemove::keys_size() const {
  return keys_.size();
}
void TStorageRemove::clear_keys() {
  keys_.Clear();
}
const ::server::TStorageRemove_StorageKey& TStorageRemove::keys(int index) const {
  // @@protoc_insertion_point(field_get:server.TStorageRemove.keys)
  return keys_.Get(index);
}
::server::TStorageRemove_StorageKey* TStorageRemove::mutable_keys(int index) {
  // @@protoc_insertion_point(field_mutable:server.TStorageRemove.keys)
  return keys_.Mutable(index);
}
::server::TStorageRemove_StorageKey* TStorageRemove::add_keys() {
  // @@protoc_insertion_point(field_add:server.TStorageRemove.keys)
  return keys_.Add();
}
::google::protobuf::RepeatedPtrField< ::server::TStorageRemove_StorageKey >*
TStorageRemove::mutable_keys() {
  // @@protoc_insertion_point(field_mutable_list:server.TStorageRemove.keys)
  return &keys_;
}
const ::google::protobuf::RepeatedPtrField< ::server::TStorageRemove_StorageKey >&
TStorageRemove::keys() const {
  // @@protoc_insertion_point(field_list:server.TStorageRemove.keys)
  return keys_;
}

inline const TStorageRemove* TStorageRemove::internal_default_instance() {
  return &TStorageRemove_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace server

// @@protoc_insertion_point(global_scope)
#pragma warning( pop )  